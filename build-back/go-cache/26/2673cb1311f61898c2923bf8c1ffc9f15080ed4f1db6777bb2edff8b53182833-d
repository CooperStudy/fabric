//line /home/cooper/go/src/github.com/hyperledger/fabric/orderer/common/server/server.go:1
/*
Copyright IBM Corp. 2017 All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package server; import _cover_atomic_ "sync/atomic"

import (
	"fmt"
	"io/ioutil"
	"os"
	"runtime/debug"
	"time"

	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/common/deliver"
	"github.com/hyperledger/fabric/common/metrics"
	"github.com/hyperledger/fabric/common/policies"
	"github.com/hyperledger/fabric/orderer/common/broadcast"
	localconfig "github.com/hyperledger/fabric/orderer/common/localconfig"
	"github.com/hyperledger/fabric/orderer/common/msgprocessor"
	"github.com/hyperledger/fabric/orderer/common/multichannel"
	cb "github.com/hyperledger/fabric/protos/common"
	ab "github.com/hyperledger/fabric/protos/orderer"
	"github.com/pkg/errors"
)

type broadcastSupport struct {
	*multichannel.Registrar
}

func (bs broadcastSupport) BroadcastChannelSupport(msg *cb.Envelope) (*cb.ChannelHeader, bool, broadcast.ChannelSupport, error) {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[0], 1);
	return bs.Registrar.BroadcastChannelSupport(msg)
}

type deliverSupport struct {
	*multichannel.Registrar
}

func (ds deliverSupport) GetChain(chainID string) deliver.Chain {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[1], 1);
	chain := ds.Registrar.GetChain(chainID)
	if chain == nil {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[3], 1);
		return nil
	}
	_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[2], 1);return chain
}

type server struct {
	bh    *broadcast.Handler
	dh    *deliver.Handler
	debug *localconfig.Debug
	*multichannel.Registrar
}

type responseSender struct {
	ab.AtomicBroadcast_DeliverServer
}

func (rs *responseSender) SendStatusResponse(status cb.Status) error {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[4], 1);
	reply := &ab.DeliverResponse{
		Type: &ab.DeliverResponse_Status{Status: status},
	}
	return rs.Send(reply)
}

func (rs *responseSender) SendBlockResponse(block *cb.Block) error {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[5], 1);
	response := &ab.DeliverResponse{
		Type: &ab.DeliverResponse_Block{Block: block},
	}
	return rs.Send(response)
}

// NewServer creates an ab.AtomicBroadcastServer based on the broadcast target and ledger Reader
func NewServer(r *multichannel.Registrar, metricsProvider metrics.Provider, debug *localconfig.Debug, timeWindow time.Duration, mutualTLS bool) ab.AtomicBroadcastServer {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[6], 1);
	s := &server{
		dh: deliver.NewHandler(deliverSupport{Registrar: r}, timeWindow, mutualTLS, deliver.NewMetrics(metricsProvider)),
		bh: &broadcast.Handler{
			SupportRegistrar: broadcastSupport{Registrar: r},
			Metrics:          broadcast.NewMetrics(metricsProvider),
		},
		debug:     debug,
		Registrar: r,
	}
	return s
}

type msgTracer struct {
	function string
	debug    *localconfig.Debug
}

func (mt *msgTracer) trace(traceDir string, msg *cb.Envelope, err error) {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[7], 1);
	if err != nil {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[9], 1);
		return
	}

	_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[8], 1);now := time.Now().UnixNano()
	path := fmt.Sprintf("%s%c%d_%p.%s", traceDir, os.PathSeparator, now, msg, mt.function)
	logger.Debugf("Writing %s request trace to %s", mt.function, path)
	go func() {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[10], 1);
		pb, err := proto.Marshal(msg)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[12], 1);
			logger.Debugf("Error marshaling trace msg for %s: %s", path, err)
			return
		}
		_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[11], 1);err = ioutil.WriteFile(path, pb, 0660)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[13], 1);
			logger.Debugf("Error writing trace msg for %s: %s", path, err)
		}
	}()
}

type broadcastMsgTracer struct {
	ab.AtomicBroadcast_BroadcastServer
	msgTracer
}

func (bmt *broadcastMsgTracer) Recv() (*cb.Envelope, error) {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[14], 1);
	msg, err := bmt.AtomicBroadcast_BroadcastServer.Recv()
	if traceDir := bmt.debug.BroadcastTraceDir; traceDir != "" {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[16], 1);
		bmt.trace(bmt.debug.BroadcastTraceDir, msg, err)
	}
	_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[15], 1);return msg, err
}

type deliverMsgTracer struct {
	deliver.Receiver
	msgTracer
}

func (dmt *deliverMsgTracer) Recv() (*cb.Envelope, error) {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[17], 1);
	msg, err := dmt.Receiver.Recv()
	if traceDir := dmt.debug.DeliverTraceDir; traceDir != "" {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[19], 1);
		dmt.trace(traceDir, msg, err)
	}
	_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[18], 1);return msg, err
}

// Broadcast receives a stream of messages from a client for ordering
func (s *server) Broadcast(srv ab.AtomicBroadcast_BroadcastServer) error {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[20], 1);
	logger.Debugf("Starting new Broadcast handler")
	defer func() {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[22], 1);
		if r := recover(); r != nil {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[24], 1);
			logger.Criticalf("Broadcast client triggered panic: %s\n%s", r, debug.Stack())
		}
		_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[23], 1);logger.Debugf("Closing Broadcast stream")
	}()
	_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[21], 1);return s.bh.Handle(&broadcastMsgTracer{
		AtomicBroadcast_BroadcastServer: srv,
		msgTracer: msgTracer{
			debug:    s.debug,
			function: "Broadcast",
		},
	})
}

// Deliver sends a stream of blocks to a client after ordering
func (s *server) Deliver(srv ab.AtomicBroadcast_DeliverServer) error {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[25], 1);
	logger.Debugf("Starting new Deliver handler")
	defer func() {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[28], 1);
		if r := recover(); r != nil {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[30], 1);
			logger.Criticalf("Deliver client triggered panic: %s\n%s", r, debug.Stack())
		}
		_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[29], 1);logger.Debugf("Closing Deliver stream")
	}()

	_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[26], 1);policyChecker := func(env *cb.Envelope, channelID string) error {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[31], 1);
		chain := s.GetChain(channelID)
		if chain == nil {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[33], 1);
			return errors.Errorf("channel %s not found", channelID)
		}
		_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[32], 1);sf := msgprocessor.NewSigFilter(policies.ChannelReaders, chain)
		return sf.Apply(env)
	}
	_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[27], 1);deliverServer := &deliver.Server{
		PolicyChecker: deliver.PolicyCheckerFunc(policyChecker),
		Receiver: &deliverMsgTracer{
			Receiver: srv,
			msgTracer: msgTracer{
				debug:    s.debug,
				function: "Deliver",
			},
		},
		ResponseSender: &responseSender{
			AtomicBroadcast_DeliverServer: srv,
		},
	}
	return s.dh.Handle(srv.Context(), deliverServer)
}

func (s *server) sendProducer(srv ab.AtomicBroadcast_DeliverServer) func(msg proto.Message) error {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[34], 1);
	return func(msg proto.Message) error {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[35], 1);
		response, ok := msg.(*ab.DeliverResponse)
		if !ok {_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[37], 1);
			logger.Errorf("received wrong response type, expected response type ab.DeliverResponse")
			return errors.New("expected response type ab.DeliverResponse")
		}
		_cover_atomic_.AddUint32(&GoCover_2_333331623039636261656262.Count[36], 1);return srv.Send(response)
	}
}

var GoCover_2_333331623039636261656262 = struct {
	Count     [38]uint32
	Pos       [3 * 38]uint32
	NumStmt   [38]uint16
} {
	Pos: [3 * 38]uint32{
		33, 35, 0x20081, // [0]
		41, 43, 0x120041, // [1]
		46, 46, 0xe0002, // [2]
		43, 45, 0x30012, // [3]
		60, 65, 0x20046, // [4]
		67, 72, 0x20044, // [5]
		75, 86, 0x200aa, // [6]
		93, 94, 0x10004a, // [7]
		98, 101, 0xc0002, // [8]
		94, 96, 0x30010, // [9]
		101, 103, 0x11000c, // [10]
		107, 108, 0x110003, // [11]
		103, 106, 0x40011, // [12]
		108, 110, 0x40011, // [13]
		119, 121, 0x3d003d, // [14]
		124, 124, 0x110002, // [15]
		121, 123, 0x3003d, // [16]
		132, 134, 0x3b003b, // [17]
		137, 137, 0x110002, // [18]
		134, 136, 0x3003b, // [19]
		141, 143, 0xf004a, // [20]
		149, 155, 0x40002, // [21]
		143, 144, 0x1f000f, // [22]
		147, 147, 0x2c0003, // [23]
		144, 146, 0x4001f, // [24]
		159, 161, 0xf0046, // [25]
		168, 168, 0x420002, // [26]
		176, 189, 0x320002, // [27]
		161, 162, 0x1f000f, // [28]
		165, 165, 0x2a0003, // [29]
		162, 164, 0x4001f, // [30]
		168, 170, 0x130042, // [31]
		173, 174, 0x170003, // [32]
		170, 172, 0x40013, // [33]
		192, 193, 0x270063, // [34]
		193, 195, 0xa0027, // [35]
		199, 199, 0x1c0003, // [36]
		195, 198, 0x4000a, // [37]
	},
	NumStmt: [38]uint16{
		1, // 0
		2, // 1
		1, // 2
		1, // 3
		2, // 4
		2, // 5
		2, // 6
		1, // 7
		4, // 8
		1, // 9
		2, // 10
		2, // 11
		2, // 12
		1, // 13
		2, // 14
		1, // 15
		1, // 16
		2, // 17
		1, // 18
		1, // 19
		2, // 20
		1, // 21
		1, // 22
		1, // 23
		1, // 24
		2, // 25
		1, // 26
		2, // 27
		1, // 28
		1, // 29
		1, // 30
		2, // 31
		2, // 32
		1, // 33
		1, // 34
		2, // 35
		1, // 36
		2, // 37
	},
}
var _ = _cover_atomic_.LoadUint32
