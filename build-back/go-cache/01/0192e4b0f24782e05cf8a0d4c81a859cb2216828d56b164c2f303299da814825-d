//line /home/cooper/go/src/github.com/hyperledger/fabric/common/policies/implicitmetaparser.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package policies; import _cover_atomic_ "sync/atomic"

import (
	"strings"

	cb "github.com/hyperledger/fabric/protos/common"
	"github.com/pkg/errors"
)

func ImplicitMetaFromString(input string) (*cb.ImplicitMetaPolicy, error) {_cover_atomic_.AddUint32(&GoCover_2_306461616464623964633937.Count[0], 1);
	args := strings.Split(input, " ")
	if len(args) != 2 {_cover_atomic_.AddUint32(&GoCover_2_306461616464623964633937.Count[3], 1);
		return nil, errors.Errorf("expected two space separated tokens, but got %d", len(args))
	}

	_cover_atomic_.AddUint32(&GoCover_2_306461616464623964633937.Count[1], 1);res := &cb.ImplicitMetaPolicy{
		SubPolicy: args[1],
	}

	switch args[0] {
	case cb.ImplicitMetaPolicy_ANY.String():_cover_atomic_.AddUint32(&GoCover_2_306461616464623964633937.Count[4], 1);
		res.Rule = cb.ImplicitMetaPolicy_ANY
	case cb.ImplicitMetaPolicy_ALL.String():_cover_atomic_.AddUint32(&GoCover_2_306461616464623964633937.Count[5], 1);
		res.Rule = cb.ImplicitMetaPolicy_ALL
	case cb.ImplicitMetaPolicy_MAJORITY.String():_cover_atomic_.AddUint32(&GoCover_2_306461616464623964633937.Count[6], 1);
		res.Rule = cb.ImplicitMetaPolicy_MAJORITY
	default:_cover_atomic_.AddUint32(&GoCover_2_306461616464623964633937.Count[7], 1);
		return nil, errors.Errorf("unknown rule type '%s', expected ALL, ANY, or MAJORITY", args[0])
	}

	_cover_atomic_.AddUint32(&GoCover_2_306461616464623964633937.Count[2], 1);return res, nil
}

var GoCover_2_306461616464623964633937 = struct {
	Count     [8]uint32
	Pos       [3 * 8]uint32
	NumStmt   [8]uint16
} {
	Pos: [3 * 8]uint32{
		16, 18, 0x14004b, // [0]
		22, 26, 0x110002, // [1]
		37, 37, 0x110002, // [2]
		18, 20, 0x30014, // [3]
		27, 28, 0x27002a, // [4]
		29, 30, 0x27002a, // [5]
		31, 32, 0x2c002f, // [6]
		33, 34, 0x5f000a, // [7]
	},
	NumStmt: [8]uint16{
		2, // 0
		2, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
	},
}
var _ = _cover_atomic_.LoadUint32
