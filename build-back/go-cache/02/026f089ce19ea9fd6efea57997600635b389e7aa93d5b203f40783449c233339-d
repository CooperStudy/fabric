//line /home/cooper/go/src/github.com/hyperledger/fabric/common/channelconfig/organization.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package channelconfig; import _cover_atomic_ "sync/atomic"

import (
	"fmt"

	"github.com/hyperledger/fabric/msp"
	cb "github.com/hyperledger/fabric/protos/common"
	mspprotos "github.com/hyperledger/fabric/protos/msp"
	"github.com/pkg/errors"
)

const (
	// MSPKey is the key for the MSP definition in orderer groups
	MSPKey = "MSP"
)

// OrganizationProtos are used to deserialize the organization config
type OrganizationProtos struct {
	MSP *mspprotos.MSPConfig
}

// OrganizationConfig stores the configuration for an organization
type OrganizationConfig struct {
	protos *OrganizationProtos

	mspConfigHandler *MSPConfigHandler
	msp              msp.MSP
	mspID            string
	name             string
}

// NewOrganizationConfig creates a new config for an organization
func NewOrganizationConfig(name string, orgGroup *cb.ConfigGroup, mspConfigHandler *MSPConfigHandler) (*OrganizationConfig, error) {_cover_atomic_.AddUint32(&GoCover_12_373339383034363064316135.Count[0], 1);
	if len(orgGroup.Groups) > 0 {_cover_atomic_.AddUint32(&GoCover_12_373339383034363064316135.Count[4], 1);
		return nil, fmt.Errorf("organizations do not support sub-groups")
	}

	_cover_atomic_.AddUint32(&GoCover_12_373339383034363064316135.Count[1], 1);oc := &OrganizationConfig{
		protos:           &OrganizationProtos{},
		name:             name,
		mspConfigHandler: mspConfigHandler,
	}

	if err := DeserializeProtoValuesFromGroup(orgGroup, oc.protos); err != nil {_cover_atomic_.AddUint32(&GoCover_12_373339383034363064316135.Count[5], 1);
		return nil, errors.Wrap(err, "failed to deserialize values")
	}

	_cover_atomic_.AddUint32(&GoCover_12_373339383034363064316135.Count[2], 1);if err := oc.Validate(); err != nil {_cover_atomic_.AddUint32(&GoCover_12_373339383034363064316135.Count[6], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_12_373339383034363064316135.Count[3], 1);return oc, nil
}

// Name returns the name this org is referred to in config
func (oc *OrganizationConfig) Name() string {_cover_atomic_.AddUint32(&GoCover_12_373339383034363064316135.Count[7], 1);
	return oc.name
}

// MSPID returns the MSP ID associated with this org
func (oc *OrganizationConfig) MSPID() string {_cover_atomic_.AddUint32(&GoCover_12_373339383034363064316135.Count[8], 1);
	return oc.mspID
}

// Validate returns whether the configuration is valid
func (oc *OrganizationConfig) Validate() error {_cover_atomic_.AddUint32(&GoCover_12_373339383034363064316135.Count[9], 1);
	return oc.validateMSP()
}

func (oc *OrganizationConfig) validateMSP() error {_cover_atomic_.AddUint32(&GoCover_12_373339383034363064316135.Count[10], 1);
	var err error

	logger.Debugf("Setting up MSP for org %s", oc.name)
	oc.msp, err = oc.mspConfigHandler.ProposeMSP(oc.protos.MSP)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_12_373339383034363064316135.Count[13], 1);
		return err
	}

	_cover_atomic_.AddUint32(&GoCover_12_373339383034363064316135.Count[11], 1);oc.mspID, _ = oc.msp.GetIdentifier()

	if oc.mspID == "" {_cover_atomic_.AddUint32(&GoCover_12_373339383034363064316135.Count[14], 1);
		return fmt.Errorf("MSP for org %s has empty MSP ID", oc.name)
	}

	_cover_atomic_.AddUint32(&GoCover_12_373339383034363064316135.Count[12], 1);return nil
}

var GoCover_12_373339383034363064316135 = struct {
	Count     [15]uint32
	Pos       [3 * 15]uint32
	NumStmt   [15]uint16
} {
	Pos: [3 * 15]uint32{
		39, 40, 0x1e0084, // [0]
		44, 50, 0x4d0002, // [1]
		54, 54, 0x260002, // [2]
		58, 58, 0x100002, // [3]
		40, 42, 0x3001e, // [4]
		50, 52, 0x3004d, // [5]
		54, 56, 0x30026, // [6]
		62, 64, 0x2002d, // [7]
		67, 69, 0x2002e, // [8]
		72, 74, 0x20030, // [9]
		76, 81, 0x100033, // [10]
		85, 87, 0x140002, // [11]
		91, 91, 0xc0002, // [12]
		81, 83, 0x30010, // [13]
		87, 89, 0x30014, // [14]
	},
	NumStmt: [15]uint16{
		1, // 0
		2, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
		4, // 10
		2, // 11
		1, // 12
		1, // 13
		1, // 14
	},
}
var _ = _cover_atomic_.LoadUint32
