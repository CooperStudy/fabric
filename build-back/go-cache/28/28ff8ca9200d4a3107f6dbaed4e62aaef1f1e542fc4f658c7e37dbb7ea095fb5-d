//line /home/cooper/go/src/github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/statedb/stateleveldb/value_encoding.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package stateleveldb; import _cover_atomic_ "sync/atomic"

import (
	proto "github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/statedb"
	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/statedb/stateleveldb/msgs"
	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/version"
)

// encode value encodes the versioned value. starting in v1.3 the encoding begins with a nil
// byte and includes metadata.
func encodeValue(v *statedb.VersionedValue) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_2_623534613733643331386633.Count[0], 1);
	vvMsg := &msgs.VersionedValueProto{
		VersionBytes: v.Version.ToBytes(),
		Value:        v.Value,
		Metadata:     v.Metadata,
	}
	encodedValue, err := proto.Marshal(vvMsg)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_2_623534613733643331386633.Count[2], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_2_623534613733643331386633.Count[1], 1);encodedValue = append([]byte{0}, encodedValue...)
	return encodedValue, nil
}

// decodeValue decodes the statedb value bytes using either the old (pre-v1.3) encoding
// or the new (v1.3 and later) encoding that supports metadata.
func decodeValue(encodedValue []byte) (*statedb.VersionedValue, error) {_cover_atomic_.AddUint32(&GoCover_2_623534613733643331386633.Count[3], 1);
	if oldFormatEncoding(encodedValue) {_cover_atomic_.AddUint32(&GoCover_2_623534613733643331386633.Count[7], 1);
		val, ver := decodeValueOldFormat(encodedValue)
		return &statedb.VersionedValue{Version: ver, Value: val, Metadata: nil}, nil
	}
	_cover_atomic_.AddUint32(&GoCover_2_623534613733643331386633.Count[4], 1);msg := &msgs.VersionedValueProto{}
	err := proto.Unmarshal(encodedValue[1:], msg)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_2_623534613733643331386633.Count[8], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_2_623534613733643331386633.Count[5], 1);ver, _ := version.NewHeightFromBytes(msg.VersionBytes)
	val := msg.Value
	metadata := msg.Metadata
	// protobuf always makes an empty byte array as nil
	if val == nil {_cover_atomic_.AddUint32(&GoCover_2_623534613733643331386633.Count[9], 1);
		val = []byte{}
	}
	_cover_atomic_.AddUint32(&GoCover_2_623534613733643331386633.Count[6], 1);return &statedb.VersionedValue{Version: ver, Value: val, Metadata: metadata}, nil
}

// encodeValueOldFormat appends the value to the version, allows storage of version and value in binary form.
// With the introduction of metadata feature in v1.3, we change the encoding (see function below). However, we retain
// this funtion for test so as to make sure that we can decode old format and support mixed formats present
// in a statedb. This function should be used only in tests to generate the encoding in old format
func encodeValueOldFormat(value []byte, version *version.Height) []byte {_cover_atomic_.AddUint32(&GoCover_2_623534613733643331386633.Count[10], 1);
	encodedValue := version.ToBytes()
	if value != nil {_cover_atomic_.AddUint32(&GoCover_2_623534613733643331386633.Count[12], 1);
		encodedValue = append(encodedValue, value...)
	}
	_cover_atomic_.AddUint32(&GoCover_2_623534613733643331386633.Count[11], 1);return encodedValue
}

// decodeValueOldFormat separates the version and value from a binary value
// See comments in the function `encodeValueOldFormat`. We retain this function as is
// to use this for decoding the old format (pre-v1.3) data present in the statedb. This function
// should not be used directly or in a tests. The function 'decodeValue' should be used
// for all decodings - which is expected to detect the encoded format and direct the call
// to this function for decoding the values encoded in the old format
func decodeValueOldFormat(encodedValue []byte) ([]byte, *version.Height) {_cover_atomic_.AddUint32(&GoCover_2_623534613733643331386633.Count[13], 1);
	height, n := version.NewHeightFromBytes(encodedValue)
	value := encodedValue[n:]
	return value, height
}

// oldFormatEncoding checks whether the value is encoded using the old (pre-v1.3) format
// or new format (v1.3 and later for encoding metadata).
func oldFormatEncoding(encodedValue []byte) bool {_cover_atomic_.AddUint32(&GoCover_2_623534613733643331386633.Count[14], 1);
	return encodedValue[0] != byte(0) ||
		(encodedValue[0]|encodedValue[1]) == byte(0) // this check covers a corner case
	// where the old formatted value happens to start with a nil byte. In this corner case,
	// the channel config happen to be persisted for the tuple <block 0, tran 0>. So, this
	// is assumed that block 0 contains a single transaction (i.e., tran 0)
}

var GoCover_2_623534613733643331386633 = struct {
	Count     [15]uint32
	Pos       [3 * 15]uint32
	NumStmt   [15]uint16
} {
	Pos: [3 * 15]uint32{
		18, 25, 0x10003d, // [0]
		28, 29, 0x1a0002, // [1]
		25, 27, 0x30010, // [2]
		34, 35, 0x250048, // [3]
		39, 41, 0x100002, // [4]
		44, 48, 0x100002, // [5]
		51, 51, 0x530002, // [6]
		35, 38, 0x30025, // [7]
		41, 43, 0x30010, // [8]
		48, 50, 0x30010, // [9]
		58, 60, 0x120049, // [10]
		63, 63, 0x150002, // [11]
		60, 62, 0x30012, // [12]
		72, 76, 0x2004a, // [13]
		80, 86, 0x20032, // [14]
	},
	NumStmt: [15]uint16{
		3, // 0
		2, // 1
		1, // 2
		1, // 3
		3, // 4
		4, // 5
		1, // 6
		2, // 7
		1, // 8
		1, // 9
		2, // 10
		1, // 11
		1, // 12
		3, // 13
		1, // 14
	},
}
var _ = _cover_atomic_.LoadUint32
