//line /home/cooper/go/src/github.com/hyperledger/fabric/common/ledger/blockledger/file/factory.go:1
/*
Copyright IBM Corp. 2017 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

                 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package fileledger; import _cover_atomic_ "sync/atomic"

import (
	"sync"

	"github.com/hyperledger/fabric/common/ledger/blkstorage"
	"github.com/hyperledger/fabric/common/ledger/blkstorage/fsblkstorage"
	"github.com/hyperledger/fabric/common/ledger/blockledger"
)

type fileLedgerFactory struct {
	blkstorageProvider blkstorage.BlockStoreProvider
	ledgers            map[string]blockledger.ReadWriter
	mutex              sync.Mutex
}

// GetOrCreate gets an existing ledger (if it exists) or creates it if it does not
func (flf *fileLedgerFactory) GetOrCreate(chainID string) (blockledger.ReadWriter, error) {_cover_atomic_.AddUint32(&GoCover_0_633861303864623437393736.Count[0], 1);
	flf.mutex.Lock()
	defer flf.mutex.Unlock()

	key := chainID
	// check cache
	ledger, ok := flf.ledgers[key]
	if ok {_cover_atomic_.AddUint32(&GoCover_0_633861303864623437393736.Count[3], 1);
		return ledger, nil
	}
	// open fresh
	_cover_atomic_.AddUint32(&GoCover_0_633861303864623437393736.Count[1], 1);blockStore, err := flf.blkstorageProvider.OpenBlockStore(key)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_633861303864623437393736.Count[4], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_633861303864623437393736.Count[2], 1);ledger = NewFileLedger(blockStore)
	flf.ledgers[key] = ledger
	return ledger, nil
}

// ChainIDs returns the chain IDs the factory is aware of
func (flf *fileLedgerFactory) ChainIDs() []string {_cover_atomic_.AddUint32(&GoCover_0_633861303864623437393736.Count[5], 1);
	chainIDs, err := flf.blkstorageProvider.List()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_633861303864623437393736.Count[7], 1);
		logger.Panic(err)
	}
	_cover_atomic_.AddUint32(&GoCover_0_633861303864623437393736.Count[6], 1);return chainIDs
}

// Close releases all resources acquired by the factory
func (flf *fileLedgerFactory) Close() {_cover_atomic_.AddUint32(&GoCover_0_633861303864623437393736.Count[8], 1);
	flf.blkstorageProvider.Close()
}

// New creates a new ledger factory
func New(directory string) blockledger.Factory {_cover_atomic_.AddUint32(&GoCover_0_633861303864623437393736.Count[9], 1);
	return &fileLedgerFactory{
		blkstorageProvider: fsblkstorage.NewProvider(
			fsblkstorage.NewConf(directory, -1),
			&blkstorage.IndexConfig{
				AttrsToIndex: []blkstorage.IndexableAttr{blkstorage.IndexableAttrBlockNum}},
		),
		ledgers: make(map[string]blockledger.ReadWriter),
	}
}

var GoCover_0_633861303864623437393736 = struct {
	Count     [10]uint32
	Pos       [3 * 10]uint32
	NumStmt   [10]uint16
} {
	Pos: [3 * 10]uint32{
		34, 41, 0x8005b, // [0]
		45, 46, 0x100002, // [1]
		49, 51, 0x140002, // [2]
		41, 43, 0x30008, // [3]
		46, 48, 0x30010, // [4]
		55, 57, 0x100033, // [5]
		60, 60, 0x110002, // [6]
		57, 59, 0x30010, // [7]
		64, 66, 0x20027, // [8]
		69, 78, 0x20030, // [9]
	},
	NumStmt: [10]uint16{
		5, // 0
		2, // 1
		3, // 2
		1, // 3
		1, // 4
		2, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
	},
}
var _ = _cover_atomic_.LoadUint32
