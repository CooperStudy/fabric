//line /home/cooper/go/src/github.com/hyperledger/fabric/core/ledger/kvledger/tests/util.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package tests; import _cover_atomic_ "sync/atomic"

import (
	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/common/cauthdsl"
	configtxtest "github.com/hyperledger/fabric/common/configtx/test"
	"github.com/hyperledger/fabric/common/flogging"
	lutils "github.com/hyperledger/fabric/core/ledger/util"
	"github.com/hyperledger/fabric/protos/common"
	"github.com/hyperledger/fabric/protos/ledger/rwset"
	protopeer "github.com/hyperledger/fabric/protos/peer"
	prototestutils "github.com/hyperledger/fabric/protos/testutils"
	"github.com/hyperledger/fabric/protos/utils"
)

var logger = flogging.MustGetLogger("test2")

// collConf helps writing tests with less verbose code by specifying coll configuration
// in a simple struct in place of 'common.CollectionConfigPackage'. (the test heplers' apis
// use 'collConf' as parameters and return values and transform back and forth to/from proto
// message internally (using func 'convertToCollConfigProtoBytes' and 'convertFromCollConfigProto')
type collConf struct {
	name    string
	btl     uint64
	members []string
}

type txAndPvtdata struct {
	Txid     string
	Envelope *common.Envelope
	Pvtws    *rwset.TxPvtReadWriteSet
}

func convertToCollConfigProtoBytes(collConfs []*collConf) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_5_363234376562373564353161.Count[0], 1);
	var protoConfArray []*common.CollectionConfig
	for _, c := range collConfs {_cover_atomic_.AddUint32(&GoCover_5_363234376562373564353161.Count[2], 1);
		protoConf := &common.CollectionConfig{
			Payload: &common.CollectionConfig_StaticCollectionConfig{
				StaticCollectionConfig: &common.StaticCollectionConfig{
					Name:             c.name,
					BlockToLive:      c.btl,
					MemberOrgsPolicy: convertToMemberOrgsPolicy(c.members),
				},
			},
		}
		protoConfArray = append(protoConfArray, protoConf)
	}
	_cover_atomic_.AddUint32(&GoCover_5_363234376562373564353161.Count[1], 1);return proto.Marshal(&common.CollectionConfigPackage{Config: protoConfArray})
}

func convertToMemberOrgsPolicy(members []string) *common.CollectionPolicyConfig {_cover_atomic_.AddUint32(&GoCover_5_363234376562373564353161.Count[3], 1);
	var data [][]byte
	for _, member := range members {_cover_atomic_.AddUint32(&GoCover_5_363234376562373564353161.Count[5], 1);
		data = append(data, []byte(member))
	}
	_cover_atomic_.AddUint32(&GoCover_5_363234376562373564353161.Count[4], 1);return &common.CollectionPolicyConfig{
		Payload: &common.CollectionPolicyConfig_SignaturePolicy{
			SignaturePolicy: cauthdsl.Envelope(cauthdsl.Or(cauthdsl.SignedBy(0), cauthdsl.SignedBy(1)), data),
		},
	}
}

func convertFromMemberOrgsPolicy(policy *common.CollectionPolicyConfig) []string {_cover_atomic_.AddUint32(&GoCover_5_363234376562373564353161.Count[6], 1);
	ids := policy.GetSignaturePolicy().Identities
	var members []string
	for _, id := range ids {_cover_atomic_.AddUint32(&GoCover_5_363234376562373564353161.Count[8], 1);
		members = append(members, string(id.Principal))
	}
	_cover_atomic_.AddUint32(&GoCover_5_363234376562373564353161.Count[7], 1);return members
}

func convertFromCollConfigProto(collConfPkg *common.CollectionConfigPackage) []*collConf {_cover_atomic_.AddUint32(&GoCover_5_363234376562373564353161.Count[9], 1);
	var collConfs []*collConf
	protoConfArray := collConfPkg.Config
	for _, protoConf := range protoConfArray {_cover_atomic_.AddUint32(&GoCover_5_363234376562373564353161.Count[11], 1);
		p := protoConf.GetStaticCollectionConfig()
		collConfs = append(collConfs,
			&collConf{
				name:    p.Name,
				btl:     p.BlockToLive,
				members: convertFromMemberOrgsPolicy(p.MemberOrgsPolicy),
			},
		)
	}
	_cover_atomic_.AddUint32(&GoCover_5_363234376562373564353161.Count[10], 1);return collConfs
}

func constructTransaction(txid string, simulationResults []byte) (*common.Envelope, error) {_cover_atomic_.AddUint32(&GoCover_5_363234376562373564353161.Count[12], 1);
	channelid := "dummyChannel"
	ccid := &protopeer.ChaincodeID{
		Name:    "dummyCC",
		Version: "dummyVer",
	}
	txenv, _, err := prototestutils.ConstructUnsignedTxEnv(channelid, ccid, &protopeer.Response{Status: 200}, simulationResults, txid, nil, nil)
	return txenv, err
}

func constructTestGenesisBlock(channelid string) (*common.Block, error) {_cover_atomic_.AddUint32(&GoCover_5_363234376562373564353161.Count[13], 1);
	blk, err := configtxtest.MakeGenesisBlock(channelid)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_5_363234376562373564353161.Count[15], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_5_363234376562373564353161.Count[14], 1);setBlockFlagsToValid(blk)
	return blk, nil
}

func setBlockFlagsToValid(block *common.Block) {_cover_atomic_.AddUint32(&GoCover_5_363234376562373564353161.Count[16], 1);
	utils.InitBlockMetadata(block)
	block.Metadata.Metadata[common.BlockMetadataIndex_TRANSACTIONS_FILTER] =
		lutils.NewTxValidationFlagsSetValue(len(block.Data.Data), protopeer.TxValidationCode_VALID)
}

var GoCover_5_363234376562373564353161 = struct {
	Count     [17]uint32
	Pos       [3 * 17]uint32
	NumStmt   [17]uint16
} {
	Pos: [3 * 17]uint32{
		40, 42, 0x1e004b, // [0]
		54, 54, 0x4f0002, // [1]
		42, 53, 0x3001e, // [2]
		57, 59, 0x210051, // [3]
		62, 66, 0x30002, // [4]
		59, 61, 0x30021, // [5]
		69, 72, 0x190052, // [6]
		75, 75, 0x100002, // [7]
		72, 74, 0x30019, // [8]
		78, 81, 0x2b005a, // [9]
		91, 91, 0x120002, // [10]
		81, 90, 0x3002b, // [11]
		94, 102, 0x2005c, // [12]
		104, 106, 0x100049, // [13]
		109, 110, 0x110002, // [14]
		106, 108, 0x30010, // [15]
		113, 117, 0x20030, // [16]
	},
	NumStmt: [17]uint16{
		2, // 0
		1, // 1
		2, // 2
		2, // 3
		1, // 4
		1, // 5
		3, // 6
		1, // 7
		1, // 8
		3, // 9
		1, // 10
		2, // 11
		4, // 12
		2, // 13
		2, // 14
		1, // 15
		2, // 16
	},
}
var _ = _cover_atomic_.LoadUint32
