//line /home/cooper/go/src/github.com/hyperledger/fabric/core/ledger/kvledger/bookkeeping/provider.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package bookkeeping; import _cover_atomic_ "sync/atomic"

import (
	"fmt"

	"github.com/hyperledger/fabric/common/ledger/util/leveldbhelper"
	"github.com/hyperledger/fabric/core/ledger/ledgerconfig"
)

// Category is an enum type for representing the bookkeeping of different type
type Category int

const (
	// PvtdataExpiry repersents the bookkeeping related to expiry of pvtdata because of BTL policy
	PvtdataExpiry Category = iota
	// MetadataPresenceIndicator maintains the bookkeeping about whether metadata is ever set for a namespace
	MetadataPresenceIndicator
)

// Provider provides handle to different bookkeepers for the given ledger
type Provider interface {
	// GetDBHandle returns a db handle that can be used for maintaining the bookkeeping of a given category
	GetDBHandle(ledgerID string, cat Category) *leveldbhelper.DBHandle
	// Close closes the BookkeeperProvider
	Close()
}

type provider struct {
	dbProvider *leveldbhelper.Provider
}

// NewProvider instantiates a new provider
func NewProvider() Provider {_cover_atomic_.AddUint32(&GoCover_0_666362626432666563373138.Count[0], 1);
	dbProvider := leveldbhelper.NewProvider(&leveldbhelper.Conf{DBPath: getInternalBookkeeperPath()})
	return &provider{dbProvider: dbProvider}
}

// GetDBHandle implements the function in the interface 'BookkeeperProvider'
func (provider *provider) GetDBHandle(ledgerID string, cat Category) *leveldbhelper.DBHandle {_cover_atomic_.AddUint32(&GoCover_0_666362626432666563373138.Count[1], 1);
	return provider.dbProvider.GetDBHandle(fmt.Sprintf(ledgerID+"/%d", cat))
}

// Close implements the function in the interface 'BookKeeperProvider'
func (provider *provider) Close() {_cover_atomic_.AddUint32(&GoCover_0_666362626432666563373138.Count[2], 1);
	provider.dbProvider.Close()
}

func getInternalBookkeeperPath() string {_cover_atomic_.AddUint32(&GoCover_0_666362626432666563373138.Count[3], 1);
	return ledgerconfig.GetInternalBookkeeperPath()
}

var GoCover_0_666362626432666563373138 = struct {
	Count     [4]uint32
	Pos       [3 * 4]uint32
	NumStmt   [4]uint16
} {
	Pos: [3 * 4]uint32{
		39, 42, 0x2001d, // [0]
		45, 47, 0x2005e, // [1]
		50, 52, 0x20023, // [2]
		54, 56, 0x20029, // [3]
	},
	NumStmt: [4]uint16{
		2, // 0
		1, // 1
		1, // 2
		1, // 3
	},
}
var _ = _cover_atomic_.LoadUint32
