//line /home/cooper/go/src/github.com/hyperledger/fabric/bccsp/idemix/bridge/signaturescheme.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/
package bridge; import _cover_atomic_ "sync/atomic"

import (
	"crypto/ecdsa"

	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric-amcl/amcl"
	"github.com/hyperledger/fabric-amcl/amcl/FP256BN"
	"github.com/hyperledger/fabric/bccsp"
	"github.com/hyperledger/fabric/bccsp/idemix/handlers"
	cryptolib "github.com/hyperledger/fabric/idemix"
	"github.com/pkg/errors"
)

// SignatureScheme encapsulates the idemix algorithms to sign and verify using an idemix credential.
type SignatureScheme struct {
	NewRand func() *amcl.RAND
}

// Sign produces an idemix-signature with the respect to the passed serialised credential (cred),
// user secret key (sk), pseudonym public key (Nym) and secret key (RNym), issuer public key (ipk),
// and attributes to be disclosed.
func (s *SignatureScheme) Sign(cred []byte, sk handlers.Big, Nym handlers.Ecp, RNym handlers.Big, ipk handlers.IssuerPublicKey, attributes []bccsp.IdemixAttribute,
	msg []byte, rhIndex int, criRaw []byte) (res []byte, err error) {_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[0], 1);
	defer func() {_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[10], 1);
		if r := recover(); r != nil {_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[11], 1);
			res = nil
			err = errors.Errorf("failure [%s]", r)
		}
	}()

	_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[1], 1);isk, ok := sk.(*Big)
	if !ok {_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[12], 1);
		return nil, errors.Errorf("invalid user secret key, expected *Big, got [%T]", sk)
	}
	_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[2], 1);inym, ok := Nym.(*Ecp)
	if !ok {_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[13], 1);
		return nil, errors.Errorf("invalid nym public key, expected *Ecp, got [%T]", Nym)
	}
	_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[3], 1);irnym, ok := RNym.(*Big)
	if !ok {_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[14], 1);
		return nil, errors.Errorf("invalid nym secret key, expected *Big, got [%T]", RNym)
	}
	_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[4], 1);iipk, ok := ipk.(*IssuerPublicKey)
	if !ok {_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[15], 1);
		return nil, errors.Errorf("invalid issuer public key, expected *IssuerPublicKey, got [%T]", ipk)
	}

	_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[5], 1);credential := &cryptolib.Credential{}
	err = proto.Unmarshal(cred, credential)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[16], 1);
		return nil, errors.Wrap(err, "failed unmarshalling credential")
	}

	_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[6], 1);cri := &cryptolib.CredentialRevocationInformation{}
	err = proto.Unmarshal(criRaw, cri)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[17], 1);
		return nil, errors.Wrap(err, "failed unmarshalling credential revocation information")
	}

	_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[7], 1);disclosure := make([]byte, len(attributes))
	for i := 0; i < len(attributes); i++ {_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[18], 1);
		if attributes[i].Type == bccsp.IdemixHiddenAttribute {_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[19], 1);
			disclosure[i] = 0
		} else{ _cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[20], 1);{
			disclosure[i] = 1
		}}
	}

	_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[8], 1);sig, err := cryptolib.NewSignature(
		credential,
		isk.E,
		inym.E,
		irnym.E,
		iipk.PK,
		disclosure,
		msg,
		rhIndex,
		cri,
		s.NewRand())
	if err != nil {_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[21], 1);
		return nil, errors.WithMessage(err, "failed creating new signature")
	}

	_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[9], 1);return proto.Marshal(sig)
}

// Verify checks that an idemix signature is valid with the respect to the passed issuer public key, digest, attributes,
// revocation index (rhIndex), revocation public key, and epoch.
func (*SignatureScheme) Verify(ipk handlers.IssuerPublicKey, signature, digest []byte, attributes []bccsp.IdemixAttribute, rhIndex int, revocationPublicKey *ecdsa.PublicKey, epoch int) (err error) {_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[22], 1);
	defer func() {_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[28], 1);
		if r := recover(); r != nil {_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[29], 1);
			err = errors.Errorf("failure [%s]", r)
		}
	}()

	_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[23], 1);iipk, ok := ipk.(*IssuerPublicKey)
	if !ok {_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[30], 1);
		return errors.Errorf("invalid issuer public key, expected *IssuerPublicKey, got [%T]", ipk)
	}

	_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[24], 1);sig := &cryptolib.Signature{}
	err = proto.Unmarshal(signature, sig)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[31], 1);
		return err
	}

	_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[25], 1);disclosure := make([]byte, len(attributes))
	attrValues := make([]*FP256BN.BIG, len(attributes))
	for i := 0; i < len(attributes); i++ {_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[32], 1);
		switch attributes[i].Type {
		case bccsp.IdemixHiddenAttribute:_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[33], 1);
			disclosure[i] = 0
			attrValues[i] = nil
		case bccsp.IdemixBytesAttribute:_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[34], 1);
			disclosure[i] = 1
			attrValues[i] = cryptolib.HashModOrder(attributes[i].Value.([]byte))
		case bccsp.IdemixIntAttribute:_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[35], 1);
			disclosure[i] = 1
			attrValues[i] = FP256BN.NewBIGint(attributes[i].Value.(int))
		default:_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[36], 1);
			err = errors.Errorf("attribute type not allowed or supported [%v] at position [%d]", attributes[i].Type, i)
		}
	}
	_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[26], 1);if err != nil {_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[37], 1);
		return
	}

	_cover_atomic_.AddUint32(&GoCover_7_373430303738666139356161.Count[27], 1);return sig.Ver(
		disclosure,
		iipk.PK,
		digest,
		attrValues,
		rhIndex,
		revocationPublicKey,
		epoch)
}

var GoCover_7_373430303738666139356161 = struct {
	Count     [38]uint32
	Pos       [3 * 38]uint32
	NumStmt   [38]uint16
} {
	Pos: [3 * 38]uint32{
		29, 30, 0xf0042, // [0]
		37, 38, 0x90002, // [1]
		41, 42, 0x90002, // [2]
		45, 46, 0x90002, // [3]
		49, 50, 0x90002, // [4]
		54, 56, 0x100002, // [5]
		60, 62, 0x100002, // [6]
		66, 67, 0x270002, // [7]
		75, 86, 0x100002, // [8]
		90, 90, 0x1b0002, // [9]
		30, 31, 0x1f000f, // [10]
		31, 34, 0x4001f, // [11]
		38, 40, 0x30009, // [12]
		42, 44, 0x30009, // [13]
		46, 48, 0x30009, // [14]
		50, 52, 0x30009, // [15]
		56, 58, 0x30010, // [16]
		62, 64, 0x30010, // [17]
		67, 68, 0x380027, // [18]
		68, 70, 0x40038, // [19]
		70, 72, 0x40009, // [20]
		86, 88, 0x30010, // [21]
		95, 96, 0xf00c6, // [22]
		102, 103, 0x90002, // [23]
		107, 109, 0x100002, // [24]
		113, 115, 0x270002, // [25]
		130, 130, 0x100002, // [26]
		134, 141, 0x90002, // [27]
		96, 97, 0x1f000f, // [28]
		97, 99, 0x4001f, // [29]
		103, 105, 0x30009, // [30]
		109, 111, 0x30010, // [31]
		115, 116, 0x1d0027, // [32]
		117, 119, 0x170024, // [33]
		120, 122, 0x480023, // [34]
		123, 125, 0x400021, // [35]
		126, 127, 0x6f000b, // [36]
		130, 132, 0x30010, // [37]
	},
	NumStmt: [38]uint16{
		1, // 0
		2, // 1
		2, // 2
		2, // 3
		2, // 4
		3, // 5
		3, // 6
		2, // 7
		2, // 8
		1, // 9
		1, // 10
		2, // 11
		1, // 12
		1, // 13
		1, // 14
		1, // 15
		1, // 16
		1, // 17
		1, // 18
		1, // 19
		1, // 20
		1, // 21
		1, // 22
		2, // 23
		3, // 24
		3, // 25
		1, // 26
		1, // 27
		1, // 28
		1, // 29
		1, // 30
		1, // 31
		1, // 32
		2, // 33
		2, // 34
		2, // 35
		1, // 36
		1, // 37
	},
}
var _ = _cover_atomic_.LoadUint32
