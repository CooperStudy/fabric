//line /home/cooper/go/src/github.com/hyperledger/fabric/msp/cache/cache.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package cache; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric/common/flogging"
	"github.com/hyperledger/fabric/msp"
	pmsp "github.com/hyperledger/fabric/protos/msp"
	"github.com/pkg/errors"
)

const (
	deserializeIdentityCacheSize = 100
	validateIdentityCacheSize    = 100
	satisfiesPrincipalCacheSize  = 100
)

var mspLogger = flogging.MustGetLogger("msp")

func New(o msp.MSP) (msp.MSP, error) {_cover_atomic_.AddUint32(&GoCover_0_616432613863646637623432.Count[0], 1);
	mspLogger.Debugf("Creating Cache-MSP instance")
	if o == nil {_cover_atomic_.AddUint32(&GoCover_0_616432613863646637623432.Count[2], 1);
		return nil, errors.Errorf("Invalid passed MSP. It must be different from nil.")
	}

	_cover_atomic_.AddUint32(&GoCover_0_616432613863646637623432.Count[1], 1);theMsp := &cachedMSP{MSP: o}
	theMsp.deserializeIdentityCache = newSecondChanceCache(deserializeIdentityCacheSize)
	theMsp.satisfiesPrincipalCache = newSecondChanceCache(satisfiesPrincipalCacheSize)
	theMsp.validateIdentityCache = newSecondChanceCache(validateIdentityCacheSize)

	return theMsp, nil
}

type cachedMSP struct {
	msp.MSP

	// cache for DeserializeIdentity.
	deserializeIdentityCache *secondChanceCache

	// cache for validateIdentity
	validateIdentityCache *secondChanceCache

	// basically a map of principals=>identities=>stringified to booleans
	// specifying whether this identity satisfies this principal
	satisfiesPrincipalCache *secondChanceCache
}

type cachedIdentity struct {
	msp.Identity
	cache *cachedMSP
}

func (id *cachedIdentity) SatisfiesPrincipal(principal *pmsp.MSPPrincipal) error {_cover_atomic_.AddUint32(&GoCover_0_616432613863646637623432.Count[3], 1);
	return id.cache.SatisfiesPrincipal(id.Identity, principal)
}

func (id *cachedIdentity) Validate() error {_cover_atomic_.AddUint32(&GoCover_0_616432613863646637623432.Count[4], 1);
	return id.cache.Validate(id.Identity)
}

func (c *cachedMSP) DeserializeIdentity(serializedIdentity []byte) (msp.Identity, error) {_cover_atomic_.AddUint32(&GoCover_0_616432613863646637623432.Count[5], 1);
	id, ok := c.deserializeIdentityCache.get(string(serializedIdentity))
	if ok {_cover_atomic_.AddUint32(&GoCover_0_616432613863646637623432.Count[8], 1);
		return &cachedIdentity{
			cache:    c,
			Identity: id.(msp.Identity),
		}, nil
	}

	_cover_atomic_.AddUint32(&GoCover_0_616432613863646637623432.Count[6], 1);id, err := c.MSP.DeserializeIdentity(serializedIdentity)
	if err == nil {_cover_atomic_.AddUint32(&GoCover_0_616432613863646637623432.Count[9], 1);
		c.deserializeIdentityCache.add(string(serializedIdentity), id)
		return &cachedIdentity{
			cache:    c,
			Identity: id.(msp.Identity),
		}, nil
	}
	_cover_atomic_.AddUint32(&GoCover_0_616432613863646637623432.Count[7], 1);return nil, err
}

func (c *cachedMSP) Setup(config *pmsp.MSPConfig) error {_cover_atomic_.AddUint32(&GoCover_0_616432613863646637623432.Count[10], 1);
	c.cleanCash()

	return c.MSP.Setup(config)
}

func (c *cachedMSP) Validate(id msp.Identity) error {_cover_atomic_.AddUint32(&GoCover_0_616432613863646637623432.Count[11], 1);
	identifier := id.GetIdentifier()
	key := string(identifier.Mspid + ":" + identifier.Id)

	_, ok := c.validateIdentityCache.get(key)
	if ok {_cover_atomic_.AddUint32(&GoCover_0_616432613863646637623432.Count[14], 1);
		// cache only stores if the identity is valid.
		return nil
	}

	_cover_atomic_.AddUint32(&GoCover_0_616432613863646637623432.Count[12], 1);err := c.MSP.Validate(id)
	if err == nil {_cover_atomic_.AddUint32(&GoCover_0_616432613863646637623432.Count[15], 1);
		c.validateIdentityCache.add(key, true)
	}

	_cover_atomic_.AddUint32(&GoCover_0_616432613863646637623432.Count[13], 1);return err
}

func (c *cachedMSP) SatisfiesPrincipal(id msp.Identity, principal *pmsp.MSPPrincipal) error {_cover_atomic_.AddUint32(&GoCover_0_616432613863646637623432.Count[16], 1);
	identifier := id.GetIdentifier()
	identityKey := string(identifier.Mspid + ":" + identifier.Id)
	principalKey := string(principal.PrincipalClassification) + string(principal.Principal)
	key := identityKey + principalKey

	v, ok := c.satisfiesPrincipalCache.get(key)
	if ok {_cover_atomic_.AddUint32(&GoCover_0_616432613863646637623432.Count[18], 1);
		if v == nil {_cover_atomic_.AddUint32(&GoCover_0_616432613863646637623432.Count[20], 1);
			return nil
		}

		_cover_atomic_.AddUint32(&GoCover_0_616432613863646637623432.Count[19], 1);return v.(error)
	}

	_cover_atomic_.AddUint32(&GoCover_0_616432613863646637623432.Count[17], 1);err := c.MSP.SatisfiesPrincipal(id, principal)

	c.satisfiesPrincipalCache.add(key, err)
	return err
}

func (c *cachedMSP) cleanCash() error {_cover_atomic_.AddUint32(&GoCover_0_616432613863646637623432.Count[21], 1);
	c.deserializeIdentityCache = newSecondChanceCache(deserializeIdentityCacheSize)
	c.satisfiesPrincipalCache = newSecondChanceCache(satisfiesPrincipalCacheSize)
	c.validateIdentityCache = newSecondChanceCache(validateIdentityCacheSize)

	return nil
}

var GoCover_0_616432613863646637623432 = struct {
	Count     [22]uint32
	Pos       [3 * 22]uint32
	NumStmt   [22]uint16
} {
	Pos: [3 * 22]uint32{
		24, 26, 0xe0026, // [0]
		30, 35, 0x140002, // [1]
		26, 28, 0x3000e, // [2]
		57, 59, 0x20052, // [3]
		61, 63, 0x2002c, // [4]
		65, 67, 0x8005a, // [5]
		74, 75, 0x100002, // [6]
		82, 82, 0x110002, // [7]
		67, 72, 0x30008, // [8]
		75, 81, 0x30010, // [9]
		85, 89, 0x20039, // [10]
		91, 96, 0x80035, // [11]
		101, 102, 0x100002, // [12]
		106, 106, 0xc0002, // [13]
		96, 99, 0x30008, // [14]
		102, 104, 0x30010, // [15]
		109, 116, 0x8005d, // [16]
		124, 127, 0xc0002, // [17]
		116, 117, 0xf0008, // [18]
		121, 121, 0x130003, // [19]
		117, 119, 0x4000f, // [20]
		130, 136, 0x20027, // [21]
	},
	NumStmt: [22]uint16{
		2, // 0
		5, // 1
		1, // 2
		1, // 3
		1, // 4
		2, // 5
		2, // 6
		1, // 7
		1, // 8
		2, // 9
		2, // 10
		4, // 11
		2, // 12
		1, // 13
		1, // 14
		1, // 15
		6, // 16
		3, // 17
		1, // 18
		1, // 19
		1, // 20
		4, // 21
	},
}
var _ = _cover_atomic_.LoadUint32
