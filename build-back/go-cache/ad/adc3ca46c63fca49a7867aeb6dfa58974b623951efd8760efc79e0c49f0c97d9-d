//line /home/cooper/go/src/github.com/hyperledger/fabric/token/server/ledgermanager.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package server; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric/core/peer"
	"github.com/hyperledger/fabric/token/ledger"
	"github.com/pkg/errors"
)

// PeerLedgerManager implements the LedgerManager interface
// by using the peer infrastructure
type PeerLedgerManager struct {
}

func (*PeerLedgerManager) GetLedgerReader(channel string) (ledger.LedgerReader, error) {_cover_atomic_.AddUint32(&GoCover_2_626466633561326138353830.Count[0], 1);
	l := peer.Default.GetLedger(channel)
	if l == nil {_cover_atomic_.AddUint32(&GoCover_2_626466633561326138353830.Count[2], 1);
		return nil, errors.Errorf("ledger not found for channel %s", channel)
	}

	_cover_atomic_.AddUint32(&GoCover_2_626466633561326138353830.Count[1], 1);return l.NewQueryExecutor()
}

var GoCover_2_626466633561326138353830 = struct {
	Count     [3]uint32
	Pos       [3 * 3]uint32
	NumStmt   [3]uint16
} {
	Pos: [3 * 3]uint32{
		20, 22, 0xe0058, // [0]
		26, 26, 0x1d0002, // [1]
		22, 24, 0x3000e, // [2]
	},
	NumStmt: [3]uint16{
		2, // 0
		1, // 1
		1, // 2
	},
}
var _ = _cover_atomic_.LoadUint32
