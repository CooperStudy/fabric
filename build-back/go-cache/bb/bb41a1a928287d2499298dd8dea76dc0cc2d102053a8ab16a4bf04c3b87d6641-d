//line /home/cooper/go/src/github.com/hyperledger/fabric/bccsp/idemix/handlers/signer.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/
package handlers; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric/bccsp"
	"github.com/pkg/errors"
)

type Signer struct {
	SignatureScheme SignatureScheme
}

func (s *Signer) Sign(k bccsp.Key, digest []byte, opts bccsp.SignerOpts) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[0], 1);
	userSecretKey, ok := k.(*userSecretKey)
	if !ok {_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[8], 1);
		return nil, errors.New("invalid key, expected *userSecretKey")
	}

	_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[1], 1);signerOpts, ok := opts.(*bccsp.IdemixSignerOpts)
	if !ok {_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[9], 1);
		return nil, errors.New("invalid options, expected *IdemixSignerOpts")
	}

	// Issuer public key
	_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[2], 1);if signerOpts.IssuerPK == nil {_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[10], 1);
		return nil, errors.New("invalid options, missing issuer public key")
	}
	_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[3], 1);ipk, ok := signerOpts.IssuerPK.(*issuerPublicKey)
	if !ok {_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[11], 1);
		return nil, errors.New("invalid issuer public key, expected *issuerPublicKey")
	}

	// Nym
	_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[4], 1);if signerOpts.Nym == nil {_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[12], 1);
		return nil, errors.New("invalid options, missing nym key")
	}
	_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[5], 1);nymSk, ok := signerOpts.Nym.(*nymSecretKey)
	if !ok {_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[13], 1);
		return nil, errors.New("invalid nym key, expected *nymSecretKey")
	}

	_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[6], 1);sigma, err := s.SignatureScheme.Sign(
		signerOpts.Credential,
		userSecretKey.sk,
		nymSk.pk, nymSk.sk,
		ipk.pk,
		signerOpts.Attributes,
		digest,
		signerOpts.RhIndex,
		signerOpts.CRI,
	)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[14], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[7], 1);return sigma, nil
}

type Verifier struct {
	SignatureScheme SignatureScheme
}

func (v *Verifier) Verify(k bccsp.Key, signature, digest []byte, opts bccsp.SignerOpts) (bool, error) {_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[15], 1);
	issuerPublicKey, ok := k.(*issuerPublicKey)
	if !ok {_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[21], 1);
		return false, errors.New("invalid key, expected *issuerPublicKey")
	}

	_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[16], 1);signerOpts, ok := opts.(*bccsp.IdemixSignerOpts)
	if !ok {_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[22], 1);
		return false, errors.New("invalid options, expected *IdemixSignerOpts")
	}

	_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[17], 1);rpk, ok := signerOpts.RevocationPublicKey.(*revocationPublicKey)
	if !ok {_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[23], 1);
		return false, errors.New("invalid options, expected *revocationPublicKey")
	}

	_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[18], 1);if len(signature) == 0 {_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[24], 1);
		return false, errors.New("invalid signature, it must not be empty")
	}

	_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[19], 1);err := v.SignatureScheme.Verify(
		issuerPublicKey.pk,
		signature,
		digest,
		signerOpts.Attributes,
		signerOpts.RhIndex,
		rpk.pubKey,
		signerOpts.Epoch,
	)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[25], 1);
		return false, err
	}

	_cover_atomic_.AddUint32(&GoCover_6_353738643438356165663564.Count[20], 1);return true, nil
}

var GoCover_6_353738643438356165663564 = struct {
	Count     [26]uint32
	Pos       [3 * 26]uint32
	NumStmt   [26]uint16
} {
	Pos: [3 * 26]uint32{
		17, 19, 0x9005a, // [0]
		23, 24, 0x90002, // [1]
		29, 29, 0x200002, // [2]
		32, 33, 0x90002, // [3]
		38, 38, 0x1b0002, // [4]
		41, 42, 0x90002, // [5]
		46, 56, 0x100002, // [6]
		60, 60, 0x130002, // [7]
		19, 21, 0x30009, // [8]
		24, 26, 0x30009, // [9]
		29, 31, 0x30020, // [10]
		33, 35, 0x30009, // [11]
		38, 40, 0x3001b, // [12]
		42, 44, 0x30009, // [13]
		56, 58, 0x30010, // [14]
		67, 69, 0x90067, // [15]
		73, 74, 0x90002, // [16]
		78, 79, 0x90002, // [17]
		83, 83, 0x190002, // [18]
		87, 96, 0x100002, // [19]
		100, 100, 0x120002, // [20]
		69, 71, 0x30009, // [21]
		74, 76, 0x30009, // [22]
		79, 81, 0x30009, // [23]
		83, 85, 0x30019, // [24]
		96, 98, 0x30010, // [25]
	},
	NumStmt: [26]uint16{
		2, // 0
		2, // 1
		1, // 2
		2, // 3
		1, // 4
		2, // 5
		2, // 6
		1, // 7
		1, // 8
		1, // 9
		1, // 10
		1, // 11
		1, // 12
		1, // 13
		1, // 14
		2, // 15
		2, // 16
		2, // 17
		1, // 18
		2, // 19
		1, // 20
		1, // 21
		1, // 22
		1, // 23
		1, // 24
		1, // 25
	},
}
var _ = _cover_atomic_.LoadUint32
