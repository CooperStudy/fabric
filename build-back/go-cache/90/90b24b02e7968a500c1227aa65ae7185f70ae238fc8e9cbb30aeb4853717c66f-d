//line /home/cooper/go/src/github.com/hyperledger/fabric/bccsp/idemix/bridge/credrequest.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/
package bridge; import _cover_atomic_ "sync/atomic"

import (
	"bytes"

	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric-amcl/amcl"
	"github.com/hyperledger/fabric/bccsp/idemix/handlers"
	cryptolib "github.com/hyperledger/fabric/idemix"
	"github.com/pkg/errors"
)

// CredRequest encapsulates the idemix algorithms to produce (sign) a credential request
// and verify it. Recall that a credential request is produced by a user,
// and it is verified by the issuer at credential creation time.
type CredRequest struct {
	NewRand func() *amcl.RAND
}

// Sign produces an idemix credential request. It takes in input a user secret key and
// an issuer public key.
func (cr *CredRequest) Sign(sk handlers.Big, ipk handlers.IssuerPublicKey, nonce []byte) (res []byte, err error) {_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[0], 1);
	defer func() {_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[5], 1);
		if r := recover(); r != nil {_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[6], 1);
			res = nil
			err = errors.Errorf("failure [%s]", r)
		}
	}()

	_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[1], 1);isk, ok := sk.(*Big)
	if !ok {_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[7], 1);
		return nil, errors.Errorf("invalid user secret key, expected *Big, got [%T]", sk)
	}
	_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[2], 1);iipk, ok := ipk.(*IssuerPublicKey)
	if !ok {_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[8], 1);
		return nil, errors.Errorf("invalid issuer public key, expected *IssuerPublicKey, got [%T]", ipk)
	}
	_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[3], 1);if len(nonce) != cryptolib.FieldBytes {_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[9], 1);
		return nil, errors.Errorf("invalid issuer nonce, expected length %d, got %d", cryptolib.FieldBytes, len(nonce))
	}

	_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[4], 1);rng := cr.NewRand()

	credRequest := cryptolib.NewCredRequest(
		isk.E,
		nonce,
		iipk.PK,
		rng)

	return proto.Marshal(credRequest)
}

// Verify checks that the passed credential request is valid with the respect to the passed
// issuer public key.
func (*CredRequest) Verify(credentialRequest []byte, ipk handlers.IssuerPublicKey, nonce []byte) (err error) {_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[10], 1);
	defer func() {_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[17], 1);
		if r := recover(); r != nil {_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[18], 1);
			err = errors.Errorf("failure [%s]", r)
		}
	}()

	_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[11], 1);credRequest := &cryptolib.CredRequest{}
	err = proto.Unmarshal(credentialRequest, credRequest)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[19], 1);
		return err
	}

	_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[12], 1);iipk, ok := ipk.(*IssuerPublicKey)
	if !ok {_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[20], 1);
		return errors.Errorf("invalid issuer public key, expected *IssuerPublicKey, got [%T]", ipk)
	}

	_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[13], 1);err = credRequest.Check(iipk.PK)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[21], 1);
		return err
	}

	// Nonce checks
	_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[14], 1);if len(nonce) != cryptolib.FieldBytes {_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[22], 1);
		return errors.Errorf("invalid issuer nonce, expected length %d, got %d", cryptolib.FieldBytes, len(nonce))
	}
	_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[15], 1);if !bytes.Equal(nonce, credRequest.IssuerNonce) {_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[23], 1);
		return errors.Errorf("invalid nonce, expected [%v], got [%v]", nonce, credRequest.IssuerNonce)
	}

	_cover_atomic_.AddUint32(&GoCover_1_373430303738666139356161.Count[16], 1);return nil
}

var GoCover_1_373430303738666139356161 = struct {
	Count     [24]uint32
	Pos       [3 * 24]uint32
	NumStmt   [24]uint16
} {
	Pos: [3 * 24]uint32{
		27, 28, 0xf0072, // [0]
		35, 36, 0x90002, // [1]
		39, 40, 0x90002, // [2]
		43, 43, 0x280002, // [3]
		47, 55, 0x230002, // [4]
		28, 29, 0x1f000f, // [5]
		29, 32, 0x4001f, // [6]
		36, 38, 0x30009, // [7]
		40, 42, 0x30009, // [8]
		43, 45, 0x30028, // [9]
		60, 61, 0xf006e, // [10]
		67, 69, 0x100002, // [11]
		73, 74, 0x90002, // [12]
		78, 79, 0x100002, // [13]
		84, 84, 0x280002, // [14]
		87, 87, 0x320002, // [15]
		91, 91, 0xc0002, // [16]
		61, 62, 0x1f000f, // [17]
		62, 64, 0x4001f, // [18]
		69, 71, 0x30010, // [19]
		74, 76, 0x30009, // [20]
		79, 81, 0x30010, // [21]
		84, 86, 0x30028, // [22]
		87, 89, 0x30032, // [23]
	},
	NumStmt: [24]uint16{
		1, // 0
		2, // 1
		2, // 2
		1, // 3
		3, // 4
		1, // 5
		2, // 6
		1, // 7
		1, // 8
		1, // 9
		1, // 10
		3, // 11
		2, // 12
		2, // 13
		1, // 14
		1, // 15
		1, // 16
		1, // 17
		1, // 18
		1, // 19
		1, // 20
		1, // 21
		1, // 22
		1, // 23
	},
}
var _ = _cover_atomic_.LoadUint32
