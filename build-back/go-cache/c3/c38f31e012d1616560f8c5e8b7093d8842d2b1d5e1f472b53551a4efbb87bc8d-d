//line /home/cooper/go/src/github.com/hyperledger/fabric/common/crypto/signer.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package crypto; import _cover_atomic_ "sync/atomic"

import (
	cb "github.com/hyperledger/fabric/protos/common"
)

// LocalSigner is a temporary stub interface which will be implemented by the local MSP
type LocalSigner interface {
	SignatureHeaderMaker
	Signer
}

// Signer signs messages
type Signer interface {
	// Sign a message and return the signature over the digest, or error on failure
	Sign(message []byte) ([]byte, error)
}

// IdentitySerializer serializes identities
type IdentitySerializer interface {
	// Serialize converts an identity to bytes
	Serialize() ([]byte, error)
}

// SignatureHeaderMaker creates a new SignatureHeader
type SignatureHeaderMaker interface {
	// NewSignatureHeader creates a SignatureHeader with the correct signing identity and a valid nonce
	NewSignatureHeader() (*cb.SignatureHeader, error)
}

// SignatureHeaderCreator creates signature headers
type SignatureHeaderCreator struct {
	SignerSupport
}

// SignerSupport implements the needed support for LocalSigner
type SignerSupport interface {
	Signer
	IdentitySerializer
}

// NewSignatureHeaderCreator creates new signature headers
func NewSignatureHeaderCreator(ss SignerSupport) *SignatureHeaderCreator {_cover_atomic_.AddUint32(&GoCover_2_653639303734353666643263.Count[0], 1);
	return &SignatureHeaderCreator{ss}
}

// NewSignatureHeader creates a SignatureHeader with the correct signing identity and a valid nonce
func (bs *SignatureHeaderCreator) NewSignatureHeader() (*cb.SignatureHeader, error) {_cover_atomic_.AddUint32(&GoCover_2_653639303734353666643263.Count[1], 1);
	creator, err := bs.Serialize()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_2_653639303734353666643263.Count[4], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_2_653639303734353666643263.Count[2], 1);nonce, err := GetRandomNonce()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_2_653639303734353666643263.Count[5], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_2_653639303734353666643263.Count[3], 1);return &cb.SignatureHeader{
		Creator: creator,
		Nonce:   nonce,
	}, nil
}

var GoCover_2_653639303734353666643263 = struct {
	Count     [6]uint32
	Pos       [3 * 6]uint32
	NumStmt   [6]uint16
} {
	Pos: [3 * 6]uint32{
		49, 51, 0x2004a, // [0]
		54, 56, 0x100055, // [1]
		59, 60, 0x100002, // [2]
		64, 67, 0x80002, // [3]
		56, 58, 0x30010, // [4]
		60, 62, 0x30010, // [5]
	},
	NumStmt: [6]uint16{
		1, // 0
		2, // 1
		2, // 2
		1, // 3
		1, // 4
		1, // 5
	},
}
var _ = _cover_atomic_.LoadUint32
