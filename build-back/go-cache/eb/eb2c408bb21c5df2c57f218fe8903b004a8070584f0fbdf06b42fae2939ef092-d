//line /home/cooper/go/src/github.com/hyperledger/fabric/core/container/ccintf/ccintf.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package ccintf; import _cover_atomic_ "sync/atomic"

//This package defines the interfaces that support runtime and
//communication between chaincode and peer (chaincode support).
//Currently inproccontroller uses it. dockercontroller does not.

import (
	"fmt"

	pb "github.com/hyperledger/fabric/protos/peer"
)

// ChaincodeStream interface for stream between Peer and chaincode instance.
type ChaincodeStream interface {
	Send(*pb.ChaincodeMessage) error
	Recv() (*pb.ChaincodeMessage, error)
}

// CCSupport must be implemented by the chaincode support side in peer
// (such as chaincode_support)
type CCSupport interface {
	HandleChaincodeStream(ChaincodeStream) error
}

// GetCCHandlerKey is used to pass CCSupport via context
func GetCCHandlerKey() string {_cover_atomic_.AddUint32(&GoCover_0_366264326235633130353161.Count[0], 1);
	return "CCHANDLER"
}

//CCID encapsulates chaincode ID
type CCID struct {
	Name    string
	Version string
}

//GetName returns canonical chaincode name based on the fields of CCID
func (ccid *CCID) GetName() string {_cover_atomic_.AddUint32(&GoCover_0_366264326235633130353161.Count[1], 1);
	if ccid.Version != "" {_cover_atomic_.AddUint32(&GoCover_0_366264326235633130353161.Count[3], 1);
		return fmt.Sprintf("%s-%s", ccid.Name, ccid.Version)
	}
	_cover_atomic_.AddUint32(&GoCover_0_366264326235633130353161.Count[2], 1);return ccid.Name
}

var GoCover_0_366264326235633130353161 = struct {
	Count     [4]uint32
	Pos       [3 * 4]uint32
	NumStmt   [4]uint16
} {
	Pos: [3 * 4]uint32{
		32, 34, 0x2001f, // [0]
		43, 44, 0x180024, // [1]
		47, 47, 0x120002, // [2]
		44, 46, 0x30018, // [3]
	},
	NumStmt: [4]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
	},
}
var _ = _cover_atomic_.LoadUint32
