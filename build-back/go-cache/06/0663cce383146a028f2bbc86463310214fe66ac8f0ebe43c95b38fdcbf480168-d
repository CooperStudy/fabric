//line /home/cooper/go/src/github.com/hyperledger/fabric/core/scc/importsysccs.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package scc; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric/core/common/ccprovider"
)

//DeploySysCCs is the hook for system chaincodes where system chaincodes are registered with the fabric
//note the chaincode must still be deployed and launched like a user chaincode will be
func (p *Provider) DeploySysCCs(chainID string, ccp ccprovider.ChaincodeProvider) {_cover_atomic_.AddUint32(&GoCover_0_613163393733346361646563.Count[0], 1);
	for _, sysCC := range p.SysCCs {_cover_atomic_.AddUint32(&GoCover_0_613163393733346361646563.Count[1], 1);
		deploySysCC(chainID, ccp, sysCC)
	}
}

//DeDeploySysCCs is used in unit tests to stop and remove the system chaincodes before
//restarting them in the same process. This allows clean start of the system
//in the same process
func (p *Provider) DeDeploySysCCs(chainID string, ccp ccprovider.ChaincodeProvider) {_cover_atomic_.AddUint32(&GoCover_0_613163393733346361646563.Count[2], 1);
	for _, sysCC := range p.SysCCs {_cover_atomic_.AddUint32(&GoCover_0_613163393733346361646563.Count[3], 1);
		deDeploySysCC(chainID, ccp, sysCC)
	}
}

var GoCover_0_613163393733346361646563 = struct {
	Count     [4]uint32
	Pos       [3 * 4]uint32
	NumStmt   [4]uint16
} {
	Pos: [3 * 4]uint32{
		15, 16, 0x210053, // [0]
		16, 18, 0x30021, // [1]
		24, 25, 0x210055, // [2]
		25, 27, 0x30021, // [3]
	},
	NumStmt: [4]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
	},
}
var _ = _cover_atomic_.LoadUint32
