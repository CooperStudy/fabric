//line /home/cooper/go/src/github.com/hyperledger/fabric/core/chaincode/runtime_launcher.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package chaincode; import _cover_atomic_ "sync/atomic"

import (
	"strconv"
	"time"

	"github.com/hyperledger/fabric/core/common/ccprovider"
	"github.com/hyperledger/fabric/core/container/inproccontroller"
	"github.com/pkg/errors"
)

// LaunchRegistry tracks launching chaincode instances.
type LaunchRegistry interface {
	Launching(cname string) (launchState *LaunchState, started bool)
	Deregister(cname string) error
}

// PackageProvider gets chaincode packages from the filesystem.
type PackageProvider interface {
	GetChaincodeCodePackage(ccname string, ccversion string) ([]byte, error)
}

// RuntimeLauncher is responsible for launching chaincode runtimes.
type RuntimeLauncher struct {
	Runtime         Runtime
	Registry        LaunchRegistry
	PackageProvider PackageProvider
	StartupTimeout  time.Duration
	Metrics         *LaunchMetrics
}

func (r *RuntimeLauncher) Launch(ccci *ccprovider.ChaincodeContainerInfo) error {_cover_atomic_.AddUint32(&GoCover_10_323839383963343337363361.Count[0], 1);
	var startFailCh chan error
	var timeoutCh <-chan time.Time

	startTime := time.Now()
	cname := ccci.Name + ":" + ccci.Version
	launchState, started := r.Registry.Launching(cname)
	if !started {_cover_atomic_.AddUint32(&GoCover_10_323839383963343337363361.Count[4], 1);
		startFailCh = make(chan error, 1)
		timeoutCh = time.NewTimer(r.StartupTimeout).C

		codePackage, err := r.getCodePackage(ccci)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_10_323839383963343337363361.Count[6], 1);
			return err
		}

		_cover_atomic_.AddUint32(&GoCover_10_323839383963343337363361.Count[5], 1);go func() {_cover_atomic_.AddUint32(&GoCover_10_323839383963343337363361.Count[7], 1);
			if err := r.Runtime.Start(ccci, codePackage); err != nil {_cover_atomic_.AddUint32(&GoCover_10_323839383963343337363361.Count[8], 1);
				startFailCh <- errors.WithMessage(err, "error starting container")
			}
		}()
	}

	_cover_atomic_.AddUint32(&GoCover_10_323839383963343337363361.Count[1], 1);var err error
	select {
	case <-launchState.Done():_cover_atomic_.AddUint32(&GoCover_10_323839383963343337363361.Count[9], 1);
		err = errors.WithMessage(launchState.Err(), "chaincode registration failed")
	case err = <-startFailCh:_cover_atomic_.AddUint32(&GoCover_10_323839383963343337363361.Count[10], 1);
		launchState.Notify(err)
		r.Metrics.LaunchFailures.With(
			"chaincode", cname,
		).Add(1)
	case <-timeoutCh:_cover_atomic_.AddUint32(&GoCover_10_323839383963343337363361.Count[11], 1);
		err = errors.Errorf("timeout expired while starting chaincode %s for transaction", cname)
		launchState.Notify(err)
		r.Metrics.LaunchTimeouts.With(
			"chaincode", cname,
		).Add(1)
	}

	_cover_atomic_.AddUint32(&GoCover_10_323839383963343337363361.Count[2], 1);success := true
	if err != nil && !started {_cover_atomic_.AddUint32(&GoCover_10_323839383963343337363361.Count[12], 1);
		success = false
		chaincodeLogger.Debugf("stopping due to error while launching: %+v", err)
		defer r.Registry.Deregister(cname)
		if err := r.Runtime.Stop(ccci); err != nil {_cover_atomic_.AddUint32(&GoCover_10_323839383963343337363361.Count[13], 1);
			chaincodeLogger.Debugf("stop failed: %+v", err)
		}
	}

	_cover_atomic_.AddUint32(&GoCover_10_323839383963343337363361.Count[3], 1);r.Metrics.LaunchDuration.With(
		"chaincode", cname,
		"success", strconv.FormatBool(success),
	).Observe(time.Since(startTime).Seconds())

	chaincodeLogger.Debug("launch complete")
	return err
}

func (r *RuntimeLauncher) getCodePackage(ccci *ccprovider.ChaincodeContainerInfo) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_10_323839383963343337363361.Count[14], 1);
	if ccci.ContainerType == inproccontroller.ContainerType {_cover_atomic_.AddUint32(&GoCover_10_323839383963343337363361.Count[17], 1);
		return nil, nil
	}

	_cover_atomic_.AddUint32(&GoCover_10_323839383963343337363361.Count[15], 1);codePackage, err := r.PackageProvider.GetChaincodeCodePackage(ccci.Name, ccci.Version)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_10_323839383963343337363361.Count[18], 1);
		return nil, errors.Wrap(err, "failed to get chaincode package")
	}

	_cover_atomic_.AddUint32(&GoCover_10_323839383963343337363361.Count[16], 1);return codePackage, nil
}

var GoCover_10_323839383963343337363361 = struct {
	Count     [19]uint32
	Pos       [3 * 19]uint32
	NumStmt   [19]uint16
} {
	Pos: [3 * 19]uint32{
		38, 45, 0xe0051, // [0]
		61, 62, 0x90002, // [1]
		78, 79, 0x1c0002, // [2]
		88, 94, 0xc0002, // [3]
		45, 50, 0x11000e, // [4]
		54, 54, 0xd0003, // [5]
		50, 52, 0x40011, // [6]
		54, 55, 0x3d000d, // [7]
		55, 57, 0x5003d, // [8]
		63, 64, 0x4f001c, // [9]
		65, 69, 0xb001b, // [10]
		70, 75, 0xb0013, // [11]
		79, 83, 0x2e001c, // [12]
		83, 85, 0x4002e, // [13]
		97, 98, 0x3a0063, // [14]
		102, 103, 0x100002, // [15]
		107, 107, 0x190002, // [16]
		98, 100, 0x3003a, // [17]
		103, 105, 0x30010, // [18]
	},
	NumStmt: [19]uint16{
		6, // 0
		2, // 1
		2, // 2
		3, // 3
		4, // 4
		1, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
		2, // 10
		3, // 11
		4, // 12
		1, // 13
		1, // 14
		2, // 15
		1, // 16
		1, // 17
		1, // 18
	},
}
var _ = _cover_atomic_.LoadUint32
