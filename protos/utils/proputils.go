/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package utils

import (
	"encoding/binary"
	"encoding/hex"
	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/bccsp"
	"github.com/hyperledger/fabric/bccsp/factory"
	"github.com/hyperledger/fabric/common/crypto"
	"github.com/hyperledger/fabric/common/util"
	"github.com/hyperledger/fabric/core/chaincode/platforms"
	"github.com/hyperledger/fabric/protos/common"
	"github.com/hyperledger/fabric/protos/peer"
	"github.com/pkg/errors"
)
// GetChaincodeInvocationSpec get the ChaincodeInvocationSpec from the proposal
func GetChaincodeInvocationSpec(prop *peer.Proposal) (*peer.ChaincodeInvocationSpec, error) {
	logger.Info("===========GetChaincodeInvocationSpec========")
	if prop == nil {
		return nil, errors.New("proposal is nil")
	}
	_, err := GetHeader(prop.Header)
	if err != nil {
		return nil, err
	}
	ccPropPayload, err := GetChaincodeProposalPayload(prop.Payload)
	if err != nil {
		return nil, err
	}
	cis := &peer.ChaincodeInvocationSpec{}
	err = proto.Unmarshal(ccPropPayload.Input, cis)
	return cis, errors.Wrap(err, "error unmarshaling ChaincodeInvocationSpec")
}

// GetChaincodeProposalContext returns creator and transient
func GetChaincodeProposalContext(prop *peer.Proposal) ([]byte, map[string][]byte, error) {
	logger.Info("===========GetChaincodeProposalContext========")
	if prop == nil {
		return nil, nil, errors.New("proposal is nil")
	}
	if len(prop.Header) == 0 {
		return nil, nil, errors.New("proposal's header is nil")
	}
	if len(prop.Payload) == 0 {
		return nil, nil, errors.New("proposal's payload is nil")
	}
	// get back the header
	hdr, err := GetHeader(prop.Header)
	if err != nil {
		return nil, nil, errors.WithMessage(err, "error extracting header from proposal")
	}
	if hdr == nil {
		return nil, nil, errors.New("unmarshaled header is nil")
	}

	chdr, err := UnmarshalChannelHeader(hdr.ChannelHeader)
	if err != nil {
		return nil, nil, errors.WithMessage(err, "error extracting channel header from proposal")
	}

	if err = validateChannelHeaderType(chdr, []common.HeaderType{common.HeaderType_ENDORSER_TRANSACTION, common.HeaderType_CONFIG}); err != nil {
		return nil, nil, errors.WithMessage(err, "invalid proposal")
	}

	shdr, err := GetSignatureHeader(hdr.SignatureHeader)
	if err != nil {
		return nil, nil, errors.WithMessage(err, "error extracting signature header from proposal")
	}

	ccPropPayload, err := GetChaincodeProposalPayload(prop.Payload)
	if err != nil {
		return nil, nil, err
	}

	return shdr.Creator, ccPropPayload.TransientMap, nil
}

func validateChannelHeaderType(chdr *common.ChannelHeader, expectedTypes []common.HeaderType) error {
	logger.Info("===========validateChannelHeaderType========")
	for _, t := range expectedTypes {
		if common.HeaderType(chdr.Type) == t {
			return nil
		}
	}
	return errors.Errorf("invalid channel header type. expected one of %s, received %s", expectedTypes, common.HeaderType(chdr.Type))
}

// GetHeader Get Header from bytes
func GetHeader(bytes []byte) (*common.Header, error) {
	logger.Info("===========GetHeader========")
	hdr := &common.Header{}
	err := proto.Unmarshal(bytes, hdr)
	return hdr, errors.Wrap(err, "error unmarshaling Header")
}

// GetNonce returns the nonce used in Proposal
func GetNonce(prop *peer.Proposal) ([]byte, error) {
	logger.Info("===========GetNonce========")
	if prop == nil {
		return nil, errors.New("proposal is nil")
	}

	// get back the header
	hdr, err := GetHeader(prop.Header)
	if err != nil {
		return nil, err
	}

	chdr, err := UnmarshalChannelHeader(hdr.ChannelHeader)
	if err != nil {
		return nil, err
	}

	if err = validateChannelHeaderType(chdr, []common.HeaderType{common.HeaderType_ENDORSER_TRANSACTION, common.HeaderType_CONFIG}); err != nil {
		return nil, errors.WithMessage(err, "invalid proposal")
	}

	shdr, err := GetSignatureHeader(hdr.SignatureHeader)
	if err != nil {
		return nil, err
	}

	if hdr.SignatureHeader == nil {
		return nil, errors.New("invalid signature header. cannot be nil")
	}

	return shdr.Nonce, nil
}

// GetChaincodeHeaderExtension get chaincode header extension given header
func GetChaincodeHeaderExtension(hdr *common.Header) (*peer.ChaincodeHeaderExtension, error) {
	logger.Info("===========GetChaincodeHeaderExtension========")
	chdr, err := UnmarshalChannelHeader(hdr.ChannelHeader)
	if err != nil {
		return nil, err
	}

	chaincodeHdrExt := &peer.ChaincodeHeaderExtension{}
	err = proto.Unmarshal(chdr.Extension, chaincodeHdrExt)
	return chaincodeHdrExt, errors.Wrap(err, "error unmarshaling ChaincodeHeaderExtension")
}

// GetProposalResponse given proposal in bytes
func GetProposalResponse(prBytes []byte) (*peer.ProposalResponse, error) {
	logger.Info("===========GetProposalResponse========")
	proposalResponse := &peer.ProposalResponse{}
	err := proto.Unmarshal(prBytes, proposalResponse)
	return proposalResponse, errors.Wrap(err, "error unmarshaling ProposalResponse")
}

// GetChaincodeDeploymentSpec returns a ChaincodeDeploymentSpec given args
func GetChaincodeDeploymentSpec(code []byte, pr *platforms.Registry) (*peer.ChaincodeDeploymentSpec, error) {
	logger.Info("===========GetChaincodeDeploymentSpec========")
	cds := &peer.ChaincodeDeploymentSpec{}
	err := proto.Unmarshal(code, cds)
	if err != nil {
		return nil, errors.Wrap(err, "error unmarshaling ChaincodeDeploymentSpec")
	}

	// FAB-2122: Validate the CDS according to platform specific requirements
	return cds, pr.ValidateDeploymentSpec(cds.CCType(), cds.Bytes())
}

// GetChaincodeAction gets the ChaincodeAction given chaicnode action bytes
func GetChaincodeAction(caBytes []byte) (*peer.ChaincodeAction, error) {
	logger.Info("===========GetChaincodeAction========")
	chaincodeAction := &peer.ChaincodeAction{}
	err := proto.Unmarshal(caBytes, chaincodeAction)
	return chaincodeAction, errors.Wrap(err, "error unmarshaling ChaincodeAction")
}

// GetResponse gets the Response given response bytes
func GetResponse(resBytes []byte) (*peer.Response, error) {
	logger.Info("===========GetResponse========")
	response := &peer.Response{}
	err := proto.Unmarshal(resBytes, response)
	return response, errors.Wrap(err, "error unmarshaling Response")
}

// GetChaincodeEvents gets the ChaincodeEvents given chaincode event bytes
func GetChaincodeEvents(eBytes []byte) (*peer.ChaincodeEvent, error) {
	logger.Info("===========GetChaincodeEvents========")
	chaincodeEvent := &peer.ChaincodeEvent{}
	err := proto.Unmarshal(eBytes, chaincodeEvent)
	return chaincodeEvent, errors.Wrap(err, "error unmarshaling ChaicnodeEvent")
}

// GetProposalResponsePayload gets the proposal response payload
func GetProposalResponsePayload(prpBytes []byte) (*peer.ProposalResponsePayload, error) {
	logger.Info("===========GetProposalResponsePayload========")
	prp := &peer.ProposalResponsePayload{}
	err := proto.Unmarshal(prpBytes, prp)
	return prp, errors.Wrap(err, "error unmarshaling ProposalResponsePayload")
}

// GetProposal returns a Proposal message from its bytes
func GetProposal(propBytes []byte) (*peer.Proposal, error) {
	logger.Info("===========GetProposal========")
	prop := &peer.Proposal{}
	err := proto.Unmarshal(propBytes, prop)
	return prop, errors.Wrap(err, "error unmarshaling Proposal")
}

// GetPayload Get Payload from Envelope message
func GetPayload(e *common.Envelope) (*common.Payload, error) {
	logger.Info("===========GetPayload========")
	payload := &common.Payload{}
	err := proto.Unmarshal(e.Payload, payload)
	return payload, errors.Wrap(err, "error unmarshaling Payload")
}

// GetTransaction Get Transaction from bytes
func GetTransaction(txBytes []byte) (*peer.Transaction, error) {
	logger.Info("===========GetTransaction========")
	tx := &peer.Transaction{}
	err := proto.Unmarshal(txBytes, tx)
	return tx, errors.Wrap(err, "error unmarshaling Transaction")

}

// GetChaincodeActionPayload Get ChaincodeActionPayload from bytes
func GetChaincodeActionPayload(capBytes []byte) (*peer.ChaincodeActionPayload, error) {
	logger.Info("===========GetChaincodeActionPayload========")
	cap := &peer.ChaincodeActionPayload{}
	err := proto.Unmarshal(capBytes, cap)
	return cap, errors.Wrap(err, "error unmarshaling ChaincodeActionPayload")
}

// GetChaincodeProposalPayload Get ChaincodeProposalPayload from bytes
func GetChaincodeProposalPayload(bytes []byte) (*peer.ChaincodeProposalPayload, error) {
	logger.Info("===========GetChaincodeProposalPayload========")
	cpp := &peer.ChaincodeProposalPayload{}
	err := proto.Unmarshal(bytes, cpp)
	return cpp, errors.Wrap(err, "error unmarshaling ChaincodeProposalPayload")
}
var CreatorName string
// GetSignatureHeader Get SignatureHeader from bytes
func GetSignatureHeader(bytes []byte) (*common.SignatureHeader, error) {
	logger.Info("===========GetSignatureHeader========")
	sh := &common.SignatureHeader{}
	err := proto.Unmarshal(bytes, sh)
	return sh, errors.Wrap(err, "error unmarshaling SignatureHeader")
}

// CreateChaincodeProposal creates a proposal from given input.
// It returns the proposal and the transaction id associated to the proposal
func CreateChaincodeProposal(typ common.HeaderType, chainID string, cis *peer.ChaincodeInvocationSpec, creator []byte) (*peer.Proposal, string, error) {
	logger.Info("===========CreateChaincodeProposal========")
	return CreateChaincodeProposalWithTransient(typ, chainID, cis, creator, nil)
}

// CreateChaincodeProposalWithTransient creates a proposal from given input
// It returns the proposal and the transaction id associated to the proposal
func CreateChaincodeProposalWithTransient(typ common.HeaderType, chainID string, cis *peer.ChaincodeInvocationSpec, creator []byte, transientMap map[string][]byte) (*peer.Proposal, string, error) {
	logger.Info("===========CreateChaincodeProposalWithTransient========")
	// generate a random nonce
	nonce, err := crypto.GetRandomNonce()
	if err != nil {
		return nil, "", err
	}

	// compute txid
	txid, err := ComputeTxID(nonce, creator)
	if err != nil {
		return nil, "", err
	}

	return CreateChaincodeProposalWithTxIDNonceAndTransient(txid, typ, chainID, cis, nonce, creator, transientMap)
}

// CreateChaincodeProposalWithTxIDAndTransient creates a proposal from given
// input. It returns the proposal and the transaction id associated with the
// proposal
func CreateChaincodeProposalWithTxIDAndTransient(typ common.HeaderType, chainID string, cis *peer.ChaincodeInvocationSpec, creator []byte, txid string, transientMap map[string][]byte) (*peer.Proposal, string, error) {
	logger.Info("===========CreateChaincodeProposalWithTxIDAndTransient========")
	// generate a random nonce
	nonce, err := crypto.GetRandomNonce()
	if err != nil {
		return nil, "", err
	}

	// compute txid unless provided by tests
	if txid == "" {
		txid, err = ComputeTxID(nonce, creator)
		if err != nil {
			return nil, "", err
		}
	}

	return CreateChaincodeProposalWithTxIDNonceAndTransient(txid, typ, chainID, cis, nonce, creator, transientMap)
}

// CreateChaincodeProposalWithTxIDNonceAndTransient creates a proposal from
// given input
func CreateChaincodeProposalWithTxIDNonceAndTransient(txid string, typ common.HeaderType, chainID string, cis *peer.ChaincodeInvocationSpec, nonce, creator []byte, transientMap map[string][]byte) (*peer.Proposal, string, error) {
	logger.Info("==func CreateChaincodeProposalWithTxIDNonceAndTransient(txid string, typ common.HeaderType, chainID string, cis *peer.ChaincodeInvocationSpec, nonce, creator []byte, transientMap map[string][]byte) (*peer.Proposal, string, error) {==")
	//logger.Info("==创建提案Proposal：join block===")
	//logger.Info("==txid",txid)
	//logger.Info("==HeaderType",typ)
	//logger.Info("==chainID",chainID)//""
	//chaincodeId: name:"cscc"
	//logger.Info("==cis：ChaincodeInvocationSpec",cis.ChaincodeSpec.Type,cis.ChaincodeSpec.ChaincodeId,cis.ChaincodeSpec.Input.Args,cis.ChaincodeSpec.Input.Decorations,cis.ChaincodeSpec.Timeout)
	//logger.Info("=======nonce:",nonce)//[33 129 51 71 105 32 251 100 212 211 113 233 206 122 124 140 223 248 66 139 25 11 74 9]
	//logger.Info("=======creator:",creator)
	//logger.Info("=======transientMap:",transientMap)//map[]

	//logger.Info("==创建提案Proposal：instantiated===")
	//logger.Info("==txid",txid)
	//logger.Info("==HeaderType",typ)
	//logger.Info("==chainID",chainID)//""
	////chaincodeId: name:"cscc"
	//logger.Info("==cis：ChaincodeInvocationSpec",cis.ChaincodeSpec.Type,cis.ChaincodeSpec.ChaincodeId,cis.ChaincodeSpec.Input.Args,cis.ChaincodeSpec.Input.Decorations,cis.ChaincodeSpec.Timeout)
	//logger.Info("=======nonce:",nonce)//[33 129 51 71 105 32 251 100 212 211 113 233 206 122 124 140 223 248 66 139 25 11 74 9]
	//logger.Info("=======creator:",creator)
	//logger.Info("=======transientMap:",transientMap)//map[]


	//logger.Info("==创建提案Proposal：join -b mychannel===")
	//logger.Info("==txid",txid) 333e9ba199a162efcdb8e84615f4468192efaa9defb470676ce631b858c1065a
	//logger.Info("==HeaderType",typ) ==HeaderType CONFIG
	//logger.Info("==chainID",chainID)//"" "
	//==cis：ChaincodeInvocationSpec GOLANG name:"cscc"  [[74 111 105 110 67 104 97 105 110] [10 34 26 32 240 203 79 182 173 141 78 189 249 107 252 5 91 253 75 80 219 43 105 247 2 31 140 53 159 29 199 129 151 122 1 183 18 215 124 10 212 124 10 137 124 10 217 6 10 39 8 1 26 6 8 223 175 197 141 6 34 9 109 121 99 104 97 110 110 101 108 74 7 79 114 103 49 77 83 80 82 7 79 114 103 49 77 83 80 18 173 6 10 144 6 10 10 79 114 100 101 114 101 114 77 83 80 18 129 6 45 45 45 45 45 66 69 71 73 78 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 77 73 73 67 68 68 67 67 65 98 75 103 65 119 73 66 65 103 73 81 79 55 102 53 72 47 71 78 87 108 52 98 67 70 114 97 118 48 109 48 57 84 65 75 66 103 103 113 104 107 106 79 80 81 81 68 65 106 66 112 77 81 115 119 10 67 81 89 68 86 81 81 71 69 119 74 86 85 122 69 84 77 66 69 71 65 49 85 69 67 66 77 75 81 50 70 115 97 87 90 118 99 109 53 112 89 84 69 87 77 66 81 71 65 49 85 69 66 120 77 78 85 50 70 117 73 69 90 121 10 89 87 53 106 97 88 78 106 98 122 69 85 77 66 73 71 65 49 85 69 67 104 77 76 90 88 104 104 98 88 66 115 90 83 53 106 98 50 48 120 70 122 65 86 66 103 78 86 66 65 77 84 68 109 78 104 76 109 86 52 89 87 49 119 10 98 71 85 117 89 50 57 116 77 66 52 88 68 84 73 120 77 84 73 119 77 106 65 51 78 84 65 119 77 70 111 88 68 84 77 120 77 84 69 122 77 68 65 51 78 84 65 119 77 70 111 119 87 68 69 76 77 65 107 71 65 49 85 69 10 66 104 77 67 86 86 77 120 69 122 65 82 66 103 78 86 66 65 103 84 67 107 78 104 98 71 108 109 98 51 74 117 97 87 69 120 70 106 65 85 66 103 78 86 66 65 99 84 68 86 78 104 98 105 66 71 99 109 70 117 89 50 108 122 10 89 50 56 120 72 68 65 97 66 103 78 86 66 65 77 84 69 50 57 121 90 71 86 121 90 88 73 117 90 88 104 104 98 88 66 115 90 83 53 106 98 50 48 119 87 84 65 84 66 103 99 113 104 107 106 79 80 81 73 66 66 103 103 113 10 104 107 106 79 80 81 77 66 66 119 78 67 65 65 81 53 48 111 88 57 74 75 107 89 112 90 103 43 67 75 77 77 72 82 66 82 57 110 87 106 100 79 76 103 68 57 121 72 102 112 105 77 48 49 102 43 76 54 52 98 49 101 69 103 10 66 112 119 122 48 99 105 54 75 73 116 120 118 88 43 106 56 49 81 52 100 82 106 86 48 47 84 119 47 101 83 73 55 102 108 108 111 48 48 119 83 122 65 79 66 103 78 86 72 81 56 66 65 102 56 69 66 65 77 67 66 52 65 119 10 68 65 89 68 86 82 48 84 65 81 72 47 66 65 73 119 65 68 65 114 66 103 78 86 72 83 77 69 74 68 65 105 103 67 65 105 75 85 68 52 52 55 88 50 119 79 68 106 97 118 74 89 122 105 71 72 43 121 103 117 77 110 57 52 10 80 65 50 56 53 65 99 82 114 75 108 120 122 122 65 75 66 103 103 113 104 107 106 79 80 81 81 68 65 103 78 73 65 68 66 70 65 105 69 65 118 66 84 75 104 75 74 49 113 57 43 84 116 111 48 53 102 55 97 48 49 66 48 86 10 51 104 79 82 81 117 105 52 120 114 114 105 122 48 71 53 90 49 77 67 73 68 54 105 52 107 115 108 100 48 78 122 104 114 43 52 53 88 103 90 82 99 77 120 67 43 81 56 83 122 69 112 98 88 87 74 68 84 84 111 43 116 73 108 10 45 45 45 45 45 69 78 68 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 18 24 92 8 124 110 142 83 210 171 177 230 92 18 18 210 92 28 250 173 59 123 154 195 148 60 18 170 117 10 250 99 8 1 18 245 99 18 233 23 10 7 79 114 100 101 114 101 114 18 221 23 18 140 21 10 10 79 114 100 101 114 101 114 79 114 103 18 253 20 26 210 19 10 3 77 83 80 18 202 19 18 191 19 18 188 19 10 10 79 114 100 101 114 101 114 77 83 80 18 199 6 45 45 45 45 45 66 69 71 73 78 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 77 73 73 67 80 106 67 67 65 101 83 103 65 119 73 66 65 103 73 82 65 73 106 119 53 104 103 80 116 65 107 79 53 108 89 67 88 97 69 97 77 76 85 119 67 103 89 73 75 111 90 73 122 106 48 69 65 119 73 119 97 84 69 76 10 77 65 107 71 65 49 85 69 66 104 77 67 86 86 77 120 69 122 65 82 66 103 78 86 66 65 103 84 67 107 78 104 98 71 108 109 98 51 74 117 97 87 69 120 70 106 65 85 66 103 78 86 66 65 99 84 68 86 78 104 98 105 66 71 10 99 109 70 117 89 50 108 122 89 50 56 120 70 68 65 83 66 103 78 86 66 65 111 84 67 50 86 52 89 87 49 119 98 71 85 117 89 50 57 116 77 82 99 119 70 81 89 68 86 81 81 68 69 119 53 106 89 83 53 108 101 71 70 116 10 99 71 120 108 76 109 78 118 98 84 65 101 70 119 48 121 77 84 69 121 77 68 73 119 78 122 85 119 77 68 66 97 70 119 48 122 77 84 69 120 77 122 65 119 78 122 85 119 77 68 66 97 77 71 107 120 67 122 65 74 66 103 78 86 10 66 65 89 84 65 108 86 84 77 82 77 119 69 81 89 68 86 81 81 73 69 119 112 68 89 87 120 112 90 109 57 121 98 109 108 104 77 82 89 119 70 65 89 68 86 81 81 72 69 119 49 84 89 87 52 103 82 110 74 104 98 109 78 112 10 99 50 78 118 77 82 81 119 69 103 89 68 86 81 81 75 69 119 116 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 69 88 77 66 85 71 65 49 85 69 65 120 77 79 89 50 69 117 90 88 104 104 98 88 66 115 90 83 53 106 10 98 50 48 119 87 84 65 84 66 103 99 113 104 107 106 79 80 81 73 66 66 103 103 113 104 107 106 79 80 81 77 66 66 119 78 67 65 65 82 83 110 72 118 73 83 76 77 120 103 83 77 100 116 90 102 43 89 98 121 86 65 89 55 115 10 89 98 119 52 70 83 103 117 82 50 70 90 99 109 73 73 119 103 104 99 70 53 73 76 119 112 76 104 113 76 49 49 84 87 104 114 67 65 70 66 71 122 69 67 112 54 73 107 77 90 98 107 71 112 104 67 105 54 112 108 111 50 48 119 10 97 122 65 79 66 103 78 86 72 81 56 66 65 102 56 69 66 65 77 67 65 97 89 119 72 81 89 68 86 82 48 108 66 66 89 119 70 65 89 73 75 119 89 66 66 81 85 72 65 119 73 71 67 67 115 71 65 81 85 70 66 119 77 66 10 77 65 56 71 65 49 85 100 69 119 69 66 47 119 81 70 77 65 77 66 65 102 56 119 75 81 89 68 86 82 48 79 66 67 73 69 73 67 73 112 81 80 106 106 116 102 98 65 52 79 78 113 56 108 106 79 73 89 102 55 75 67 52 121 10 102 51 103 56 68 98 122 107 66 120 71 115 113 88 72 80 77 65 111 71 67 67 113 71 83 77 52 57 66 65 77 67 65 48 103 65 77 69 85 67 73 81 67 85 72 74 109 49 47 85 116 120 97 109 114 77 99 106 50 89 67 97 50 83 10 121 100 100 110 111 78 116 118 110 74 88 77 86 107 74 107 114 66 100 122 118 65 73 103 75 73 77 106 76 78 117 78 49 110 78 112 73 76 89 73 48 75 57 79 69 77 84 87 53 84 121 57 111 101 53 120 90 105 120 71 87 78 121 53 10 71 82 69 61 10 45 45 45 45 45 69 78 68 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 34 129 6 45 45 45 45 45 66 69 71 73 78 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 77 73 73 67 67 106 67 67 65 98 71 103 65 119 73 66 65 103 73 82 65 80 71 97 52 68 65 108 74 87 122 83 82 48 77 43 103 50 72 108 118 73 103 119 67 103 89 73 75 111 90 73 122 106 48 69 65 119 73 119 97 84 69 76 10 77 65 107 71 65 49 85 69 66 104 77 67 86 86 77 120 69 122 65 82 66 103 78 86 66 65 103 84 67 107 78 104 98 71 108 109 98 51 74 117 97 87 69 120 70 106 65 85 66 103 78 86 66 65 99 84 68 86 78 104 98 105 66 71 10 99 109 70 117 89 50 108 122 89 50 56 120 70 68 65 83 66 103 78 86 66 65 111 84 67 50 86 52 89 87 49 119 98 71 85 117 89 50 57 116 77 82 99 119 70 81 89 68 86 81 81 68 69 119 53 106 89 83 53 108 101 71 70 116 10 99 71 120 108 76 109 78 118 98 84 65 101 70 119 48 121 77 84 69 121 77 68 73 119 78 122 85 119 77 68 66 97 70 119 48 122 77 84 69 120 77 122 65 119 78 122 85 119 77 68 66 97 77 70 89 120 67 122 65 74 66 103 78 86 10 66 65 89 84 65 108 86 84 77 82 77 119 69 81 89 68 86 81 81 73 69 119 112 68 89 87 120 112 90 109 57 121 98 109 108 104 77 82 89 119 70 65 89 68 86 81 81 72 69 119 49 84 89 87 52 103 82 110 74 104 98 109 78 112 10 99 50 78 118 77 82 111 119 71 65 89 68 86 81 81 68 68 66 70 66 90 71 49 112 98 107 66 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 66 90 77 66 77 71 66 121 113 71 83 77 52 57 65 103 69 71 67 67 113 71 10 83 77 52 57 65 119 69 72 65 48 73 65 66 78 116 116 74 86 72 70 103 111 53 106 122 79 102 75 75 114 43 67 90 53 115 119 100 48 113 68 51 83 108 122 113 74 83 121 88 110 80 57 120 120 71 77 75 118 82 68 98 116 117 84 10 90 47 105 68 118 83 82 84 88 72 76 109 110 117 67 84 97 90 108 109 47 106 121 119 89 72 67 43 110 122 87 105 80 99 79 106 84 84 66 76 77 65 52 71 65 49 85 100 68 119 69 66 47 119 81 69 65 119 73 72 103 68 65 77 10 66 103 78 86 72 82 77 66 65 102 56 69 65 106 65 65 77 67 115 71 65 49 85 100 73 119 81 107 77 67 75 65 73 67 73 112 81 80 106 106 116 102 98 65 52 79 78 113 56 108 106 79 73 89 102 55 75 67 52 121 102 51 103 56 10 68 98 122 107 66 120 71 115 113 88 72 80 77 65 111 71 67 67 113 71 83 77 52 57 66 65 77 67 65 48 99 65 77 69 81 67 73 71 79 112 116 120 113 72 75 71 75 56 74 120 56 47 57 101 53 49 118 53 117 82 55 76 114 67 10 100 100 98 106 43 102 78 77 57 43 113 107 66 109 85 108 65 105 65 118 70 109 78 68 111 65 52 104 55 107 77 75 70 100 85 114 90 100 52 107 54 106 109 72 101 118 120 81 116 111 78 52 90 83 97 83 87 87 47 49 117 119 61 61 10 45 45 45 45 45 69 78 68 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 66 14 10 4 83 72 65 50 18 6 83 72 65 50 53 54 74 207 6 45 45 45 45 45 66 69 71 73 78 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 77 73 73 67 82 68 67 67 65 101 113 103 65 119 73 66 65 103 73 82 65 79 102 57 73 73 119 55 76 85 113 48 70 65 71 84 49 104 86 56 52 78 48 119 67 103 89 73 75 111 90 73 122 106 48 69 65 119 73 119 98 68 69 76 10 77 65 107 71 65 49 85 69 66 104 77 67 86 86 77 120 69 122 65 82 66 103 78 86 66 65 103 84 67 107 78 104 98 71 108 109 98 51 74 117 97 87 69 120 70 106 65 85 66 103 78 86 66 65 99 84 68 86 78 104 98 105 66 71 10 99 109 70 117 89 50 108 122 89 50 56 120 70 68 65 83 66 103 78 86 66 65 111 84 67 50 86 52 89 87 49 119 98 71 85 117 89 50 57 116 77 82 111 119 71 65 89 68 86 81 81 68 69 120 70 48 98 72 78 106 89 83 53 108 10 101 71 70 116 99 71 120 108 76 109 78 118 98 84 65 101 70 119 48 121 77 84 69 121 77 68 73 119 78 122 85 119 77 68 66 97 70 119 48 122 77 84 69 120 77 122 65 119 78 122 85 119 77 68 66 97 77 71 119 120 67 122 65 74 10 66 103 78 86 66 65 89 84 65 108 86 84 77 82 77 119 69 81 89 68 86 81 81 73 69 119 112 68 89 87 120 112 90 109 57 121 98 109 108 104 77 82 89 119 70 65 89 68 86 81 81 72 69 119 49 84 89 87 52 103 82 110 74 104 10 98 109 78 112 99 50 78 118 77 82 81 119 69 103 89 68 86 81 81 75 69 119 116 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 69 97 77 66 103 71 65 49 85 69 65 120 77 82 100 71 120 122 89 50 69 117 90 88 104 104 10 98 88 66 115 90 83 53 106 98 50 48 119 87 84 65 84 66 103 99 113 104 107 106 79 80 81 73 66 66 103 103 113 104 107 106 79 80 81 77 66 66 119 78 67 65 65 82 90 56 87 84 117 57 65 111 88 66 100 118 84 55 66 89 76 10 50 112 118 73 86 122 115 68 82 51 118 109 115 84 53 117 56 57 109 106 67 116 86 100 98 56 56 114 53 107 117 112 71 74 110 79 79 71 102 90 81 105 115 50 112 122 114 70 52 119 74 48 111 49 56 89 116 57 102 100 106 122 120 90 10 73 67 115 86 111 50 48 119 97 122 65 79 66 103 78 86 72 81 56 66 65 102 56 69 66 65 77 67 65 97 89 119 72 81 89 68 86 82 48 108 66 66 89 119 70 65 89 73 75 119 89 66 66 81 85 72 65 119 73 71 67 67 115 71 10 65 81 85 70 66 119 77 66 77 65 56 71 65 49 85 100 69 119 69 66 47 119 81 70 77 65 77 66 65 102 56 119 75 81 89 68 86 82 48 79 66 67 73 69 73 80 43 85 74 72 102 101 78 102 54 100 66 68 99 51 103 84 87 86 10 82 101 87 121 101 49 99 76 52 49 83 112 114 49 66 107 78 88 56 71 82 79 117 70 77 65 111 71 67 67 113 71 83 77 52 57 66 65 77 67 65 48 103 65 77 69 85 67 73 81 68 83 69 114 51 72 47 121 82 102 89 106 51 50 10 48 110 51 120 79 103 119 84 110 117 104 103 105 105 80 52 67 55 119 51 76 109 87 122 70 57 51 120 115 119 73 103 73 97 97 103 106 75 108 53 98 67 106 85 84 50 71 50 49 47 80 71 118 122 75 76 72 48 43 67 81 120 108 110 10 81 52 105 52 49 112 70 100 100 67 99 61 10 45 45 45 45 45 69 78 68 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 26 6 65 100 109 105 110 115 34 51 10 7 87 114 105 116 101 114 115 18 40 18 30 8 1 18 26 18 8 18 6 8 1 18 2 8 0 26 14 18 12 10 10 79 114 100 101 114 101 114 77 83 80 26 6 65 100 109 105 110 115 34 52 10 6 65 100 109 105 110 115 18 42 18 32 8 1 18 28 18 8 18 6 8 1 18 2 8 0 26 16 18 14 10 10 79 114 100 101 114 101 114 77 83 80 16 1 26 6 65 100 109 105 110 115 34 51 10 7 82 101 97 100 101 114 115 18 40 18 30 8 1 18 26 18 8 18 6 8 1 18 2 8 0 26 14 18 12 10 10 79 114 100 101 114 101 114 77 83 80 26 6 65 100 109 105 110 115 42 6 65 100 109 105 110 115 26 36 10 12 67 97 112 97 98 105 108 105 116 105 101 115 18 20 18 10 10 8 10 4 86 49 95 49 18 0 26 6 65 100 109 105 110 115 26 33 10 13 67 111 110 115 101 110 115 117 115 84 121 112 101 18 16 18 6 10 4 115 111 108 111 26 6 65 100 109 105 110 115 26 34 10 9 66 97 116 99 104 83 105 122 101 18 21 18 11 8 10 16 128 128 192 49 24 128 128 32 26 6 65 100 109 105 110 115 26 30 10 12 66 97 116 99 104 84 105 109 101 111 117 116 18 14 18 4 10 2 50 115 26 6 65 100 109 105 110 115 26 31 10 19 67 104 97 110 110 101 108 82 101 115 116 114 105 99 116 105 111 110 115 18 8 26 6 65 100 109 105 110 115 34 42 10 15 66 108 111 99 107 86 97 108 105 100 97 116 105 111 110 18 23 18 13 8 3 18 9 10 7 87 114 105 116 101 114 115 26 6 65 100 109 105 110 115 34 34 10 7 82 101 97 100 101 114 115 18 23 18 13 8 3 18 9 10 7 82 101 97 100 101 114 115 26 6 65 100 109 105 110 115 34 34 10 7 87 114 105 116 101 114 115 18 23 18 13 8 3 18 9 10 7 87 114 105 116 101 114 115 26 6 65 100 109 105 110 115 34 34 10 6 65 100 109 105 110 115 18 24 18 14 8 3 18 10 10 6 65 100 109 105 110 115 16 2 26 6 65 100 109 105 110 115 42 6 65 100 109 105 110 115 18 158 73 10 11 65 112 112 108 105 99 97 116 105 111 110 18 142 73 8 1 18 240 35 10 7 79 114 103 49 77 83 80 18 228 35 26 133 34 10 3 77 83 80 18 253 33 18 242 33 18 239 33 10 7 79 114 103 49 77 83 80 18 223 6 45 45 45 45 45 66 69 71 73 78 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 77 73 73 67 85 84 67 67 65 102 101 103 65 119 73 66 65 103 73 81 84 68 86 114 107 81 78 49 100 67 49 88 107 113 48 103 78 100 87 109 78 84 65 75 66 103 103 113 104 107 106 79 80 81 81 68 65 106 66 122 77 81 115 119 10 67 81 89 68 86 81 81 71 69 119 74 86 85 122 69 84 77 66 69 71 65 49 85 69 67 66 77 75 81 50 70 115 97 87 90 118 99 109 53 112 89 84 69 87 77 66 81 71 65 49 85 69 66 120 77 78 85 50 70 117 73 69 90 121 10 89 87 53 106 97 88 78 106 98 122 69 90 77 66 99 71 65 49 85 69 67 104 77 81 98 51 74 110 77 83 53 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 69 99 77 66 111 71 65 49 85 69 65 120 77 84 89 50 69 117 10 98 51 74 110 77 83 53 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 65 101 70 119 48 121 77 84 69 121 77 68 73 119 78 122 85 119 77 68 66 97 70 119 48 122 77 84 69 120 77 122 65 119 78 122 85 119 77 68 66 97 10 77 72 77 120 67 122 65 74 66 103 78 86 66 65 89 84 65 108 86 84 77 82 77 119 69 81 89 68 86 81 81 73 69 119 112 68 89 87 120 112 90 109 57 121 98 109 108 104 77 82 89 119 70 65 89 68 86 81 81 72 69 119 49 84 10 89 87 52 103 82 110 74 104 98 109 78 112 99 50 78 118 77 82 107 119 70 119 89 68 86 81 81 75 69 120 66 118 99 109 99 120 76 109 86 52 89 87 49 119 98 71 85 117 89 50 57 116 77 82 119 119 71 103 89 68 86 81 81 68 10 69 120 78 106 89 83 53 118 99 109 99 120 76 109 86 52 89 87 49 119 98 71 85 117 89 50 57 116 77 70 107 119 69 119 89 72 75 111 90 73 122 106 48 67 65 81 89 73 75 111 90 73 122 106 48 68 65 81 99 68 81 103 65 69 10 104 85 49 88 106 54 117 55 111 56 111 51 118 84 112 66 77 120 48 88 103 97 75 67 72 89 73 102 119 87 87 52 106 111 103 117 86 97 110 120 89 55 108 50 70 111 82 115 100 101 77 108 98 83 76 112 73 98 71 79 86 101 113 50 10 114 113 121 53 72 49 67 49 109 43 100 49 108 118 86 53 101 85 106 108 90 97 78 116 77 71 115 119 68 103 89 68 86 82 48 80 65 81 72 47 66 65 81 68 65 103 71 109 77 66 48 71 65 49 85 100 74 81 81 87 77 66 81 71 10 67 67 115 71 65 81 85 70 66 119 77 67 66 103 103 114 66 103 69 70 66 81 99 68 65 84 65 80 66 103 78 86 72 82 77 66 65 102 56 69 66 84 65 68 65 81 72 47 77 67 107 71 65 49 85 100 68 103 81 105 66 67 66 99 10 112 108 100 103 69 73 105 97 65 76 50 76 53 117 47 100 88 84 55 55 84 82 85 70 119 52 99 52 120 118 103 108 51 51 81 48 90 77 85 87 53 106 65 75 66 103 103 113 104 107 106 79 80 81 81 68 65 103 78 73 65 68 66 70 10 65 105 69 65 49 109 111 82 98 116 79 102 55 70 109 75 85 66 116 110 108 98 87 79 101 75 87 49 43 79 117 49 103 69 67 82 98 82 109 107 50 56 117 56 50 113 89 67 73 72 67 108 52 108 105 71 57 49 100 82 107 90 74 86 10 103 72 70 81 104 77 121 70 117 121 110 49 84 66 107 117 89 51 86 100 87 111 84 77 102 110 116 74 10 45 45 45 45 45 69 78 68 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 34 170 6 45 45 45 45 45 66 69 71 73 78 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 77 73 73 67 75 84 67 67 65 100 67 103 65 119 73 66 65 103 73 81 100 111 77 116 88 99 82 109 114 56 88 100 107 104 84 88 71 65 119 70 122 68 65 75 66 103 103 113 104 107 106 79 80 81 81 68 65 106 66 122 77 81 115 119 10 67 81 89 68 86 81 81 71 69 119 74 86 85 122 69 84 77 66 69 71 65 49 85 69 67 66 77 75 81 50 70 115 97 87 90 118 99 109 53 112 89 84 69 87 77 66 81 71 65 49 85 69 66 120 77 78 85 50 70 117 73 69 90 121 10 89 87 53 106 97 88 78 106 98 122 69 90 77 66 99 71 65 49 85 69 67 104 77 81 98 51 74 110 77 83 53 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 69 99 77 66 111 71 65 49 85 69 65 120 77 84 89 50 69 117 10 98 51 74 110 77 83 53 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 65 101 70 119 48 121 77 84 69 121 77 68 73 119 78 122 85 119 77 68 66 97 70 119 48 122 77 84 69 120 77 122 65 119 78 122 85 119 77 68 66 97 10 77 71 119 120 67 122 65 74 66 103 78 86 66 65 89 84 65 108 86 84 77 82 77 119 69 81 89 68 86 81 81 73 69 119 112 68 89 87 120 112 90 109 57 121 98 109 108 104 77 82 89 119 70 65 89 68 86 81 81 72 69 119 49 84 10 89 87 52 103 82 110 74 104 98 109 78 112 99 50 78 118 77 81 56 119 68 81 89 68 86 81 81 76 69 119 90 106 98 71 108 108 98 110 81 120 72 122 65 100 66 103 78 86 66 65 77 77 70 107 70 107 98 87 108 117 81 71 57 121 10 90 122 69 117 90 88 104 104 98 88 66 115 90 83 53 106 98 50 48 119 87 84 65 84 66 103 99 113 104 107 106 79 80 81 73 66 66 103 103 113 104 107 106 79 80 81 77 66 66 119 78 67 65 65 82 52 108 84 79 99 69 119 72 47 10 55 66 65 48 80 74 72 88 120 88 67 81 87 84 118 85 72 113 76 114 119 47 109 49 110 111 105 70 106 71 90 97 55 119 81 87 90 49 78 81 43 65 98 79 74 56 116 121 100 87 83 51 120 117 53 89 86 119 51 75 101 103 102 90 10 97 88 99 81 50 86 77 65 65 89 115 73 111 48 48 119 83 122 65 79 66 103 78 86 72 81 56 66 65 102 56 69 66 65 77 67 66 52 65 119 68 65 89 68 86 82 48 84 65 81 72 47 66 65 73 119 65 68 65 114 66 103 78 86 10 72 83 77 69 74 68 65 105 103 67 66 99 112 108 100 103 69 73 105 97 65 76 50 76 53 117 47 100 88 84 55 55 84 82 85 70 119 52 99 52 120 118 103 108 51 51 81 48 90 77 85 87 53 106 65 75 66 103 103 113 104 107 106 79 10 80 81 81 68 65 103 78 72 65 68 66 69 65 105 66 75 90 65 69 79 111 77 48 48 118 109 84 73 82 48 112 80 55 88 70 66 112 52 49 104 118 86 76 52 80 71 119 73 83 113 105 48 118 52 65 119 84 103 73 103 85 66 53 84 10 54 103 97 86 86 111 103 118 97 85 101 77 109 67 113 108 106 78 71 78 117 112 121 66 106 49 105 89 48 106 120 68 108 118 71 116 101 78 65 61 10 45 45 45 45 45 69 78 68 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 66 14 10 4 83 72 65 50 18 6 83 72 65 50 53 54 74 231 6 45 45 45 45 45 66 69 71 73 78 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 77 73 73 67 86 122 67 67 65 102 54 103 65 119 73 66 65 103 73 82 65 73 114 80 52 120 115 89 66 118 83 79 90 121 122 65 116 120 108 50 103 86 52 119 67 103 89 73 75 111 90 73 122 106 48 69 65 119 73 119 100 106 69 76 10 77 65 107 71 65 49 85 69 66 104 77 67 86 86 77 120 69 122 65 82 66 103 78 86 66 65 103 84 67 107 78 104 98 71 108 109 98 51 74 117 97 87 69 120 70 106 65 85 66 103 78 86 66 65 99 84 68 86 78 104 98 105 66 71 10 99 109 70 117 89 50 108 122 89 50 56 120 71 84 65 88 66 103 78 86 66 65 111 84 69 71 57 121 90 122 69 117 90 88 104 104 98 88 66 115 90 83 53 106 98 50 48 120 72 122 65 100 66 103 78 86 66 65 77 84 70 110 82 115 10 99 50 78 104 76 109 57 121 90 122 69 117 90 88 104 104 98 88 66 115 90 83 53 106 98 50 48 119 72 104 99 78 77 106 69 120 77 106 65 121 77 68 99 49 77 68 65 119 87 104 99 78 77 122 69 120 77 84 77 119 77 68 99 49 10 77 68 65 119 87 106 66 50 77 81 115 119 67 81 89 68 86 81 81 71 69 119 74 86 85 122 69 84 77 66 69 71 65 49 85 69 67 66 77 75 81 50 70 115 97 87 90 118 99 109 53 112 89 84 69 87 77 66 81 71 65 49 85 69 10 66 120 77 78 85 50 70 117 73 69 90 121 89 87 53 106 97 88 78 106 98 122 69 90 77 66 99 71 65 49 85 69 67 104 77 81 98 51 74 110 77 83 53 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 69 102 77 66 48 71 10 65 49 85 69 65 120 77 87 100 71 120 122 89 50 69 117 98 51 74 110 77 83 53 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 66 90 77 66 77 71 66 121 113 71 83 77 52 57 65 103 69 71 67 67 113 71 83 77 52 57 10 65 119 69 72 65 48 73 65 66 67 72 65 71 54 85 108 76 86 110 100 75 67 54 56 79 116 47 109 54 70 90 85 80 53 103 107 105 57 75 116 54 51 48 98 81 99 74 118 81 75 108 76 109 57 97 84 49 110 43 104 49 90 107 113 10 116 69 43 99 120 67 115 55 99 110 107 68 57 107 49 86 109 114 111 121 105 52 122 99 110 86 118 68 52 74 54 106 98 84 66 114 77 65 52 71 65 49 85 100 68 119 69 66 47 119 81 69 65 119 73 66 112 106 65 100 66 103 78 86 10 72 83 85 69 70 106 65 85 66 103 103 114 66 103 69 70 66 81 99 68 65 103 89 73 75 119 89 66 66 81 85 72 65 119 69 119 68 119 89 68 86 82 48 84 65 81 72 47 66 65 85 119 65 119 69 66 47 122 65 112 66 103 78 86 10 72 81 52 69 73 103 81 103 68 114 75 50 99 98 87 43 66 100 87 51 117 113 89 117 83 77 56 81 89 115 67 71 115 118 121 121 70 98 115 107 100 88 104 122 84 66 111 104 73 121 52 119 67 103 89 73 75 111 90 73 122 106 48 69 10 65 119 73 68 82 119 65 119 82 65 73 103 86 84 70 112 97 66 84 113 121 77 120 86 102 68 65 67 106 51 79 73 106 119 73 83 54 102 85 90 66 68 121 108 53 119 57 120 49 105 117 68 47 74 119 67 73 72 81 55 47 65 122 104 10 99 109 117 65 49 70 74 76 79 83 77 106 86 70 67 109 115 47 104 80 103 97 116 71 65 69 78 109 75 111 78 104 121 101 85 86 10 45 45 45 45 45 69 78 68 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 90 218 13 8 1 18 234 6 10 223 6 45 45 45 45 45 66 69 71 73 78 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 77 73 73 67 85 84 67 67 65 102 101 103 65 119 73 66 65 103 73 81 84 68 86 114 107 81 78 49 100 67 49 88 107 113 48 103 78 100 87 109 78 84 65 75 66 103 103 113 104 107 106 79 80 81 81 68 65 106 66 122 77 81 115 119 10 67 81 89 68 86 81 81 71 69 119 74 86 85 122 69 84 77 66 69 71 65 49 85 69 67 66 77 75 81 50 70 115 97 87 90 118 99 109 53 112 89 84 69 87 77 66 81 71 65 49 85 69 66 120 77 78 85 50 70 117 73 69 90 121 10 89 87 53 106 97 88 78 106 98 122 69 90 77 66 99 71 65 49 85 69 67 104 77 81 98 51 74 110 77 83 53 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 69 99 77 66 111 71 65 49 85 69 65 120 77 84 89 50 69 117 10 98 51 74 110 77 83 53 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 65 101 70 119 48 121 77 84 69 121 77 68 73 119 78 122 85 119 77 68 66 97 70 119 48 122 77 84 69 120 77 122 65 119 78 122 85 119 77 68 66 97 10 77 72 77 120 67 122 65 74 66 103 78 86 66 65 89 84 65 108 86 84 77 82 77 119 69 81 89 68 86 81 81 73 69 119 112 68 89 87 120 112 90 109 57 121 98 109 108 104 77 82 89 119 70 65 89 68 86 81 81 72 69 119 49 84 10 89 87 52 103 82 110 74 104 98 109 78 112 99 50 78 118 77 82 107 119 70 119 89 68 86 81 81 75 69 120 66 118 99 109 99 120 76 109 86 52 89 87 49 119 98 71 85 117 89 50 57 116 77 82 119 119 71 103 89 68 86 81 81 68 10 69 120 78 106 89 83 53 118 99 109 99 120 76 109 86 52 89 87 49 119 98 71 85 117 89 50 57 116 77 70 107 119 69 119 89 72 75 111 90 73 122 106 48 67 65 81 89 73 75 111 90 73 122 106 48 68 65 81 99 68 81 103 65 69 10 104 85 49 88 106 54 117 55 111 56 111 51 118 84 112 66 77 120 48 88 103 97 75 67 72 89 73 102 119 87 87 52 106 111 103 117 86 97 110 120 89 55 108 50 70 111 82 115 100 101 77 108 98 83 76 112 73 98 71 79 86 101 113 50 10 114 113 121 53 72 49 67 49 109 43 100 49 108 118 86 53 101 85 106 108 90 97 78 116 77 71 115 119 68 103 89 68 86 82 48 80 65 81 72 47 66 65 81 68 65 103 71 109 77 66 48 71 65 49 85 100 74 81 81 87 77 66 81 71 10 67 67 115 71 65 81 85 70 66 119 77 67 66 103 103 114 66 103 69 70 66 81 99 68 65 84 65 80 66 103 78 86 72 82 77 66 65 102 56 69 66 84 65 68 65 81 72 47 77 67 107 71 65 49 85 100 68 103 81 105 66 67 66 99 10 112 108 100 103 69 73 105 97 65 76 50 76 53 117 47 100 88 84 55 55 84 82 85 70 119 52 99 52 120 118 103 108 51 51 81 48 90 77 85 87 53 106 65 75 66 103 103 113 104 107 106 79 80 81 81 68 65 103 78 73 65 68 66 70 10 65 105 69 65 49 109 111 82 98 116 79 102 55 70 109 75 85 66 116 110 108 98 87 79 101 75 87 49 43 79 117 49 103 69 67 82 98 82 109 107 50 56 117 56 50 113 89 67 73 72 67 108 52 108 105 71 57 49 100 82 107 90 74 86 10 103 72 70 81 104 77 121 70 117 121 110 49 84 66 107 117 89 51 86 100 87 111 84 77 102 110 116 74 10 45 45 45 45 45 69 78 68 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 18 6 99 108 105 101 110 116 26 232 6 10 223 6 45 45 45 45 45 66 69 71 73 78 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 77 73 73 67 85 84 67 67 65 102 101 103 65 119 73 66 65 103 73 81 84 68 86 114 107 81 78 49 100 67 49 88 107 113 48 103 78 100 87 109 78 84 65 75 66 103 103 113 104 107 106 79 80 81 81 68 65 106 66 122 77 81 115 119 10 67 81 89 68 86 81 81 71 69 119 74 86 85 122 69 84 77 66 69 71 65 49 85 69 67 66 77 75 81 50 70 115 97 87 90 118 99 109 53 112 89 84 69 87 77 66 81 71 65 49 85 69 66 120 77 78 85 50 70 117 73 69 90 121 10 89 87 53 106 97 88 78 106 98 122 69 90 77 66 99 71 65 49 85 69 67 104 77 81 98 51 74 110 77 83 53 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 69 99 77 66 111 71 65 49 85 69 65 120 77 84 89 50 69 117 10 98 51 74 110 77 83 53 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 65 101 70 119 48 121 77 84 69 121 77 68 73 119 78 122 85 119 77 68 66 97 70 119 48 122 77 84 69 120 77 122 65 119 78 122 85 119 77 68 66 97 10 77 72 77 120 67 122 65 74 66 103 78 86 66 65 89 84 65 108 86 84 77 82 77 119 69 81 89 68 86 81 81 73 69 119 112 68 89 87 120 112 90 109 57 121 98 109 108 104 77 82 89 119 70 65 89 68 86 81 81 72 69 119 49 84 10 89 87 52 103 82 110 74 104 98 109 78 112 99 50 78 118 77 82 107 119 70 119 89 68 86 81 81 75 69 120 66 118 99 109 99 120 76 109 86 52 89 87 49 119 98 71 85 117 89 50 57 116 77 82 119 119 71 103 89 68 86 81 81 68 10 69 120 78 106 89 83 53 118 99 109 99 120 76 109 86 52 89 87 49 119 98 71 85 117 89 50 57 116 77 70 107 119 69 119 89 72 75 111 90 73 122 106 48 67 65 81 89 73 75 111 90 73 122 106 48 68 65 81 99 68 81 103 65 69 10 104 85 49 88 106 54 117 55 111 56 111 51 118 84 112 66 77 120 48 88 103 97 75 67 72 89 73 102 119 87 87 52 106 111 103 117 86 97 110 120 89 55 108 50 70 111 82 115 100 101 77 108 98 83 76 112 73 98 71 79 86 101 113 50 10 114 113 121 53 72 49 67 49 109 43 100 49 108 118 86 53 101 85 106 108 90 97 78 116 77 71 115 119 68 103 89 68 86 82 48 80 65 81 72 47 66 65 81 68 65 103 71 109 77 66 48 71 65 49 85 100 74 81 81 87 77 66 81 71 10 67 67 115 71 65 81 85 70 66 119 77 67 66 103 103 114 66 103 69 70 66 81 99 68 65 84 65 80 66 103 78 86 72 82 77 66 65 102 56 69 66 84 65 68 65 81 72 47 77 67 107 71 65 49 85 100 68 103 81 105 66 67 66 99 10 112 108 100 103 69 73 105 97 65 76 50 76 53 117 47 100 88 84 55 55 84 82 85 70 119 52 99 52 120 118 103 108 51 51 81 48 90 77 85 87 53 106 65 75 66 103 103 113 104 107 106 79 80 81 81 68 65 103 78 73 65 68 66 70 10 65 105 69 65 49 109 111 82 98 116 79 102 55 70 109 75 85 66 116 110 108 98 87 79 101 75 87 49 43 79 117 49 103 69 67 82 98 82 109 107 50 56 117 56 50 113 89 67 73 72 67 108 52 108 105 71 57 49 100 82 107 90 74 86 10 103 72 70 81 104 77 121 70 117 121 110 49 84 66 107 117 89 51 86 100 87 111 84 77 102 110 116 74 10 45 45 45 45 45 69 78 68 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 18 4 112 101 101 114 26 6 65 100 109 105 110 115 34 49 10 6 65 100 109 105 110 115 18 39 18 29 8 1 18 25 18 8 18 6 8 1 18 2 8 0 26 13 18 11 10 7 79 114 103 49 77 83 80 16 1 26 6 65 100 109 105 110 115 34 88 10 7 82 101 97 100 101 114 115 18 77 18 67 8 1 18 63 18 16 18 14 8 1 18 2 8 0 18 2 8 1 18 2 8 2 26 13 18 11 10 7 79 114 103 49 77 83 80 16 1 26 13 18 11 10 7 79 114 103 49 77 83 80 16 3 26 13 18 11 10 7 79 114 103 49 77 83 80 16 2 26 6 65 100 109 105 110 115 34 69 10 7 87 114 105 116 101 114 115 18 58 18 48 8 1 18 44 18 12 18 10 8 1 18 2 8 0 18 2 8 1 26 13 18 11 10 7 79 114 103 49 77 83 80 16 1 26 13 18 11 10 7 79 114 103 49 77 83 80 16 2 26 6 65 100 109 105 110 115 42 6 65 100 109 105 110 115 18 252 35 10 7 79 114 103 50 77 83 80 18 240 35 26 145 34 10 3 77 83 80 18 137 34 18 254 33 18 251 33 10 7 79 114 103 50 77 83 80 18 227 6 45 45 45 45 45 66 69 71 73 78 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 77 73 73 67 85 106 67 67 65 102 105 103 65 119 73 66 65 103 73 82 65 73 102 103 111 74 67 48 68 102 55 101 77 86 52 108 113 81 101 109 88 48 107 119 67 103 89 73 75 111 90 73 122 106 48 69 65 119 73 119 99 122 69 76 10 77 65 107 71 65 49 85 69 66 104 77 67 86 86 77 120 69 122 65 82 66 103 78 86 66 65 103 84 67 107 78 104 98 71 108 109 98 51 74 117 97 87 69 120 70 106 65 85 66 103 78 86 66 65 99 84 68 86 78 104 98 105 66 71 10 99 109 70 117 89 50 108 122 89 50 56 120 71 84 65 88 66 103 78 86 66 65 111 84 69 71 57 121 90 122 73 117 90 88 104 104 98 88 66 115 90 83 53 106 98 50 48 120 72 68 65 97 66 103 78 86 66 65 77 84 69 50 78 104 10 76 109 57 121 90 122 73 117 90 88 104 104 98 88 66 115 90 83 53 106 98 50 48 119 72 104 99 78 77 106 69 120 77 106 65 121 77 68 99 49 77 68 65 119 87 104 99 78 77 122 69 120 77 84 77 119 77 68 99 49 77 68 65 119 10 87 106 66 122 77 81 115 119 67 81 89 68 86 81 81 71 69 119 74 86 85 122 69 84 77 66 69 71 65 49 85 69 67 66 77 75 81 50 70 115 97 87 90 118 99 109 53 112 89 84 69 87 77 66 81 71 65 49 85 69 66 120 77 78 10 85 50 70 117 73 69 90 121 89 87 53 106 97 88 78 106 98 122 69 90 77 66 99 71 65 49 85 69 67 104 77 81 98 51 74 110 77 105 53 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 69 99 77 66 111 71 65 49 85 69 10 65 120 77 84 89 50 69 117 98 51 74 110 77 105 53 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 66 90 77 66 77 71 66 121 113 71 83 77 52 57 65 103 69 71 67 67 113 71 83 77 52 57 65 119 69 72 65 48 73 65 10 66 76 65 90 81 69 56 68 99 77 118 82 90 80 108 107 113 121 83 109 83 111 105 116 118 55 76 102 122 54 112 84 56 87 55 81 65 47 47 80 106 75 110 107 56 110 69 113 114 47 121 69 67 107 84 107 70 86 85 86 50 100 70 51 10 77 120 113 120 103 110 101 105 76 110 103 65 100 110 121 86 56 122 57 75 110 71 117 106 98 84 66 114 77 65 52 71 65 49 85 100 68 119 69 66 47 119 81 69 65 119 73 66 112 106 65 100 66 103 78 86 72 83 85 69 70 106 65 85 10 66 103 103 114 66 103 69 70 66 81 99 68 65 103 89 73 75 119 89 66 66 81 85 72 65 119 69 119 68 119 89 68 86 82 48 84 65 81 72 47 66 65 85 119 65 119 69 66 47 122 65 112 66 103 78 86 72 81 52 69 73 103 81 103 10 115 98 78 79 67 116 80 43 98 56 78 88 79 114 81 78 69 90 98 81 56 72 83 117 118 85 118 77 77 77 54 86 80 81 90 79 86 117 65 82 52 119 115 119 67 103 89 73 75 111 90 73 122 106 48 69 65 119 73 68 83 65 65 119 10 82 81 73 104 65 79 66 79 49 72 89 49 87 114 48 73 72 113 110 97 116 109 55 80 105 82 54 83 68 112 102 121 110 53 107 56 54 115 73 86 85 101 100 120 89 74 78 51 65 105 66 108 99 111 109 75 66 121 98 85 101 89 121 86 10 101 68 103 122 105 100 98 89 55 86 115 68 121 110 47 71 105 70 78 71 71 109 69 43 113 121 104 88 56 103 61 61 10 45 45 45 45 45 69 78 68 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 34 170 6 45 45 45 45 45 66 69 71 73 78 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 77 73 73 67 75 106 67 67 65 100 71 103 65 119 73 66 65 103 73 82 65 74 98 111 73 69 114 119 43 73 66 52 54 98 78 70 54 88 98 119 49 70 65 119 67 103 89 73 75 111 90 73 122 106 48 69 65 119 73 119 99 122 69 76 10 77 65 107 71 65 49 85 69 66 104 77 67 86 86 77 120 69 122 65 82 66 103 78 86 66 65 103 84 67 107 78 104 98 71 108 109 98 51 74 117 97 87 69 120 70 106 65 85 66 103 78 86 66 65 99 84 68 86 78 104 98 105 66 71 10 99 109 70 117 89 50 108 122 89 50 56 120 71 84 65 88 66 103 78 86 66 65 111 84 69 71 57 121 90 122 73 117 90 88 104 104 98 88 66 115 90 83 53 106 98 50 48 120 72 68 65 97 66 103 78 86 66 65 77 84 69 50 78 104 10 76 109 57 121 90 122 73 117 90 88 104 104 98 88 66 115 90 83 53 106 98 50 48 119 72 104 99 78 77 106 69 120 77 106 65 121 77 68 99 49 77 68 65 119 87 104 99 78 77 122 69 120 77 84 77 119 77 68 99 49 77 68 65 119 10 87 106 66 115 77 81 115 119 67 81 89 68 86 81 81 71 69 119 74 86 85 122 69 84 77 66 69 71 65 49 85 69 67 66 77 75 81 50 70 115 97 87 90 118 99 109 53 112 89 84 69 87 77 66 81 71 65 49 85 69 66 120 77 78 10 85 50 70 117 73 69 90 121 89 87 53 106 97 88 78 106 98 122 69 80 77 65 48 71 65 49 85 69 67 120 77 71 89 50 120 112 90 87 53 48 77 82 56 119 72 81 89 68 86 81 81 68 68 66 90 66 90 71 49 112 98 107 66 118 10 99 109 99 121 76 109 86 52 89 87 49 119 98 71 85 117 89 50 57 116 77 70 107 119 69 119 89 72 75 111 90 73 122 106 48 67 65 81 89 73 75 111 90 73 122 106 48 68 65 81 99 68 81 103 65 69 122 97 72 103 99 78 52 102 10 112 67 108 117 110 106 102 111 74 105 118 57 83 108 88 49 52 52 112 107 50 112 84 82 86 107 68 86 100 79 120 110 83 101 119 117 48 57 78 83 110 114 48 101 114 49 102 51 82 111 54 86 85 117 83 120 78 116 106 56 116 57 110 101 10 101 121 97 56 66 98 57 116 118 111 99 71 98 97 78 78 77 69 115 119 68 103 89 68 86 82 48 80 65 81 72 47 66 65 81 68 65 103 101 65 77 65 119 71 65 49 85 100 69 119 69 66 47 119 81 67 77 65 65 119 75 119 89 68 10 86 82 48 106 66 67 81 119 73 111 65 103 115 98 78 79 67 116 80 43 98 56 78 88 79 114 81 78 69 90 98 81 56 72 83 117 118 85 118 77 77 77 54 86 80 81 90 79 86 117 65 82 52 119 115 119 67 103 89 73 75 111 90 73 10 122 106 48 69 65 119 73 68 82 119 65 119 82 65 73 103 97 88 115 52 47 109 65 66 117 102 54 87 69 65 102 116 108 75 57 121 106 121 90 43 49 109 100 118 82 107 66 72 113 110 105 52 106 69 121 53 108 83 52 67 73 68 54 87 10 119 68 50 71 79 90 97 105 77 56 50 112 104 84 68 78 82 87 48 72 83 106 103 106 55 114 71 77 80 51 97 87 83 71 53 73 57 65 100 67 10 45 45 45 45 45 69 78 68 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 66 14 10 4 83 72 65 50 18 6 83 72 65 50 53 54 74 231 6 45 45 45 45 45 66 69 71 73 78 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 77 73 73 67 86 106 67 67 65 102 50 103 65 119 73 66 65 103 73 81 85 104 120 90 74 89 122 71 113 122 69 53 110 121 73 84 77 67 57 122 76 106 65 75 66 103 103 113 104 107 106 79 80 81 81 68 65 106 66 50 77 81 115 119 10 67 81 89 68 86 81 81 71 69 119 74 86 85 122 69 84 77 66 69 71 65 49 85 69 67 66 77 75 81 50 70 115 97 87 90 118 99 109 53 112 89 84 69 87 77 66 81 71 65 49 85 69 66 120 77 78 85 50 70 117 73 69 90 121 10 89 87 53 106 97 88 78 106 98 122 69 90 77 66 99 71 65 49 85 69 67 104 77 81 98 51 74 110 77 105 53 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 69 102 77 66 48 71 65 49 85 69 65 120 77 87 100 71 120 122 10 89 50 69 117 98 51 74 110 77 105 53 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 65 101 70 119 48 121 77 84 69 121 77 68 73 119 78 122 85 119 77 68 66 97 70 119 48 122 77 84 69 120 77 122 65 119 78 122 85 119 10 77 68 66 97 77 72 89 120 67 122 65 74 66 103 78 86 66 65 89 84 65 108 86 84 77 82 77 119 69 81 89 68 86 81 81 73 69 119 112 68 89 87 120 112 90 109 57 121 98 109 108 104 77 82 89 119 70 65 89 68 86 81 81 72 10 69 119 49 84 89 87 52 103 82 110 74 104 98 109 78 112 99 50 78 118 77 82 107 119 70 119 89 68 86 81 81 75 69 120 66 118 99 109 99 121 76 109 86 52 89 87 49 119 98 71 85 117 89 50 57 116 77 82 56 119 72 81 89 68 10 86 81 81 68 69 120 90 48 98 72 78 106 89 83 53 118 99 109 99 121 76 109 86 52 89 87 49 119 98 71 85 117 89 50 57 116 77 70 107 119 69 119 89 72 75 111 90 73 122 106 48 67 65 81 89 73 75 111 90 73 122 106 48 68 10 65 81 99 68 81 103 65 69 110 56 117 107 119 70 53 72 52 88 75 65 82 85 99 69 84 43 90 70 71 75 47 99 80 116 54 97 115 71 70 122 86 78 56 102 79 118 82 70 75 87 53 49 109 122 76 83 90 57 81 53 101 56 70 87 10 90 100 108 57 108 119 66 81 51 108 49 98 77 108 79 76 116 114 73 53 97 89 113 74 51 69 51 84 118 113 78 116 77 71 115 119 68 103 89 68 86 82 48 80 65 81 72 47 66 65 81 68 65 103 71 109 77 66 48 71 65 49 85 100 10 74 81 81 87 77 66 81 71 67 67 115 71 65 81 85 70 66 119 77 67 66 103 103 114 66 103 69 70 66 81 99 68 65 84 65 80 66 103 78 86 72 82 77 66 65 102 56 69 66 84 65 68 65 81 72 47 77 67 107 71 65 49 85 100 10 68 103 81 105 66 67 67 109 101 85 100 74 110 50 77 100 84 119 81 97 47 121 111 48 107 122 100 70 78 102 84 104 67 113 108 55 49 122 105 114 43 43 79 81 107 54 80 103 110 68 65 75 66 103 103 113 104 107 106 79 80 81 81 68 10 65 103 78 72 65 68 66 69 65 105 66 113 80 76 102 116 51 102 56 103 121 101 73 117 99 103 120 119 88 88 121 70 80 57 54 121 110 110 56 48 121 69 105 68 43 100 72 56 77 75 53 82 69 119 73 103 77 119 109 52 113 66 103 113 10 79 70 86 80 82 105 110 111 50 68 71 48 43 68 87 49 90 52 84 52 86 111 67 67 119 65 98 89 103 51 57 82 113 70 73 61 10 45 45 45 45 45 69 78 68 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 90 226 13 8 1 18 238 6 10 227 6 45 45 45 45 45 66 69 71 73 78 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 77 73 73 67 85 106 67 67 65 102 105 103 65 119 73 66 65 103 73 82 65 73 102 103 111 74 67 48 68 102 55 101 77 86 52 108 113 81 101 109 88 48 107 119 67 103 89 73 75 111 90 73 122 106 48 69 65 119 73 119 99 122 69 76 10 77 65 107 71 65 49 85 69 66 104 77 67 86 86 77 120 69 122 65 82 66 103 78 86 66 65 103 84 67 107 78 104 98 71 108 109 98 51 74 117 97 87 69 120 70 106 65 85 66 103 78 86 66 65 99 84 68 86 78 104 98 105 66 71 10 99 109 70 117 89 50 108 122 89 50 56 120 71 84 65 88 66 103 78 86 66 65 111 84 69 71 57 121 90 122 73 117 90 88 104 104 98 88 66 115 90 83 53 106 98 50 48 120 72 68 65 97 66 103 78 86 66 65 77 84 69 50 78 104 10 76 109 57 121 90 122 73 117 90 88 104 104 98 88 66 115 90 83 53 106 98 50 48 119 72 104 99 78 77 106 69 120 77 106 65 121 77 68 99 49 77 68 65 119 87 104 99 78 77 122 69 120 77 84 77 119 77 68 99 49 77 68 65 119 10 87 106 66 122 77 81 115 119 67 81 89 68 86 81 81 71 69 119 74 86 85 122 69 84 77 66 69 71 65 49 85 69 67 66 77 75 81 50 70 115 97 87 90 118 99 109 53 112 89 84 69 87 77 66 81 71 65 49 85 69 66 120 77 78 10 85 50 70 117 73 69 90 121 89 87 53 106 97 88 78 106 98 122 69 90 77 66 99 71 65 49 85 69 67 104 77 81 98 51 74 110 77 105 53 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 69 99 77 66 111 71 65 49 85 69 10 65 120 77 84 89 50 69 117 98 51 74 110 77 105 53 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 66 90 77 66 77 71 66 121 113 71 83 77 52 57 65 103 69 71 67 67 113 71 83 77 52 57 65 119 69 72 65 48 73 65 10 66 76 65 90 81 69 56 68 99 77 118 82 90 80 108 107 113 121 83 109 83 111 105 116 118 55 76 102 122 54 112 84 56 87 55 81 65 47 47 80 106 75 110 107 56 110 69 113 114 47 121 69 67 107 84 107 70 86 85 86 50 100 70 51 10 77 120 113 120 103 110 101 105 76 110 103 65 100 110 121 86 56 122 57 75 110 71 117 106 98 84 66 114 77 65 52 71 65 49 85 100 68 119 69 66 47 119 81 69 65 119 73 66 112 106 65 100 66 103 78 86 72 83 85 69 70 106 65 85 10 66 103 103 114 66 103 69 70 66 81 99 68 65 103 89 73 75 119 89 66 66 81 85 72 65 119 69 119 68 119 89 68 86 82 48 84 65 81 72 47 66 65 85 119 65 119 69 66 47 122 65 112 66 103 78 86 72 81 52 69 73 103 81 103 10 115 98 78 79 67 116 80 43 98 56 78 88 79 114 81 78 69 90 98 81 56 72 83 117 118 85 118 77 77 77 54 86 80 81 90 79 86 117 65 82 52 119 115 119 67 103 89 73 75 111 90 73 122 106 48 69 65 119 73 68 83 65 65 119 10 82 81 73 104 65 79 66 79 49 72 89 49 87 114 48 73 72 113 110 97 116 109 55 80 105 82 54 83 68 112 102 121 110 53 107 56 54 115 73 86 85 101 100 120 89 74 78 51 65 105 66 108 99 111 109 75 66 121 98 85 101 89 121 86 10 101 68 103 122 105 100 98 89 55 86 115 68 121 110 47 71 105 70 78 71 71 109 69 43 113 121 104 88 56 103 61 61 10 45 45 45 45 45 69 78 68 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 18 6 99 108 105 101 110 116 26 236 6 10 227 6 45 45 45 45 45 66 69 71 73 78 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 77 73 73 67 85 106 67 67 65 102 105 103 65 119 73 66 65 103 73 82 65 73 102 103 111 74 67 48 68 102 55 101 77 86 52 108 113 81 101 109 88 48 107 119 67 103 89 73 75 111 90 73 122 106 48 69 65 119 73 119 99 122 69 76 10 77 65 107 71 65 49 85 69 66 104 77 67 86 86 77 120 69 122 65 82 66 103 78 86 66 65 103 84 67 107 78 104 98 71 108 109 98 51 74 117 97 87 69 120 70 106 65 85 66 103 78 86 66 65 99 84 68 86 78 104 98 105 66 71 10 99 109 70 117 89 50 108 122 89 50 56 120 71 84 65 88 66 103 78 86 66 65 111 84 69 71 57 121 90 122 73 117 90 88 104 104 98 88 66 115 90 83 53 106 98 50 48 120 72 68 65 97 66 103 78 86 66 65 77 84 69 50 78 104 10 76 109 57 121 90 122 73 117 90 88 104 104 98 88 66 115 90 83 53 106 98 50 48 119 72 104 99 78 77 106 69 120 77 106 65 121 77 68 99 49 77 68 65 119 87 104 99 78 77 122 69 120 77 84 77 119 77 68 99 49 77 68 65 119 10 87 106 66 122 77 81 115 119 67 81 89 68 86 81 81 71 69 119 74 86 85 122 69 84 77 66 69 71 65 49 85 69 67 66 77 75 81 50 70 115 97 87 90 118 99 109 53 112 89 84 69 87 77 66 81 71 65 49 85 69 66 120 77 78 10 85 50 70 117 73 69 90 121 89 87 53 106 97 88 78 106 98 122 69 90 77 66 99 71 65 49 85 69 67 104 77 81 98 51 74 110 77 105 53 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 69 99 77 66 111 71 65 49 85 69 10 65 120 77 84 89 50 69 117 98 51 74 110 77 105 53 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 66 90 77 66 77 71 66 121 113 71 83 77 52 57 65 103 69 71 67 67 113 71 83 77 52 57 65 119 69 72 65 48 73 65 10 66 76 65 90 81 69 56 68 99 77 118 82 90 80 108 107 113 121 83 109 83 111 105 116 118 55 76 102 122 54 112 84 56 87 55 81 65 47 47 80 106 75 110 107 56 110 69 113 114 47 121 69 67 107 84 107 70 86 85 86 50 100 70 51 10 77 120 113 120 103 110 101 105 76 110 103 65 100 110 121 86 56 122 57 75 110 71 117 106 98 84 66 114 77 65 52 71 65 49 85 100 68 119 69 66 47 119 81 69 65 119 73 66 112 106 65 100 66 103 78 86 72 83 85 69 70 106 65 85 10 66 103 103 114 66 103 69 70 66 81 99 68 65 103 89 73 75 119 89 66 66 81 85 72 65 119 69 119 68 119 89 68 86 82 48 84 65 81 72 47 66 65 85 119 65 119 69 66 47 122 65 112 66 103 78 86 72 81 52 69 73 103 81 103 10 115 98 78 79 67 116 80 43 98 56 78 88 79 114 81 78 69 90 98 81 56 72 83 117 118 85 118 77 77 77 54 86 80 81 90 79 86 117 65 82 52 119 115 119 67 103 89 73 75 111 90 73 122 106 48 69 65 119 73 68 83 65 65 119 10 82 81 73 104 65 79 66 79 49 72 89 49 87 114 48 73 72 113 110 97 116 109 55 80 105 82 54 83 68 112 102 121 110 53 107 56 54 115 73 86 85 101 100 120 89 74 78 51 65 105 66 108 99 111 109 75 66 121 98 85 101 89 121 86 10 101 68 103 122 105 100 98 89 55 86 115 68 121 110 47 71 105 70 78 71 71 109 69 43 113 121 104 88 56 103 61 61 10 45 45 45 45 45 69 78 68 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 18 4 112 101 101 114 26 6 65 100 109 105 110 115 34 69 10 7 87 114 105 116 101 114 115 18 58 18 48 8 1 18 44 18 12 18 10 8 1 18 2 8 0 18 2 8 1 26 13 18 11 10 7 79 114 103 50 77 83 80 16 1 26 13 18 11 10 7 79 114 103 50 77 83 80 16 2 26 6 65 100 109 105 110 115 34 49 10 6 65 100 109 105 110 115 18 39 18 29 8 1 18 25 18 8 18 6 8 1 18 2 8 0 26 13 18 11 10 7 79 114 103 50 77 83 80 16 1 26 6 65 100 109 105 110 115 34 88 10 7 82 101 97 100 101 114 115 18 77 18 67 8 1 18 63 18 16 18 14 8 1 18 2 8 0 18 2 8 1 18 2 8 2 26 13 18 11 10 7 79 114 103 50 77 83 80 16 1 26 13 18 11 10 7 79 114 103 50 77 83 80 16 3 26 13 18 11 10 7 79 114 103 50 77 83 80 16 2 26 6 65 100 109 105 110 115 42 6 65 100 109 105 110 115 26 36 10 12 67 97 112 97 98 105 108 105 116 105 101 115 18 20 18 10 10 8 10 4 86 49 95 51 18 0 26 6 65 100 109 105 110 115 34 34 10 6 65 100 109 105 110 115 18 24 18 14 8 3 18 10 10 6 65 100 109 105 110 115 16 2 26 6 65 100 109 105 110 115 34 34 10 7 82 101 97 100 101 114 115 18 23 18 13 8 3 18 9 10 7 82 101 97 100 101 114 115 26 6 65 100 109 105 110 115 34 34 10 7 87 114 105 116 101 114 115 18 23 18 13 8 3 18 9 10 7 87 114 105 116 101 114 115 26 6 65 100 109 105 110 115 42 6 65 100 109 105 110 115 26 73 10 16 79 114 100 101 114 101 114 65 100 100 114 101 115 115 101 115 18 53 18 26 10 24 111 114 100 101 114 101 114 46 101 120 97 109 112 108 101 46 99 111 109 58 55 48 53 48 26 23 47 67 104 97 110 110 101 108 47 79 114 100 101 114 101 114 47 65 100 109 105 110 115 26 36 10 12 67 97 112 97 98 105 108 105 116 105 101 115 18 20 18 10 10 8 10 4 86 49 95 51 18 0 26 6 65 100 109 105 110 115 26 38 10 16 72 97 115 104 105 110 103 65 108 103 111 114 105 116 104 109 18 18 18 8 10 6 83 72 65 50 53 54 26 6 65 100 109 105 110 115 26 45 10 25 66 108 111 99 107 68 97 116 97 72 97 115 104 105 110 103 83 116 114 117 99 116 117 114 101 18 16 18 6 8 255 255 255 255 15 26 6 65 100 109 105 110 115 26 42 10 10 67 111 110 115 111 114 116 105 117 109 18 28 18 18 10 16 83 97 109 112 108 101 67 111 110 115 111 114 116 105 117 109 26 6 65 100 109 105 110 115 34 34 10 6 65 100 109 105 110 115 18 24 18 14 8 3 18 10 10 6 65 100 109 105 110 115 16 2 26 6 65 100 109 105 110 115 34 34 10 7 82 101 97 100 101 114 115 18 23 18 13 8 3 18 9 10 7 82 101 97 100 101 114 115 26 6 65 100 109 105 110 115 34 34 10 7 87 114 105 116 101 114 115 18 23 18 13 8 3 18 9 10 7 87 114 105 116 101 114 115 26 6 65 100 109 105 110 115 42 6 65 100 109 105 110 115 18 170 17 10 223 16 10 252 6 10 36 8 2 26 6 8 223 175 197 141 6 34 9 109 121 99 104 97 110 110 101 108 74 7 79 114 103 49 77 83 80 82 4 49 50 51 52 18 211 6 10 182 6 10 7 79 114 103 49 77 83 80 18 170 6 45 45 45 45 45 66 69 71 73 78 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 77 73 73 67 75 84 67 67 65 100 67 103 65 119 73 66 65 103 73 81 100 111 77 116 88 99 82 109 114 56 88 100 107 104 84 88 71 65 119 70 122 68 65 75 66 103 103 113 104 107 106 79 80 81 81 68 65 106 66 122 77 81 115 119 10 67 81 89 68 86 81 81 71 69 119 74 86 85 122 69 84 77 66 69 71 65 49 85 69 67 66 77 75 81 50 70 115 97 87 90 118 99 109 53 112 89 84 69 87 77 66 81 71 65 49 85 69 66 120 77 78 85 50 70 117 73 69 90 121 10 89 87 53 106 97 88 78 106 98 122 69 90 77 66 99 71 65 49 85 69 67 104 77 81 98 51 74 110 77 83 53 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 69 99 77 66 111 71 65 49 85 69 65 120 77 84 89 50 69 117 10 98 51 74 110 77 83 53 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 65 101 70 119 48 121 77 84 69 121 77 68 73 119 78 122 85 119 77 68 66 97 70 119 48 122 77 84 69 120 77 122 65 119 78 122 85 119 77 68 66 97 10 77 71 119 120 67 122 65 74 66 103 78 86 66 65 89 84 65 108 86 84 77 82 77 119 69 81 89 68 86 81 81 73 69 119 112 68 89 87 120 112 90 109 57 121 98 109 108 104 77 82 89 119 70 65 89 68 86 81 81 72 69 119 49 84 10 89 87 52 103 82 110 74 104 98 109 78 112 99 50 78 118 77 81 56 119 68 81 89 68 86 81 81 76 69 119 90 106 98 71 108 108 98 110 81 120 72 122 65 100 66 103 78 86 66 65 77 77 70 107 70 107 98 87 108 117 81 71 57 121 10 90 122 69 117 90 88 104 104 98 88 66 115 90 83 53 106 98 50 48 119 87 84 65 84 66 103 99 113 104 107 106 79 80 81 73 66 66 103 103 113 104 107 106 79 80 81 77 66 66 119 78 67 65 65 82 52 108 84 79 99 69 119 72 47 10 55 66 65 48 80 74 72 88 120 88 67 81 87 84 118 85 72 113 76 114 119 47 109 49 110 111 105 70 106 71 90 97 55 119 81 87 90 49 78 81 43 65 98 79 74 56 116 121 100 87 83 51 120 117 53 89 86 119 51 75 101 103 102 90 10 97 88 99 81 50 86 77 65 65 89 115 73 111 48 48 119 83 122 65 79 66 103 78 86 72 81 56 66 65 102 56 69 66 65 77 67 66 52 65 119 68 65 89 68 86 82 48 84 65 81 72 47 66 65 73 119 65 68 65 114 66 103 78 86 10 72 83 77 69 74 68 65 105 103 67 66 99 112 108 100 103 69 73 105 97 65 76 50 76 53 117 47 100 88 84 55 55 84 82 85 70 119 52 99 52 120 118 103 108 51 51 81 48 90 77 85 87 53 106 65 75 66 103 103 113 104 107 106 79 10 80 81 81 68 65 103 78 72 65 68 66 69 65 105 66 75 90 65 69 79 111 77 48 48 118 109 84 73 82 48 112 80 55 88 70 66 112 52 49 104 118 86 76 52 80 71 119 73 83 113 105 48 118 52 65 119 84 103 73 103 85 66 53 84 10 54 103 97 86 86 111 103 118 97 85 101 77 109 67 113 108 106 78 71 78 117 112 121 66 106 49 105 89 48 106 120 68 108 118 71 116 101 78 65 61 10 45 45 45 45 45 69 78 68 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 18 24 60 91 157 224 253 14 97 65 98 101 79 14 88 238 254 19 233 226 83 84 241 157 165 244 18 221 9 10 184 2 10 9 109 121 99 104 97 110 110 101 108 18 59 18 41 10 11 65 112 112 108 105 99 97 116 105 111 110 18 26 18 11 10 7 79 114 103 49 77 83 80 18 0 18 11 10 7 79 114 103 50 77 83 80 18 0 26 14 10 10 67 111 110 115 111 114 116 105 117 109 18 0 26 237 1 18 198 1 10 11 65 112 112 108 105 99 97 116 105 111 110 18 182 1 8 1 18 11 10 7 79 114 103 49 77 83 80 18 0 18 11 10 7 79 114 103 50 77 83 80 18 0 26 36 10 12 67 97 112 97 98 105 108 105 116 105 101 115 18 20 18 10 10 8 10 4 86 49 95 51 18 0 26 6 65 100 109 105 110 115 34 34 10 7 82 101 97 100 101 114 115 18 23 18 13 8 3 18 9 10 7 82 101 97 100 101 114 115 26 6 65 100 109 105 110 115 34 34 10 7 87 114 105 116 101 114 115 18 23 18 13 8 3 18 9 10 7 87 114 105 116 101 114 115 26 6 65 100 109 105 110 115 34 34 10 6 65 100 109 105 110 115 18 24 18 14 8 3 18 10 10 6 65 100 109 105 110 115 16 2 26 6 65 100 109 105 110 115 42 6 65 100 109 105 110 115 26 34 10 10 67 111 110 115 111 114 116 105 117 109 18 20 18 18 10 16 83 97 109 112 108 101 67 111 110 115 111 114 116 105 117 109 18 159 7 10 211 6 10 182 6 10 7 79 114 103 49 77 83 80 18 170 6 45 45 45 45 45 66 69 71 73 78 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 77 73 73 67 75 84 67 67 65 100 67 103 65 119 73 66 65 103 73 81 100 111 77 116 88 99 82 109 114 56 88 100 107 104 84 88 71 65 119 70 122 68 65 75 66 103 103 113 104 107 106 79 80 81 81 68 65 106 66 122 77 81 115 119 10 67 81 89 68 86 81 81 71 69 119 74 86 85 122 69 84 77 66 69 71 65 49 85 69 67 66 77 75 81 50 70 115 97 87 90 118 99 109 53 112 89 84 69 87 77 66 81 71 65 49 85 69 66 120 77 78 85 50 70 117 73 69 90 121 10 89 87 53 106 97 88 78 106 98 122 69 90 77 66 99 71 65 49 85 69 67 104 77 81 98 51 74 110 77 83 53 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 69 99 77 66 111 71 65 49 85 69 65 120 77 84 89 50 69 117 10 98 51 74 110 77 83 53 108 101 71 70 116 99 71 120 108 76 109 78 118 98 84 65 101 70 119 48 121 77 84 69 121 77 68 73 119 78 122 85 119 77 68 66 97 70 119 48 122 77 84 69 120 77 122 65 119 78 122 85 119 77 68 66 97 10 77 71 119 120 67 122 65 74 66 103 78 86 66 65 89 84 65 108 86 84 77 82 77 119 69 81 89 68 86 81 81 73 69 119 112 68 89 87 120 112 90 109 57 121 98 109 108 104 77 82 89 119 70 65 89 68 86 81 81 72 69 119 49 84 10 89 87 52 103 82 110 74 104 98 109 78 112 99 50 78 118 77 81 56 119 68 81 89 68 86 81 81 76 69 119 90 106 98 71 108 108 98 110 81 120 72 122 65 100 66 103 78 86 66 65 77 77 70 107 70 107 98 87 108 117 81 71 57 121 10 90 122 69 117 90 88 104 104 98 88 66 115 90 83 53 106 98 50 48 119 87 84 65 84 66 103 99 113 104 107 106 79 80 81 73 66 66 103 103 113 104 107 106 79 80 81 77 66 66 119 78 67 65 65 82 52 108 84 79 99 69 119 72 47 10 55 66 65 48 80 74 72 88 120 88 67 81 87 84 118 85 72 113 76 114 119 47 109 49 110 111 105 70 106 71 90 97 55 119 81 87 90 49 78 81 43 65 98 79 74 56 116 121 100 87 83 51 120 117 53 89 86 119 51 75 101 103 102 90 10 97 88 99 81 50 86 77 65 65 89 115 73 111 48 48 119 83 122 65 79 66 103 78 86 72 81 56 66 65 102 56 69 66 65 77 67 66 52 65 119 68 65 89 68 86 82 48 84 65 81 72 47 66 65 73 119 65 68 65 114 66 103 78 86 10 72 83 77 69 74 68 65 105 103 67 66 99 112 108 100 103 69 73 105 97 65 76 50 76 53 117 47 100 88 84 55 55 84 82 85 70 119 52 99 52 120 118 103 108 51 51 81 48 90 77 85 87 53 106 65 75 66 103 103 113 104 107 106 79 10 80 81 81 68 65 103 78 72 65 68 66 69 65 105 66 75 90 65 69 79 111 77 48 48 118 109 84 73 82 48 112 80 55 88 70 66 112 52 49 104 118 86 76 52 80 71 119 73 83 113 105 48 118 52 65 119 84 103 73 103 85 66 53 84 10 54 103 97 86 86 111 103 118 97 85 101 77 109 67 113 108 106 78 71 78 117 112 121 66 106 49 105 89 48 106 120 68 108 118 71 116 101 78 65 61 10 45 45 45 45 45 69 78 68 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 18 24 195 73 224 128 97 126 159 93 91 95 150 132 35 21 44 58 40 133 96 204 141 34 73 120 18 71 48 69 2 33 0 206 245 195 3 205 74 187 138 148 217 87 161 217 146 72 212 39 98 64 225 122 250 96 13 181 224 167 110 105 81 108 75 2 32 113 130 32 173 210 184 3 13 46 92 18 132 246 179 98 93 216 118 95 174 120 191 47 114 38 168 219 236 143 22 155 1 18 70 48 68 2 32 29 213 127 211 168 156 157 56 129 179 163 169 30 19 165 24 174 194 90 67 32 32 156 65 83 55 238 119 131 60 239 11 2 32 66 39 56 179 27 152 87 169 134 81 68 22 181 63 47 30 41 101 208 132 180 204 42 79 56 169 10 158 218 179 47 155 18 70 48 68 2 32 86 145 206 174 65 98 118 151 253 113 188 177 232 157 30 32 223 222 103 238 181 215 116 5 179 48 128 138 68 93 81 208 2 32 113 209 180 158 220 142 178 227 173 219 55 231 152 202 7 89 210 54 254 62 37 229 74 189 52 142 96 48 209 177 119 183 26 8 10 0 10 0 10 0 10 0]] map[] 0

	ccHdrExt := &peer.ChaincodeHeaderExtension{ChaincodeId: cis.ChaincodeSpec.ChaincodeId}
	ccHdrExtBytes, err := proto.Marshal(ccHdrExt)
	if err != nil {
		return nil, "", errors.Wrap(err, "error marshaling ChaincodeHeaderExtension")
	}

	cisBytes, err := proto.Marshal(cis)
	if err != nil {
		return nil, "", errors.Wrap(err, "error marshaling ChaincodeInvocationSpec")
	}

	ccPropPayload := &peer.ChaincodeProposalPayload{Input: cisBytes, TransientMap: transientMap}
	ccPropPayloadBytes, err := proto.Marshal(ccPropPayload)
	if err != nil {
		return nil, "", errors.Wrap(err, "error marshaling ChaincodeProposalPayload")
	}

	// TODO: epoch is now set to zero. This must be changed once we
	// get a more appropriate mechanism to handle it in.
	var epoch uint64

	timestamp := util.CreateUtcTimestamp()

	hdr := &common.Header{
		ChannelHeader: MarshalOrPanic(
			&common.ChannelHeader{
				Type:      int32(typ),
				TxId:      txid,
				Timestamp: timestamp,
				ChannelId: chainID,
				Extension: ccHdrExtBytes,
				Epoch:     epoch,
			},
		),
		SignatureHeader: MarshalOrPanic(
			&common.SignatureHeader{
				Nonce:   nonce,
				Creator: creator,
			},
		),
	}

	hdrBytes, err := proto.Marshal(hdr)
	if err != nil {
		return nil, "", err
	}

	prop := &peer.Proposal{
		Header:  hdrBytes,
		Payload: ccPropPayloadBytes,
	}
	return prop, txid, nil
}

// GetBytesProposalResponsePayload gets proposal response payload
func GetBytesProposalResponsePayload(hash []byte, response *peer.Response, result []byte, event []byte, ccid *peer.ChaincodeID) ([]byte, error) {
	logger.Info("===========GetBytesProposalResponsePayload========")
	cAct := &peer.ChaincodeAction{
		Events: event, Results: result,
		Response:    response,
		ChaincodeId: ccid,
	}
	cActBytes, err := proto.Marshal(cAct)
	if err != nil {
		return nil, errors.Wrap(err, "error marshaling ChaincodeAction")
	}

	prp := &peer.ProposalResponsePayload{
		Extension:    cActBytes,
		ProposalHash: hash,
	}
	prpBytes, err := proto.Marshal(prp)
	return prpBytes, errors.Wrap(err, "error marshaling ProposalResponsePayload")
}

// GetBytesChaincodeProposalPayload gets the chaincode proposal payload
func GetBytesChaincodeProposalPayload(cpp *peer.ChaincodeProposalPayload) ([]byte, error) {
	logger.Info("===========GetBytesChaincodeProposalPayload========")
	cppBytes, err := proto.Marshal(cpp)
	return cppBytes, errors.Wrap(err, "error marshaling ChaincodeProposalPayload")
}

// GetBytesResponse gets the bytes of Response
func GetBytesResponse(res *peer.Response) ([]byte, error) {
	logger.Info("===========GetBytesResponse========")
	resBytes, err := proto.Marshal(res)
	return resBytes, errors.Wrap(err, "error marshaling Response")
}

// GetBytesChaincodeEvent gets the bytes of ChaincodeEvent
func GetBytesChaincodeEvent(event *peer.ChaincodeEvent) ([]byte, error) {
	logger.Info("===========GetBytesChaincodeEvent========")
	eventBytes, err := proto.Marshal(event)
	return eventBytes, errors.Wrap(err, "error marshaling ChaincodeEvent")
}

// GetBytesChaincodeActionPayload get the bytes of ChaincodeActionPayload from
// the message
func GetBytesChaincodeActionPayload(cap *peer.ChaincodeActionPayload) ([]byte, error) {
	logger.Info("===========GetBytesChaincodeActionPayload========")
	capBytes, err := proto.Marshal(cap)
	return capBytes, errors.Wrap(err, "error marshaling ChaincodeActionPayload")
}

// GetBytesProposalResponse gets proposal bytes response
func GetBytesProposalResponse(pr *peer.ProposalResponse) ([]byte, error) {
	logger.Info("===========GetBytesProposalResponse========")
	respBytes, err := proto.Marshal(pr)
	return respBytes, errors.Wrap(err, "error marshaling ProposalResponse")
}

// GetBytesProposal returns the bytes of a proposal message
func GetBytesProposal(prop *peer.Proposal) ([]byte, error) {
	logger.Info("===========GetBytesProposal========")
	propBytes, err := proto.Marshal(prop)
	return propBytes, errors.Wrap(err, "error marshaling Proposal")
}

// GetBytesHeader get the bytes of Header from the message
func GetBytesHeader(hdr *common.Header) ([]byte, error) {
	logger.Info("===========GetBytesHeader========")
	bytes, err := proto.Marshal(hdr)
	return bytes, errors.Wrap(err, "error marshaling Header")
}

// GetBytesSignatureHeader get the bytes of SignatureHeader from the message
func GetBytesSignatureHeader(hdr *common.SignatureHeader) ([]byte, error) {
	logger.Info("===========GetBytesSignatureHeader========")
	bytes, err := proto.Marshal(hdr)
	return bytes, errors.Wrap(err, "error marshaling SignatureHeader")
}

// GetBytesTransaction get the bytes of Transaction from the message
func GetBytesTransaction(tx *peer.Transaction) ([]byte, error) {
	logger.Info("===========GetBytesTransaction========")
	bytes, err := proto.Marshal(tx)
	return bytes, errors.Wrap(err, "error unmarshaling Transaction")
}

// GetBytesPayload get the bytes of Payload from the message
func GetBytesPayload(payl *common.Payload) ([]byte, error) {
	logger.Info("===========GetBytesPayload========")
	bytes, err := proto.Marshal(payl)
	return bytes, errors.Wrap(err, "error marshaling Payload")
}

// GetBytesEnvelope get the bytes of Envelope from the message
func GetBytesEnvelope(env *common.Envelope) ([]byte, error) {
	logger.Info("===========GetBytesEnvelope========")
	bytes, err := proto.Marshal(env)
	return bytes, errors.Wrap(err, "error marshaling Envelope")
}

// GetActionFromEnvelope extracts a ChaincodeAction message from a
// serialized Envelope
// TODO: fix function name as per FAB-11831
func GetActionFromEnvelope(envBytes []byte) (*peer.ChaincodeAction, error) {
	logger.Info("===========GetActionFromEnvelope========")
	env, err := GetEnvelopeFromBlock(envBytes)
	if err != nil {
		return nil, err
	}
	return GetActionFromEnvelopeMsg(env)
}

func GetActionFromEnvelopeMsg(env *common.Envelope) (*peer.ChaincodeAction, error) {
	logger.Info("===========GetActionFromEnvelopeMsg========")
	payl, err := GetPayload(env)
	if err != nil {
		return nil, err
	}

	tx, err := GetTransaction(payl.Data)
	if err != nil {
		return nil, err
	}

	if len(tx.Actions) == 0 {
		return nil, errors.New("at least one TransactionAction required")
	}

	_, respPayload, err := GetPayloads(tx.Actions[0])
	return respPayload, err
}

// CreateProposalFromCISAndTxid returns a proposal given a serialized identity
// and a ChaincodeInvocationSpec
func CreateProposalFromCISAndTxid(txid string, typ common.HeaderType, chainID string, cis *peer.ChaincodeInvocationSpec, creator []byte) (*peer.Proposal, string, error) {
	logger.Info("===========CreateProposalFromCISAndTxid========")
	nonce, err := crypto.GetRandomNonce()
	if err != nil {
		return nil, "", err
	}
	return CreateChaincodeProposalWithTxIDNonceAndTransient(txid, typ, chainID, cis, nonce, creator, nil)
}

// CreateProposalFromCIS returns a proposal given a serialized identity and a
// ChaincodeInvocationSpec
func CreateProposalFromCIS(typ common.HeaderType, chainID string, cis *peer.ChaincodeInvocationSpec, creator []byte) (*peer.Proposal, string, error) {
	logger.Info("===========CreateProposalFromCIS========")
	return CreateChaincodeProposal(typ, chainID, cis, creator)
}

// CreateGetChaincodesProposal returns a GETCHAINCODES proposal given a
// serialized identity
func CreateGetChaincodesProposal(chainID string, creator []byte) (*peer.Proposal, string, error) {
	logger.Info("===========CreateGetChaincodesProposal========")
	ccinp := &peer.ChaincodeInput{Args: [][]byte{[]byte("getchaincodes")}}
	lsccSpec := &peer.ChaincodeInvocationSpec{
		ChaincodeSpec: &peer.ChaincodeSpec{
			Type:        peer.ChaincodeSpec_GOLANG,
			ChaincodeId: &peer.ChaincodeID{Name: "lscc"},
			Input:       ccinp,
		},
	}
	return CreateProposalFromCIS(common.HeaderType_ENDORSER_TRANSACTION, chainID, lsccSpec, creator)
}

// CreateGetInstalledChaincodesProposal returns a GETINSTALLEDCHAINCODES
// proposal given a serialized identity
func CreateGetInstalledChaincodesProposal(creator []byte) (*peer.Proposal, string, error) {
	logger.Info("===========CreateGetInstalledChaincodesProposal========")
	ccinp := &peer.ChaincodeInput{Args: [][]byte{[]byte("getinstalledchaincodes")}}
	lsccSpec := &peer.ChaincodeInvocationSpec{
		ChaincodeSpec: &peer.ChaincodeSpec{
			Type:        peer.ChaincodeSpec_GOLANG,
			ChaincodeId: &peer.ChaincodeID{Name: "lscc"},
			Input:       ccinp,
		},
	}
	return CreateProposalFromCIS(common.HeaderType_ENDORSER_TRANSACTION, "", lsccSpec, creator)
}

// CreateInstallProposalFromCDS returns a install proposal given a serialized
// identity and a ChaincodeDeploymentSpec
func CreateInstallProposalFromCDS(ccpack proto.Message, creator []byte) (*peer.Proposal, string, error) {
	logger.Info("===========CreateInstallProposalFromCDS========")
	return createProposalFromCDS("", ccpack, creator, "install")
}

// CreateDeployProposalFromCDS returns a deploy proposal given a serialized
// identity and a ChaincodeDeploymentSpec
func CreateDeployProposalFromCDS(
	chainID string,
	cds *peer.ChaincodeDeploymentSpec,
	creator []byte,
	policy []byte,
	escc []byte,
	vscc []byte,
	collectionConfig []byte) (*peer.Proposal, string, error) {
	logger.Info("===========CreateDeployProposalFromCDS========")
	logger.Info("===========collectionConfig========",collectionConfig)
	if collectionConfig == nil {
		return createProposalFromCDS(chainID, cds, creator, "deploy", policy, escc, vscc)
	}
	return createProposalFromCDS(chainID, cds, creator, "deploy", policy, escc, vscc, collectionConfig)
}

// CreateUpgradeProposalFromCDS returns a upgrade proposal given a serialized
// identity and a ChaincodeDeploymentSpec
func CreateUpgradeProposalFromCDS(
	chainID string,
	cds *peer.ChaincodeDeploymentSpec,
	creator []byte,
	policy []byte,
	escc []byte,
	vscc []byte,
	collectionConfig []byte) (*peer.Proposal, string, error) {
	logger.Info("===========CreateUpgradeProposalFromCDS========")
	if collectionConfig == nil {
		return createProposalFromCDS(chainID, cds, creator, "upgrade", policy, escc, vscc)
	}
	return createProposalFromCDS(chainID, cds, creator, "upgrade", policy, escc, vscc, collectionConfig)
}

// createProposalFromCDS returns a deploy or upgrade proposal given a
// serialized identity and a ChaincodeDeploymentSpec
func createProposalFromCDS(chainID string, msg proto.Message, creator []byte, propType string, args ...[]byte) (*peer.Proposal, string, error) {
	logger.Info("===========func createProposalFromCDS(chainID string, msg proto.Message, creator []byte, propType string, args ...[]byte) (*peer.Proposal, string, error)========")
	// in the new mode, cds will be nil, "deploy" and "upgrade" are instantiates.
	var ccinp *peer.ChaincodeInput
	var b []byte
	var err error
	if msg != nil {
		b, err = proto.Marshal(msg)
		if err != nil {
			return nil, "", err
		}
	}
	switch propType {
	case "deploy":
		logger.Info("==========case \"deploy\":==========")
		fallthrough
	case "upgrade":
		logger.Info("=========case \"upgrade\":=========")
		cds, ok := msg.(*peer.ChaincodeDeploymentSpec)
		if !ok || cds == nil {
			return nil, "", errors.New("invalid message for creating lifecycle chaincode proposal")
		}

		Args := [][]byte{[]byte(propType), []byte(chainID), b}
		logger.Info("======Args========",Args)
		Args = append(Args, args...)
		logger.Info("======Args========",Args)
		ccinp = &peer.ChaincodeInput{Args: Args}
	case "install":
		logger.Info("======case \"install\":========")
		ccinp = &peer.ChaincodeInput{Args: [][]byte{[]byte(propType), b}}
	}

	// wrap the deployment in an invocation spec to lscc...
	lsccSpec := &peer.ChaincodeInvocationSpec{
		ChaincodeSpec: &peer.ChaincodeSpec{
			Type:        peer.ChaincodeSpec_GOLANG,
			ChaincodeId: &peer.ChaincodeID{Name: "lscc"},
			Input:       ccinp,
		},
	}

	// ...and get the proposal for it
	return CreateProposalFromCIS(common.HeaderType_ENDORSER_TRANSACTION, chainID, lsccSpec, creator)
}

// ComputeTxID computes TxID as the Hash computed
// over the concatenation of nonce and creator.
func ComputeTxID(nonce, creator []byte) (string, error) {
	logger.Info("===========ComputeTxID========")
	// TODO: Get the Hash function to be used from
	// channel configuration
	digest, err := factory.GetDefault().Hash(
		append(nonce, creator...),
		&bccsp.SHA256Opts{})
	if err != nil {
		return "", err
	}
	return hex.EncodeToString(digest), nil
}

// CheckTxID checks that txid is equal to the Hash computed
// over the concatenation of nonce and creator.
func CheckTxID(txid string, nonce, creator []byte) error {
	logger.Info("===========CheckTxID========")
	computedTxID, err := ComputeTxID(nonce, creator)
	if err != nil {
		return errors.WithMessage(err, "error computing target txid")
	}

	if txid != computedTxID {
		return errors.Errorf("invalid txid. got [%s], expected [%s]", txid, computedTxID)
	}

	return nil
}

// ComputeProposalBinding computes the binding of a proposal
func ComputeProposalBinding(proposal *peer.Proposal) ([]byte, error) {
	logger.Info("===========ComputeProposalBinding========")
	if proposal == nil {
		return nil, errors.New("proposal is nil")
	}
	if len(proposal.Header) == 0 {
		return nil, errors.New("proposal's header is nil")
	}

	h, err := GetHeader(proposal.Header)
	if err != nil {
		return nil, err
	}

	chdr, err := UnmarshalChannelHeader(h.ChannelHeader)
	if err != nil {
		return nil, err
	}
	shdr, err := GetSignatureHeader(h.SignatureHeader)
	if err != nil {
		return nil, err
	}

	return computeProposalBindingInternal(shdr.Nonce, shdr.Creator, chdr.Epoch)
}

func computeProposalBindingInternal(nonce, creator []byte, epoch uint64) ([]byte, error) {

	logger.Info("===========computeProposalBindingInternal========")
	epochBytes := make([]byte, 8)
	binary.LittleEndian.PutUint64(epochBytes, epoch)

	// TODO: add to genesis block the hash function used for
	// the binding computation
	return factory.GetDefault().Hash(
		append(append(nonce, creator...), epochBytes...),
		&bccsp.SHA256Opts{})
}
