//line /home/cooper/go/src/github.com/hyperledger/fabric/core/endorser/state.go:1
/*
Copyright IBM Corp. 2018 All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package endorser; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric/core/handlers/endorsement/api/state"
	"github.com/hyperledger/fabric/core/ledger"
	"github.com/hyperledger/fabric/core/transientstore"
	"github.com/hyperledger/fabric/protos/ledger/rwset"
	"github.com/pkg/errors"
)

//go:generate mockery -dir . -name QueryCreator -case underscore -output mocks/
// QueryCreator creates new QueryExecutors
type QueryCreator interface {
	NewQueryExecutor() (ledger.QueryExecutor, error)
}

// ChannelState defines state operations
type ChannelState struct {
	transientstore.Store
	QueryCreator
}

// FetchState fetches state
func (cs *ChannelState) FetchState() (endorsement.State, error) {_cover_atomic_.AddUint32(&GoCover_3_306432633236306362313365.Count[0], 1);
	qe, err := cs.NewQueryExecutor()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_3_306432633236306362313365.Count[2], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_3_306432633236306362313365.Count[1], 1);return &StateContext{
		QueryExecutor: qe,
		Store:         cs.Store,
	}, nil
}

// StateContext defines an execution context that interacts with the state
type StateContext struct {
	transientstore.Store
	ledger.QueryExecutor
}

// GetTransientByTXID returns the private data associated with this transaction ID.
func (sc *StateContext) GetTransientByTXID(txID string) ([]*rwset.TxPvtReadWriteSet, error) {_cover_atomic_.AddUint32(&GoCover_3_306432633236306362313365.Count[3], 1);
	scanner, err := sc.Store.GetTxPvtRWSetByTxid(txID, nil)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_3_306432633236306362313365.Count[6], 1);
		return nil, errors.WithStack(err)
	}
	_cover_atomic_.AddUint32(&GoCover_3_306432633236306362313365.Count[4], 1);defer scanner.Close()
	var data []*rwset.TxPvtReadWriteSet
	for {_cover_atomic_.AddUint32(&GoCover_3_306432633236306362313365.Count[7], 1);
		res, err := scanner.NextWithConfig()
		if err != nil {_cover_atomic_.AddUint32(&GoCover_3_306432633236306362313365.Count[11], 1);
			return nil, errors.WithStack(err)
		}
		_cover_atomic_.AddUint32(&GoCover_3_306432633236306362313365.Count[8], 1);if res == nil {_cover_atomic_.AddUint32(&GoCover_3_306432633236306362313365.Count[12], 1);
			break
		}
		_cover_atomic_.AddUint32(&GoCover_3_306432633236306362313365.Count[9], 1);if res.PvtSimulationResultsWithConfig == nil {_cover_atomic_.AddUint32(&GoCover_3_306432633236306362313365.Count[13], 1);
			continue
		}
		_cover_atomic_.AddUint32(&GoCover_3_306432633236306362313365.Count[10], 1);data = append(data, res.PvtSimulationResultsWithConfig.PvtRwset)
	}
	_cover_atomic_.AddUint32(&GoCover_3_306432633236306362313365.Count[5], 1);return data, nil
}

var GoCover_3_306432633236306362313365 = struct {
	Count     [14]uint32
	Pos       [3 * 14]uint32
	NumStmt   [14]uint16
} {
	Pos: [3 * 14]uint32{
		30, 32, 0x100041, // [0]
		36, 39, 0x80002, // [1]
		32, 34, 0x30010, // [2]
		49, 51, 0x10005d, // [3]
		54, 56, 0x60002, // [4]
		69, 69, 0x120002, // [5]
		51, 53, 0x30010, // [6]
		56, 58, 0x110006, // [7]
		61, 61, 0x110003, // [8]
		64, 64, 0x300003, // [9]
		67, 67, 0x430003, // [10]
		58, 60, 0x40011, // [11]
		61, 62, 0x90011, // [12]
		64, 65, 0xc0030, // [13]
	},
	NumStmt: [14]uint16{
		2, // 0
		1, // 1
		1, // 2
		2, // 3
		3, // 4
		1, // 5
		1, // 6
		2, // 7
		1, // 8
		1, // 9
		1, // 10
		1, // 11
		1, // 12
		1, // 13
	},
}
var _ = _cover_atomic_.LoadUint32
