//line /home/cooper/go/src/github.com/hyperledger/fabric/peer/clilogging/setlogspec.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package clilogging; import _cover_atomic_ "sync/atomic"

import (
	"context"

	pb "github.com/hyperledger/fabric/protos/peer"
	"github.com/pkg/errors"
	"github.com/spf13/cobra"
)

func setLogSpecCmd(cf *LoggingCmdFactory) *cobra.Command {_cover_atomic_.AddUint32(&GoCover_6_303930383430333338303032.Count[0], 1);
	var loggingSetLogSpecCmd = &cobra.Command{
		Use:   "setlogspec",
		Short: "Sets the logging spec.",
		Long:  `Sets the active logging specification of the peer.`,
		RunE: func(cmd *cobra.Command, args []string) error {_cover_atomic_.AddUint32(&GoCover_6_303930383430333338303032.Count[2], 1);
			return setLogSpec(cf, cmd, args)
		},
	}

	_cover_atomic_.AddUint32(&GoCover_6_303930383430333338303032.Count[1], 1);return loggingSetLogSpecCmd
}

func setLogSpec(cf *LoggingCmdFactory, cmd *cobra.Command, args []string) (err error) {_cover_atomic_.AddUint32(&GoCover_6_303930383430333338303032.Count[3], 1);
	err = checkLoggingCmdParams(cmd, args)
	if err == nil {_cover_atomic_.AddUint32(&GoCover_6_303930383430333338303032.Count[5], 1);
		// Parsing of the command line is done so silence cmd usage
		cmd.SilenceUsage = true

		if cf == nil {_cover_atomic_.AddUint32(&GoCover_6_303930383430333338303032.Count[9], 1);
			cf, err = InitCmdFactory()
			if err != nil {_cover_atomic_.AddUint32(&GoCover_6_303930383430333338303032.Count[10], 1);
				return err
			}
		}
		_cover_atomic_.AddUint32(&GoCover_6_303930383430333338303032.Count[6], 1);op := &pb.AdminOperation{
			Content: &pb.AdminOperation_LogSpecReq{
				LogSpecReq: &pb.LogSpecRequest{
					LogSpec: args[0],
				},
			},
		}
		env := cf.wrapWithEnvelope(op)
		logResponse, err := cf.AdminClient.SetLogSpec(context.Background(), env)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_6_303930383430333338303032.Count[11], 1);
			return err
		}
		_cover_atomic_.AddUint32(&GoCover_6_303930383430333338303032.Count[7], 1);if logResponse.Error != "" {_cover_atomic_.AddUint32(&GoCover_6_303930383430333338303032.Count[12], 1);
			return errors.New(logResponse.Error)
		}
		_cover_atomic_.AddUint32(&GoCover_6_303930383430333338303032.Count[8], 1);logger.Infof("Current logging spec set to: %s", logResponse.LogSpec)
	}
	_cover_atomic_.AddUint32(&GoCover_6_303930383430333338303032.Count[4], 1);return err
}

var GoCover_6_303930383430333338303032 = struct {
	Count     [13]uint32
	Pos       [3 * 13]uint32
	NumStmt   [13]uint16
} {
	Pos: [3 * 13]uint32{
		17, 22, 0x37003a, // [0]
		27, 27, 0x1d0002, // [1]
		22, 24, 0x40037, // [2]
		30, 32, 0x100057, // [3]
		59, 59, 0xc0002, // [4]
		32, 36, 0x100010, // [5]
		42, 51, 0x110003, // [6]
		54, 54, 0x1e0003, // [7]
		57, 57, 0x470003, // [8]
		36, 38, 0x120010, // [9]
		38, 40, 0x50012, // [10]
		51, 53, 0x40011, // [11]
		54, 56, 0x4001e, // [12]
	},
	NumStmt: [13]uint16{
		1, // 0
		1, // 1
		1, // 2
		2, // 3
		1, // 4
		2, // 5
		4, // 6
		1, // 7
		1, // 8
		2, // 9
		1, // 10
		1, // 11
		1, // 12
	},
}
var _ = _cover_atomic_.LoadUint32
