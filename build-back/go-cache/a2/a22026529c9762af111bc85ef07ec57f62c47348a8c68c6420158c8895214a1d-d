//line /home/cooper/go/src/github.com/hyperledger/fabric/peer/gossip/mcs.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package gossip; import _cover_atomic_ "sync/atomic"

import (
	"bytes"
	"fmt"
	"time"

	"github.com/hyperledger/fabric/bccsp"
	"github.com/hyperledger/fabric/bccsp/factory"
	"github.com/hyperledger/fabric/common/crypto"
	"github.com/hyperledger/fabric/common/flogging"
	"github.com/hyperledger/fabric/common/policies"
	"github.com/hyperledger/fabric/common/util"
	"github.com/hyperledger/fabric/gossip/api"
	"github.com/hyperledger/fabric/gossip/common"
	"github.com/hyperledger/fabric/msp"
	"github.com/hyperledger/fabric/msp/mgmt"
	pcommon "github.com/hyperledger/fabric/protos/common"
	"github.com/hyperledger/fabric/protos/utils"
	"github.com/pkg/errors"
)

var mcsLogger = flogging.MustGetLogger("peer.gossip.mcs")

// MSPMessageCryptoService implements the MessageCryptoService interface
// using the peer MSPs (local and channel-related)
//
// In order for the system to be secure it is vital to have the
// MSPs to be up-to-date. Channels' MSPs are updated via
// configuration transactions distributed by the ordering service.
//
// A similar mechanism needs to be in place to update the local MSP, as well.
// This implementation assumes that these mechanisms are all in place and working.
type MSPMessageCryptoService struct {
	channelPolicyManagerGetter policies.ChannelPolicyManagerGetter
	localSigner                crypto.LocalSigner
	deserializer               mgmt.DeserializersManager
}

// NewMCS creates a new instance of MSPMessageCryptoService
// that implements MessageCryptoService.
// The method takes in input:
// 1. a policies.ChannelPolicyManagerGetter that gives access to the policy manager of a given channel via the Manager method.
// 2. an instance of crypto.LocalSigner
// 3. an identity deserializer manager
func NewMCS(channelPolicyManagerGetter policies.ChannelPolicyManagerGetter, localSigner crypto.LocalSigner, deserializer mgmt.DeserializersManager) *MSPMessageCryptoService {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[0], 1);
	return &MSPMessageCryptoService{channelPolicyManagerGetter: channelPolicyManagerGetter, localSigner: localSigner, deserializer: deserializer}
}

// ValidateIdentity validates the identity of a remote peer.
// If the identity is invalid, revoked, expired it returns an error.
// Else, returns nil
func (s *MSPMessageCryptoService) ValidateIdentity(peerIdentity api.PeerIdentityType) error {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[1], 1);
	// As prescribed by the contract of method,
	// below we check only that peerIdentity is not
	// invalid, revoked or expired.

	_, _, err := s.getValidatedIdentity(peerIdentity)
	return err
}

// GetPKIidOfCert returns the PKI-ID of a peer's identity
// If any error occurs, the method return nil
// The PKid of a peer is computed as the SHA2-256 of peerIdentity which
// is supposed to be the serialized version of MSP identity.
// This method does not validate peerIdentity.
// This validation is supposed to be done appropriately during the execution flow.
func (s *MSPMessageCryptoService) GetPKIidOfCert(peerIdentity api.PeerIdentityType) common.PKIidType {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[2], 1);
	// Validate arguments
	if len(peerIdentity) == 0 {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[6], 1);
		mcsLogger.Error("Invalid Peer Identity. It must be different from nil.")

		return nil
	}

	_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[3], 1);sid, err := s.deserializer.Deserialize(peerIdentity)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[7], 1);
		mcsLogger.Errorf("Failed getting validated identity from peer identity [% x]: [%s]", peerIdentity, err)

		return nil
	}

	// concatenate msp-id and idbytes
	// idbytes is the low-level representation of an identity.
	// it is supposed to be already in its minimal representation

	_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[4], 1);mspIdRaw := []byte(sid.Mspid)
	raw := append(mspIdRaw, sid.IdBytes...)

	// Hash
	digest, err := factory.GetDefault().Hash(raw, &bccsp.SHA256Opts{})
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[8], 1);
		mcsLogger.Errorf("Failed computing digest of serialized identity [% x]: [%s]", peerIdentity, err)

		return nil
	}

	_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[5], 1);return digest
}

// VerifyBlock returns nil if the block is properly signed, and the claimed seqNum is the
// sequence number that the block's header contains.
// else returns error
func (s *MSPMessageCryptoService) VerifyBlock(chainID common.ChainID, seqNum uint64, signedBlock []byte) error {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[9], 1);
	// - Convert signedBlock to common.Block.
	block, err := utils.GetBlockFromBlockBytes(signedBlock)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[20], 1);
		return fmt.Errorf("Failed unmarshalling block bytes on channel [%s]: [%s]", chainID, err)
	}

	_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[10], 1);if block.Header == nil {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[21], 1);
		return fmt.Errorf("Invalid Block on channel [%s]. Header must be different from nil.", chainID)
	}

	_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[11], 1);blockSeqNum := block.Header.Number
	if seqNum != blockSeqNum {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[22], 1);
		return fmt.Errorf("Claimed seqNum is [%d] but actual seqNum inside block is [%d]", seqNum, blockSeqNum)
	}

	// - Extract channelID and compare with chainID
	_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[12], 1);channelID, err := utils.GetChainIDFromBlock(block)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[23], 1);
		return fmt.Errorf("Failed getting channel id from block with id [%d] on channel [%s]: [%s]", block.Header.Number, chainID, err)
	}

	_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[13], 1);if channelID != string(chainID) {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[24], 1);
		return fmt.Errorf("Invalid block's channel id. Expected [%s]. Given [%s]", chainID, channelID)
	}

	// - Unmarshal medatada
	_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[14], 1);if block.Metadata == nil || len(block.Metadata.Metadata) == 0 {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[25], 1);
		return fmt.Errorf("Block with id [%d] on channel [%s] does not have metadata. Block not valid.", block.Header.Number, chainID)
	}

	_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[15], 1);metadata, err := utils.GetMetadataFromBlock(block, pcommon.BlockMetadataIndex_SIGNATURES)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[26], 1);
		return fmt.Errorf("Failed unmarshalling medatata for signatures [%s]", err)
	}

	// - Verify that Header.DataHash is equal to the hash of block.Data
	// This is to ensure that the header is consistent with the data carried by this block
	_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[16], 1);if !bytes.Equal(block.Data.Hash(), block.Header.DataHash) {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[27], 1);
		return fmt.Errorf("Header.DataHash is different from Hash(block.Data) for block with id [%d] on channel [%s]", block.Header.Number, chainID)
	}

	// - Get Policy for block validation

	// Get the policy manager for channelID
	_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[17], 1);cpm, ok := s.channelPolicyManagerGetter.Manager(channelID)
	if cpm == nil {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[28], 1);
		return fmt.Errorf("Could not acquire policy manager for channel %s", channelID)
	}
	// ok is true if it was the manager requested, or false if it is the default manager
	_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[18], 1);mcsLogger.Debugf("Got policy manager for channel [%s] with flag [%t]", channelID, ok)

	// Get block validation policy
	policy, ok := cpm.GetPolicy(policies.BlockValidation)
	// ok is true if it was the policy requested, or false if it is the default policy
	mcsLogger.Debugf("Got block validation policy for channel [%s] with flag [%t]", channelID, ok)

	// - Prepare SignedData
	signatureSet := []*pcommon.SignedData{}
	for _, metadataSignature := range metadata.Signatures {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[29], 1);
		shdr, err := utils.GetSignatureHeader(metadataSignature.SignatureHeader)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[31], 1);
			return fmt.Errorf("Failed unmarshalling signature header for block with id [%d] on channel [%s]: [%s]", block.Header.Number, chainID, err)
		}
		_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[30], 1);signatureSet = append(
			signatureSet,
			&pcommon.SignedData{
				Identity:  shdr.Creator,
				Data:      util.ConcatenateBytes(metadata.Value, metadataSignature.SignatureHeader, block.Header.Bytes()),
				Signature: metadataSignature.Signature,
			},
		)
	}

	// - Evaluate policy
	_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[19], 1);return policy.Evaluate(signatureSet)
}

// Sign signs msg with this peer's signing key and outputs
// the signature if no error occurred.
func (s *MSPMessageCryptoService) Sign(msg []byte) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[32], 1);
	return s.localSigner.Sign(msg)
}

// Verify checks that signature is a valid signature of message under a peer's verification key.
// If the verification succeeded, Verify returns nil meaning no error occurred.
// If peerIdentity is nil, then the verification fails.
func (s *MSPMessageCryptoService) Verify(peerIdentity api.PeerIdentityType, signature, message []byte) error {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[33], 1);
	identity, chainID, err := s.getValidatedIdentity(peerIdentity)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[36], 1);
		mcsLogger.Errorf("Failed getting validated identity from peer identity [%s]", err)

		return err
	}

	_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[34], 1);if len(chainID) == 0 {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[37], 1);
		// At this stage, this means that peerIdentity
		// belongs to this peer's LocalMSP.
		// The signature is validated directly
		return identity.Verify(message, signature)
	}

	// At this stage, the signature must be validated
	// against the reader policy of the channel
	// identified by chainID

	_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[35], 1);return s.VerifyByChannel(chainID, peerIdentity, signature, message)
}

// VerifyByChannel checks that signature is a valid signature of message
// under a peer's verification key, but also in the context of a specific channel.
// If the verification succeeded, Verify returns nil meaning no error occurred.
// If peerIdentity is nil, then the verification fails.
func (s *MSPMessageCryptoService) VerifyByChannel(chainID common.ChainID, peerIdentity api.PeerIdentityType, signature, message []byte) error {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[38], 1);
	// Validate arguments
	if len(peerIdentity) == 0 {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[41], 1);
		return errors.New("Invalid Peer Identity. It must be different from nil.")
	}

	// Get the policy manager for channel chainID
	_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[39], 1);cpm, flag := s.channelPolicyManagerGetter.Manager(string(chainID))
	if cpm == nil {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[42], 1);
		return fmt.Errorf("Could not acquire policy manager for channel %s", string(chainID))
	}
	_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[40], 1);mcsLogger.Debugf("Got policy manager for channel [%s] with flag [%t]", string(chainID), flag)

	// Get channel reader policy
	policy, flag := cpm.GetPolicy(policies.ChannelApplicationReaders)
	mcsLogger.Debugf("Got reader policy for channel [%s] with flag [%t]", string(chainID), flag)

	return policy.Evaluate(
		[]*pcommon.SignedData{{
			Data:      message,
			Identity:  []byte(peerIdentity),
			Signature: signature,
		}},
	)
}

func (s *MSPMessageCryptoService) Expiration(peerIdentity api.PeerIdentityType) (time.Time, error) {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[43], 1);
	id, _, err := s.getValidatedIdentity(peerIdentity)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[45], 1);
		return time.Time{}, errors.Wrap(err, "Unable to extract msp.Identity from peer Identity")
	}
	_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[44], 1);return id.ExpiresAt(), nil

}

func (s *MSPMessageCryptoService) getValidatedIdentity(peerIdentity api.PeerIdentityType) (msp.Identity, common.ChainID, error) {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[46], 1);
	// Validate arguments
	if len(peerIdentity) == 0 {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[51], 1);
		return nil, nil, errors.New("Invalid Peer Identity. It must be different from nil.")
	}

	_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[47], 1);sId, err := s.deserializer.Deserialize(peerIdentity)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[52], 1);
		mcsLogger.Error("failed deserializing identity", err)
		return nil, nil, err
	}

	// Notice that peerIdentity is assumed to be the serialization of an identity.
	// So, first step is the identity deserialization and then verify it.

	// First check against the local MSP.
	// If the peerIdentity is in the same organization of this node then
	// the local MSP is required to take the final decision on the validity
	// of the signature.
	_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[48], 1);lDes := s.deserializer.GetLocalDeserializer()
	identity, err := lDes.DeserializeIdentity([]byte(peerIdentity))
	if err == nil {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[53], 1);
		// No error means that the local MSP successfully deserialized the identity.
		// We now check additional properties.
		if err := lDes.IsWellFormed(sId); err != nil {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[55], 1);
			return nil, nil, errors.Wrap(err, "identity is not well formed")
		}
		// TODO: The following check will be replaced by a check on the organizational units
		// when we allow the gossip network to have organization unit (MSP subdivisions)
		// scoped messages.
		// The following check is consistent with the SecurityAdvisor#OrgByPeerIdentity
		// implementation.
		// TODO: Notice that the following check saves us from the fact
		// that DeserializeIdentity does not yet enforce MSP-IDs consistency.
		// This check can be removed once DeserializeIdentity will be fixed.
		_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[54], 1);if identity.GetMSPIdentifier() == s.deserializer.GetLocalMSPIdentifier() {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[56], 1);
			// Check identity validity

			// Notice that at this stage we don't have to check the identity
			// against any channel's policies.
			// This will be done by the caller function, if needed.
			return identity, nil, identity.Validate()
		}
	}

	// Check against managers
	_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[49], 1);for chainID, mspManager := range s.deserializer.GetChannelDeserializers() {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[57], 1);
		// Deserialize identity
		identity, err := mspManager.DeserializeIdentity([]byte(peerIdentity))
		if err != nil {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[61], 1);
			mcsLogger.Debugf("Failed deserialization identity [% x] on [%s]: [%s]", peerIdentity, chainID, err)
			continue
		}

		// We managed deserializing the identity with this MSP manager. Now we check if it's well formed.
		_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[58], 1);if err := mspManager.IsWellFormed(sId); err != nil {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[62], 1);
			return nil, nil, errors.Wrap(err, "identity is not well formed")
		}

		// Check identity validity
		// Notice that at this stage we don't have to check the identity
		// against any channel's policies.
		// This will be done by the caller function, if needed.

		_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[59], 1);if err := identity.Validate(); err != nil {_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[63], 1);
			mcsLogger.Debugf("Failed validating identity [% x] on [%s]: [%s]", peerIdentity, chainID, err)
			continue
		}

		_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[60], 1);mcsLogger.Debugf("Validation succeeded [% x] on [%s]", peerIdentity, chainID)

		return identity, common.ChainID(chainID), nil
	}

	_cover_atomic_.AddUint32(&GoCover_0_353833383835633532363635.Count[50], 1);return nil, nil, fmt.Errorf("Peer Identity [% x] cannot be validated. No MSP found able to do that.", peerIdentity)
}

var GoCover_0_353833383835633532363635 = struct {
	Count     [64]uint32
	Pos       [3 * 64]uint32
	NumStmt   [64]uint16
} {
	Pos: [3 * 64]uint32{
		52, 54, 0x200ae, // [0]
		59, 66, 0x2005d, // [1]
		74, 76, 0x1c0066, // [2]
		82, 83, 0x100002, // [3]
		93, 98, 0x100002, // [4]
		104, 104, 0xf0002, // [5]
		76, 80, 0x3001c, // [6]
		83, 87, 0x30010, // [7]
		98, 102, 0x30010, // [8]
		110, 113, 0x100070, // [9]
		117, 117, 0x190002, // [10]
		121, 122, 0x1b0002, // [11]
		127, 128, 0x100002, // [12]
		132, 132, 0x220002, // [13]
		137, 137, 0x400002, // [14]
		141, 142, 0x100002, // [15]
		148, 148, 0x3c0002, // [16]
		155, 156, 0x100002, // [17]
		160, 169, 0x380002, // [18]
		185, 185, 0x260002, // [19]
		113, 115, 0x30010, // [20]
		117, 119, 0x30019, // [21]
		122, 124, 0x3001b, // [22]
		128, 130, 0x30010, // [23]
		132, 134, 0x30022, // [24]
		137, 139, 0x30040, // [25]
		142, 144, 0x30010, // [26]
		148, 150, 0x3003c, // [27]
		156, 158, 0x30010, // [28]
		169, 171, 0x110038, // [29]
		174, 181, 0x40003, // [30]
		171, 173, 0x40011, // [31]
		190, 192, 0x20044, // [32]
		197, 199, 0x10006e, // [33]
		205, 205, 0x170002, // [34]
		216, 216, 0x450002, // [35]
		199, 203, 0x30010, // [36]
		205, 210, 0x30017, // [37]
		223, 225, 0x1c008f, // [38]
		230, 231, 0x100002, // [39]
		234, 246, 0x30002, // [40]
		225, 227, 0x3001c, // [41]
		231, 233, 0x30010, // [42]
		249, 251, 0x100064, // [43]
		254, 254, 0x1c0002, // [44]
		251, 253, 0x30010, // [45]
		258, 260, 0x1c0081, // [46]
		264, 265, 0x100002, // [47]
		277, 279, 0x100002, // [48]
		304, 304, 0x4c0002, // [49]
		332, 332, 0x750002, // [50]
		260, 262, 0x3001c, // [51]
		265, 268, 0x30010, // [52]
		279, 282, 0x300010, // [53]
		293, 293, 0x4c0003, // [54]
		282, 284, 0x40030, // [55]
		293, 300, 0x4004c, // [56]
		304, 307, 0x11004c, // [57]
		313, 313, 0x360003, // [58]
		322, 322, 0x2d0003, // [59]
		327, 329, 0x300003, // [60]
		307, 309, 0xc0011, // [61]
		313, 315, 0x40036, // [62]
		322, 324, 0xc002d, // [63]
	},
	NumStmt: [64]uint16{
		1, // 0
		2, // 1
		1, // 2
		2, // 3
		4, // 4
		1, // 5
		2, // 6
		2, // 7
		2, // 8
		2, // 9
		1, // 10
		2, // 11
		2, // 12
		1, // 13
		1, // 14
		2, // 15
		1, // 16
		2, // 17
		5, // 18
		1, // 19
		1, // 20
		1, // 21
		1, // 22
		1, // 23
		1, // 24
		1, // 25
		1, // 26
		1, // 27
		1, // 28
		2, // 29
		1, // 30
		1, // 31
		1, // 32
		2, // 33
		1, // 34
		1, // 35
		2, // 36
		1, // 37
		1, // 38
		2, // 39
		4, // 40
		1, // 41
		1, // 42
		2, // 43
		1, // 44
		1, // 45
		1, // 46
		2, // 47
		3, // 48
		1, // 49
		1, // 50
		1, // 51
		2, // 52
		1, // 53
		1, // 54
		1, // 55
		1, // 56
		2, // 57
		1, // 58
		1, // 59
		2, // 60
		2, // 61
		1, // 62
		2, // 63
	},
}
var _ = _cover_atomic_.LoadUint32
