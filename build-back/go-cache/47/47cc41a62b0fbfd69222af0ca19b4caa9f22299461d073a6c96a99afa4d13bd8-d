//line /home/cooper/go/src/github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/statedb/statecouchdb/statecouchdb_test_export.go:1
/*
Copyright IBM Corp. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0
*/

package statecouchdb; import _cover_atomic_ "sync/atomic"

import (
	"testing"

	"github.com/hyperledger/fabric/common/metrics/disabled"
	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/statedb"
	"github.com/stretchr/testify/assert"
)

// TestVDBEnv provides a couch db backed versioned db for testing
type TestVDBEnv struct {
	t          testing.TB
	DBProvider statedb.VersionedDBProvider
}

// NewTestVDBEnv instantiates and new couch db backed TestVDB
func NewTestVDBEnv(t testing.TB) *TestVDBEnv {_cover_atomic_.AddUint32(&GoCover_5_613461656536306435636636.Count[0], 1);
	t.Logf("Creating new TestVDBEnv")

	dbProvider, _ := NewVersionedDBProvider(&disabled.Provider{})
	testVDBEnv := &TestVDBEnv{t, dbProvider}
	// No cleanup for new test environment.  Need to cleanup per test for each DB used in the test.
	return testVDBEnv
}

// Cleanup drops the test couch databases and closes the db provider
func (env *TestVDBEnv) Cleanup() {_cover_atomic_.AddUint32(&GoCover_5_613461656536306435636636.Count[1], 1);
	env.t.Logf("Cleaningup TestVDBEnv")
	CleanupDB(env.t, env.DBProvider)

	env.DBProvider.Close()
}

func CleanupDB(t testing.TB, dbProvider statedb.VersionedDBProvider) {_cover_atomic_.AddUint32(&GoCover_5_613461656536306435636636.Count[2], 1);
	couchdbProvider, _ := dbProvider.(*VersionedDBProvider)
	for _, v := range couchdbProvider.databases {_cover_atomic_.AddUint32(&GoCover_5_613461656536306435636636.Count[3], 1);
		if _, err := v.metadataDB.DropDatabase(); err != nil {_cover_atomic_.AddUint32(&GoCover_5_613461656536306435636636.Count[5], 1);
			assert.Failf(t, "DropDatabase %s fails. err: %v", v.metadataDB.DBName, err)
		}

		_cover_atomic_.AddUint32(&GoCover_5_613461656536306435636636.Count[4], 1);for _, db := range v.namespaceDBs {_cover_atomic_.AddUint32(&GoCover_5_613461656536306435636636.Count[6], 1);
			if _, err := db.DropDatabase(); err != nil {_cover_atomic_.AddUint32(&GoCover_5_613461656536306435636636.Count[7], 1);
				assert.Failf(t, "DropDatabase %s fails. err: %v", db.DBName, err)
			}
		}
	}
}

var GoCover_5_613461656536306435636636 = struct {
	Count     [8]uint32
	Pos       [3 * 8]uint32
	NumStmt   [8]uint16
} {
	Pos: [3 * 8]uint32{
		23, 30, 0x2002e, // [0]
		33, 38, 0x20022, // [1]
		40, 42, 0x2e0046, // [2]
		42, 43, 0x38002e, // [3]
		47, 47, 0x250003, // [4]
		43, 45, 0x40038, // [5]
		47, 48, 0x2f0025, // [6]
		48, 50, 0x5002f, // [7]
	},
	NumStmt: [8]uint16{
		4, // 0
		3, // 1
		2, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
	},
}
var _ = _cover_atomic_.LoadUint32
