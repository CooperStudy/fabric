//line /home/cooper/go/src/github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/statedb/statecouchdb/batch_util.go:1
/*
Copyright IBM Corp. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0
*/

package statecouchdb; import _cover_atomic_ "sync/atomic"

import (
	"sync"
)

// batch is executed in a separate goroutine.
type batch interface {
	execute() error
}

// executeBatches executes each batch in a separate goroutine and returns error if
// any of the batches return error during its execution
func executeBatches(batches []batch) error {_cover_atomic_.AddUint32(&GoCover_0_613461656536306435636636.Count[0], 1);
	logger.Debugf("Executing batches = %s", batches)
	numBatches := len(batches)
	if numBatches == 0 {_cover_atomic_.AddUint32(&GoCover_0_613461656536306435636636.Count[5], 1);
		return nil
	}
	_cover_atomic_.AddUint32(&GoCover_0_613461656536306435636636.Count[1], 1);if numBatches == 1 {_cover_atomic_.AddUint32(&GoCover_0_613461656536306435636636.Count[6], 1);
		return batches[0].execute()
	}
	_cover_atomic_.AddUint32(&GoCover_0_613461656536306435636636.Count[2], 1);var batchWG sync.WaitGroup
	batchWG.Add(numBatches)
	errsChan := make(chan error, numBatches)
	defer close(errsChan)
	for _, b := range batches {_cover_atomic_.AddUint32(&GoCover_0_613461656536306435636636.Count[7], 1);
		go func(b batch) {_cover_atomic_.AddUint32(&GoCover_0_613461656536306435636636.Count[8], 1);
			defer batchWG.Done()
			if err := b.execute(); err != nil {_cover_atomic_.AddUint32(&GoCover_0_613461656536306435636636.Count[9], 1);
				errsChan <- err
				return
			}
		}(b)
	}
	_cover_atomic_.AddUint32(&GoCover_0_613461656536306435636636.Count[3], 1);batchWG.Wait()
	if len(errsChan) > 0 {_cover_atomic_.AddUint32(&GoCover_0_613461656536306435636636.Count[10], 1);
		return <-errsChan
	}
	_cover_atomic_.AddUint32(&GoCover_0_613461656536306435636636.Count[4], 1);return nil
}

var GoCover_0_613461656536306435636636 = struct {
	Count     [11]uint32
	Pos       [3 * 11]uint32
	NumStmt   [11]uint16
} {
	Pos: [3 * 11]uint32{
		19, 22, 0x15002c, // [0]
		25, 25, 0x150002, // [1]
		28, 32, 0x1c0002, // [2]
		41, 42, 0x170002, // [3]
		45, 45, 0xc0002, // [4]
		22, 24, 0x30015, // [5]
		25, 27, 0x30015, // [6]
		32, 33, 0x14001c, // [7]
		33, 35, 0x260014, // [8]
		35, 38, 0x50026, // [9]
		42, 44, 0x30017, // [10]
	},
	NumStmt: [11]uint16{
		3, // 0
		1, // 1
		5, // 2
		2, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
		2, // 8
		2, // 9
		1, // 10
	},
}
var _ = _cover_atomic_.LoadUint32
