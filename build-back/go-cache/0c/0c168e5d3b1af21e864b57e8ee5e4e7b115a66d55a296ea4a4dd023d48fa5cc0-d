//line /home/cooper/go/src/github.com/hyperledger/fabric/core/ledger/testutil/test_util.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package testutil; import _cover_atomic_ "sync/atomic"

import (
	"flag"
	"fmt"
	mathRand "math/rand"
	"regexp"
	"strings"
	"time"

	"github.com/hyperledger/fabric/core/config/configtest"
	"github.com/spf13/viper"
)

// TestRandomNumberGenerator a random number generator for testing
type TestRandomNumberGenerator struct {
	rand      *mathRand.Rand
	maxNumber int
}

// NewTestRandomNumberGenerator constructs a new `TestRandomNumberGenerator`
func NewTestRandomNumberGenerator(maxNumber int) *TestRandomNumberGenerator {_cover_atomic_.AddUint32(&GoCover_0_393136356538653730363835.Count[0], 1);
	return &TestRandomNumberGenerator{
		mathRand.New(mathRand.NewSource(time.Now().UnixNano())),
		maxNumber,
	}
}

// Next generates next random number
func (randNumGenerator *TestRandomNumberGenerator) Next() int {_cover_atomic_.AddUint32(&GoCover_0_393136356538653730363835.Count[1], 1);
	return randNumGenerator.rand.Intn(randNumGenerator.maxNumber)
}

// SetupTestConfig sets up configurations for tetsing
func SetupTestConfig() {_cover_atomic_.AddUint32(&GoCover_0_393136356538653730363835.Count[2], 1);
	viper.AddConfigPath(".")
	viper.SetEnvKeyReplacer(strings.NewReplacer(".", "_"))
	viper.AutomaticEnv()
	viper.SetDefault("peer.ledger.test.loadYAML", true)
	loadYAML := viper.GetBool("peer.ledger.test.loadYAML")
	if loadYAML {_cover_atomic_.AddUint32(&GoCover_0_393136356538653730363835.Count[3], 1);
		viper.SetConfigName("test")
		err := viper.ReadInConfig()
		if err != nil {_cover_atomic_.AddUint32(&GoCover_0_393136356538653730363835.Count[4], 1); // Handle errors reading the config file
			panic(fmt.Errorf("Fatal error config file: %s \n", err))
		}
	}
}

// SetupCoreYAMLConfig sets up configurations for testing
func SetupCoreYAMLConfig() {_cover_atomic_.AddUint32(&GoCover_0_393136356538653730363835.Count[5], 1);
	viper.SetConfigName("core")
	viper.SetEnvPrefix("CORE")
	viper.SetEnvKeyReplacer(strings.NewReplacer(".", "_"))
	viper.AutomaticEnv()

	err := configtest.AddDevConfigPath(nil)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_393136356538653730363835.Count[7], 1);
		panic(fmt.Errorf("Fatal error adding dev dir: %s \n", err))
	}

	_cover_atomic_.AddUint32(&GoCover_0_393136356538653730363835.Count[6], 1);err = viper.ReadInConfig()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_393136356538653730363835.Count[8], 1); // Handle errors reading the config file
		panic(fmt.Errorf("Fatal error config file: %s \n", err))
	}
}

// ResetConfigToDefaultValues resets configurations optins back to defaults
func ResetConfigToDefaultValues() {_cover_atomic_.AddUint32(&GoCover_0_393136356538653730363835.Count[9], 1);
	//reset to defaults
	viper.Set("ledger.state.totalQueryLimit", 10000)
	viper.Set("ledger.state.couchDBConfig.internalQueryLimit", 1000)
	viper.Set("ledger.state.stateDatabase", "goleveldb")
	viper.Set("ledger.history.enableHistoryDatabase", false)
	viper.Set("ledger.state.couchDBConfig.autoWarmIndexes", true)
	viper.Set("ledger.state.couchDBConfig.warmIndexesAfterNBlocks", 1)
	viper.Set("peer.fileSystemPath", "/var/hyperledger/production")
}

// ParseTestParams parses tests params
func ParseTestParams() []string {_cover_atomic_.AddUint32(&GoCover_0_393136356538653730363835.Count[10], 1);
	testParams := flag.String("testParams", "", "Test specific parameters")
	flag.Parse()
	regex, err := regexp.Compile(",(\\s+)?")
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_393136356538653730363835.Count[12], 1);
		panic(fmt.Errorf("err = %s\n", err))
	}
	_cover_atomic_.AddUint32(&GoCover_0_393136356538653730363835.Count[11], 1);paramsArray := regex.Split(*testParams, -1)
	return paramsArray
}

var GoCover_0_393136356538653730363835 = struct {
	Count     [13]uint32
	Pos       [3 * 13]uint32
	NumStmt   [13]uint16
} {
	Pos: [3 * 13]uint32{
		28, 33, 0x2004d, // [0]
		36, 38, 0x2003f, // [1]
		41, 47, 0xe0018, // [2]
		47, 50, 0x11000e, // [3]
		50, 51, 0x3c0011, // [4]
		57, 64, 0x10001c, // [5]
		68, 69, 0x100002, // [6]
		64, 65, 0x3e0010, // [7]
		69, 70, 0x3b0010, // [8]
		75, 84, 0x20023, // [9]
		87, 91, 0x100021, // [10]
		94, 95, 0x140002, // [11]
		91, 92, 0x270010, // [12]
	},
	NumStmt: [13]uint16{
		1, // 0
		1, // 1
		6, // 2
		3, // 3
		1, // 4
		6, // 5
		2, // 6
		1, // 7
		1, // 8
		7, // 9
		4, // 10
		2, // 11
		1, // 12
	},
}
var _ = _cover_atomic_.LoadUint32
