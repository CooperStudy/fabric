//line /home/cooper/go/src/github.com/hyperledger/fabric/core/handlers/validation/builtin/v13/lscc_validation_logic.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package v13; import _cover_atomic_ "sync/atomic"

import (
	"bytes"
	"fmt"

	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/common/channelconfig"
	commonerrors "github.com/hyperledger/fabric/common/errors"
	"github.com/hyperledger/fabric/core/chaincode/platforms"
	"github.com/hyperledger/fabric/core/chaincode/platforms/car"
	"github.com/hyperledger/fabric/core/chaincode/platforms/ccmetadata"
	"github.com/hyperledger/fabric/core/chaincode/platforms/golang"
	"github.com/hyperledger/fabric/core/chaincode/platforms/java"
	"github.com/hyperledger/fabric/core/chaincode/platforms/node"
	"github.com/hyperledger/fabric/core/common/ccprovider"
	"github.com/hyperledger/fabric/core/common/privdata"
	. "github.com/hyperledger/fabric/core/handlers/validation/api/state"
	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/rwsetutil"
	"github.com/hyperledger/fabric/core/scc/lscc"
	"github.com/hyperledger/fabric/protos/common"
	"github.com/hyperledger/fabric/protos/ledger/rwset/kvrwset"
	pb "github.com/hyperledger/fabric/protos/peer"
	"github.com/hyperledger/fabric/protos/utils"
	"github.com/pkg/errors"
)

// checkInstantiationPolicy evaluates an instantiation policy against a signed proposal
func (vscc *Validator) checkInstantiationPolicy(chainName string, env *common.Envelope, instantiationPolicy []byte, payl *common.Payload) commonerrors.TxValidationError {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[0], 1);
	// get the signature header
	shdr, err := utils.GetSignatureHeader(payl.Header.SignatureHeader)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[3], 1);
		return policyErr(err)
	}

	// construct signed data we can evaluate the instantiation policy against
	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[1], 1);sd := []*common.SignedData{{
		Data:      env.Payload,
		Identity:  shdr.Creator,
		Signature: env.Signature,
	}}
	err = vscc.policyEvaluator.Evaluate(instantiationPolicy, sd)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[4], 1);
		return policyErr(fmt.Errorf("chaincode instantiation policy violated, error %s", err))
	}
	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[2], 1);return nil
}

func validateNewCollectionConfigs(newCollectionConfigs []*common.CollectionConfig) error {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[5], 1);
	newCollectionsMap := make(map[string]bool, len(newCollectionConfigs))
	// Process each collection config from a set of collection configs
	for _, newCollectionConfig := range newCollectionConfigs {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[7], 1);

		newCollection := newCollectionConfig.GetStaticCollectionConfig()
		if newCollection == nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[13], 1);
			return errors.New("unknown collection configuration type")
		}

		// Ensure that there are no duplicate collection names
		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[8], 1);collectionName := newCollection.GetName()

		if err := validateCollectionName(collectionName); err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[14], 1);
			return err
		}

		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[9], 1);if _, ok := newCollectionsMap[collectionName]; !ok {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[15], 1);
			newCollectionsMap[collectionName] = true
		} else{ _cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[16], 1);{
			return fmt.Errorf("collection-name: %s -- found duplicate collection configuration", collectionName)
		}}

		// Validate gossip related parameters present in the collection config
		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[10], 1);maximumPeerCount := newCollection.GetMaximumPeerCount()
		requiredPeerCount := newCollection.GetRequiredPeerCount()
		if maximumPeerCount < requiredPeerCount {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[17], 1);
			return fmt.Errorf("collection-name: %s -- maximum peer count (%d) cannot be greater than the required peer count (%d)",
				collectionName, maximumPeerCount, requiredPeerCount)

		}
		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[11], 1);if requiredPeerCount < 0 {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[18], 1);
			return fmt.Errorf("collection-name: %s -- requiredPeerCount (%d) cannot be less than zero (%d)",
				collectionName, maximumPeerCount, requiredPeerCount)

		}

		// make sure that the signature policy is meaningful (only consists of ORs)
		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[12], 1);err := validateSpOrConcat(newCollection.MemberOrgsPolicy.GetSignaturePolicy().Rule)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[19], 1);
			return errors.WithMessage(err, fmt.Sprintf("collection-name: %s -- error in member org policy", collectionName))
		}
	}
	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[6], 1);return nil
}

// validateSpOrConcat checks if the supplied signature policy is just an OR-concatenation of identities
func validateSpOrConcat(sp *common.SignaturePolicy) error {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[20], 1);
	if sp.GetNOutOf() == nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[24], 1);
		return nil
	}
	// check if N == 1 (OR concatenation)
	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[21], 1);if sp.GetNOutOf().N != 1 {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[25], 1);
		return errors.New(fmt.Sprintf("signature policy is not an OR concatenation, NOutOf %d", sp.GetNOutOf().N))
	}
	// recurse into all sub-rules
	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[22], 1);for _, rule := range sp.GetNOutOf().Rules {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[26], 1);
		err := validateSpOrConcat(rule)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[27], 1);
			return err
		}
	}
	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[23], 1);return nil
}

func checkForMissingCollections(newCollectionsMap map[string]*common.StaticCollectionConfig, oldCollectionConfigs []*common.CollectionConfig,
) error {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[28], 1);
	var missingCollections []string

	// In the new collection config package, ensure that there is one entry per old collection. Any
	// number of new collections are allowed.
	for _, oldCollectionConfig := range oldCollectionConfigs {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[31], 1);

		oldCollection := oldCollectionConfig.GetStaticCollectionConfig()
		// It cannot be nil
		if oldCollection == nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[33], 1);
			return policyErr(fmt.Errorf("unknown collection configuration type"))
		}

		// All old collection must exist in the new collection config package
		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[32], 1);oldCollectionName := oldCollection.GetName()
		_, ok := newCollectionsMap[oldCollectionName]
		if !ok {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[34], 1);
			missingCollections = append(missingCollections, oldCollectionName)
		}
	}

	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[29], 1);if len(missingCollections) > 0 {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[35], 1);
		return policyErr(fmt.Errorf("the following existing collections are missing in the new collection configuration package: %v",
			missingCollections))
	}

	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[30], 1);return nil
}

func checkForModifiedCollectionsBTL(newCollectionsMap map[string]*common.StaticCollectionConfig, oldCollectionConfigs []*common.CollectionConfig,
) error {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[36], 1);
	var modifiedCollectionsBTL []string

	// In the new collection config package, ensure that the block to live value is not
	// modified for the existing collections.
	for _, oldCollectionConfig := range oldCollectionConfigs {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[39], 1);

		oldCollection := oldCollectionConfig.GetStaticCollectionConfig()
		// It cannot be nil
		if oldCollection == nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[41], 1);
			return policyErr(fmt.Errorf("unknown collection configuration type"))
		}

		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[40], 1);oldCollectionName := oldCollection.GetName()
		newCollection, _ := newCollectionsMap[oldCollectionName]
		// BlockToLive cannot be changed
		if newCollection.GetBlockToLive() != oldCollection.GetBlockToLive() {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[42], 1);
			modifiedCollectionsBTL = append(modifiedCollectionsBTL, oldCollectionName)
		}
	}

	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[37], 1);if len(modifiedCollectionsBTL) > 0 {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[43], 1);
		return policyErr(fmt.Errorf("the BlockToLive in the following existing collections must not be modified: %v",
			modifiedCollectionsBTL))
	}

	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[38], 1);return nil
}

func validateNewCollectionConfigsAgainstOld(newCollectionConfigs []*common.CollectionConfig, oldCollectionConfigs []*common.CollectionConfig,
) error {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[44], 1);
	newCollectionsMap := make(map[string]*common.StaticCollectionConfig, len(newCollectionConfigs))

	for _, newCollectionConfig := range newCollectionConfigs {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[48], 1);
		newCollection := newCollectionConfig.GetStaticCollectionConfig()
		// Collection object itself is stored as value so that we can
		// check whether the block to live is changed -- FAB-7810
		newCollectionsMap[newCollection.GetName()] = newCollection
	}

	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[45], 1);if err := checkForMissingCollections(newCollectionsMap, oldCollectionConfigs); err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[49], 1);
		return err
	}

	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[46], 1);if err := checkForModifiedCollectionsBTL(newCollectionsMap, oldCollectionConfigs); err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[50], 1);
		return err
	}

	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[47], 1);return nil
}

func validateCollectionName(collectionName string) error {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[51], 1);
	if collectionName == "" {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[54], 1);
		return fmt.Errorf("empty collection-name is not allowed")
	}
	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[52], 1);match := validCollectionNameRegex.FindString(collectionName)
	if len(match) != len(collectionName) {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[55], 1);
		return fmt.Errorf("collection-name: %s not allowed. A valid collection name follows the pattern: %s",
			collectionName, ccmetadata.AllowedCharsCollectionName)
	}
	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[53], 1);return nil
}

// validateRWSetAndCollection performs validation of the rwset
// of an LSCC deploy operation and then it validates any collection
// configuration
func (vscc *Validator) validateRWSetAndCollection(
	lsccrwset *kvrwset.KVRWSet,
	cdRWSet *ccprovider.ChaincodeData,
	lsccArgs [][]byte,
	lsccFunc string,
	ac channelconfig.ApplicationCapabilities,
	channelName string,
) commonerrors.TxValidationError {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[56], 1);
	/********************************************/
	/* security check 0.a - validation of rwset */
	/********************************************/
	// there can only be one or two writes
	if len(lsccrwset.Writes) > 2 {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[65], 1);
		return policyErr(fmt.Errorf("LSCC can only issue one or two putState upon deploy"))
	}

	/**********************************************************/
	/* security check 0.b - validation of the collection data */
	/**********************************************************/
	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[57], 1);var collectionsConfigArg []byte
	if len(lsccArgs) > 5 {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[66], 1);
		collectionsConfigArg = lsccArgs[5]
	}

	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[58], 1);var collectionsConfigLedger []byte
	if len(lsccrwset.Writes) == 2 {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[67], 1);
		key := privdata.BuildCollectionKVSKey(cdRWSet.Name)
		if lsccrwset.Writes[1].Key != key {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[69], 1);
			return policyErr(fmt.Errorf("invalid key for the collection of chaincode %s:%s; expected '%s', received '%s'",
				cdRWSet.Name, cdRWSet.Version, key, lsccrwset.Writes[1].Key))

		}

		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[68], 1);collectionsConfigLedger = lsccrwset.Writes[1].Value
	}

	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[59], 1);if !bytes.Equal(collectionsConfigArg, collectionsConfigLedger) {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[70], 1);
		return policyErr(fmt.Errorf("collection configuration arguments supplied for chaincode %s:%s do not match the configuration in the lscc writeset",
			cdRWSet.Name, cdRWSet.Version))

	}

	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[60], 1);channelState, err := vscc.stateFetcher.FetchState()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[71], 1);
		return &commonerrors.VSCCExecutionFailureError{Err: fmt.Errorf("failed obtaining query executor: %v", err)}
	}
	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[61], 1);defer channelState.Done()

	state := &state{channelState}

	// The following condition check added in v1.1 may not be needed as it is not possible to have the chaincodeName~collection key in
	// the lscc namespace before a chaincode deploy. To avoid forks in v1.2, the following condition is retained.
	if lsccFunc == lscc.DEPLOY {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[72], 1);
		colCriteria := common.CollectionCriteria{Channel: channelName, Namespace: cdRWSet.Name}
		ccp, err := privdata.RetrieveCollectionConfigPackageFromState(colCriteria, state)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[74], 1);
			// fail if we get any error other than NoSuchCollectionError
			// because it means something went wrong while looking up the
			// older collection
			if _, ok := err.(privdata.NoSuchCollectionError); !ok {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[75], 1);
				return &commonerrors.VSCCExecutionFailureError{Err: fmt.Errorf("unable to check whether collection existed earlier for chaincode %s:%s",
					cdRWSet.Name, cdRWSet.Version),
				}
			}
		}
		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[73], 1);if ccp != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[76], 1);
			return policyErr(fmt.Errorf("collection data should not exist for chaincode %s:%s", cdRWSet.Name, cdRWSet.Version))
		}
	}

	// TODO: Once the new chaincode lifecycle is available (FAB-8724), the following validation
	// and other validation performed in ValidateLSCCInvocation can be moved to LSCC itself.
	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[62], 1);newCollectionConfigPackage := &common.CollectionConfigPackage{}

	if collectionsConfigArg != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[77], 1);
		err := proto.Unmarshal(collectionsConfigArg, newCollectionConfigPackage)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[78], 1);
			return policyErr(fmt.Errorf("invalid collection configuration supplied for chaincode %s:%s",
				cdRWSet.Name, cdRWSet.Version))
		}
	} else{ _cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[79], 1);{
		return nil
	}}

	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[63], 1);if ac.V1_2Validation() {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[80], 1);
		newCollectionConfigs := newCollectionConfigPackage.GetConfig()
		if err := validateNewCollectionConfigs(newCollectionConfigs); err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[82], 1);
			return policyErr(err)
		}

		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[81], 1);if lsccFunc == lscc.UPGRADE {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[83], 1);

			collectionCriteria := common.CollectionCriteria{Channel: channelName, Namespace: cdRWSet.Name}
			// oldCollectionConfigPackage denotes the existing collection config package in the ledger
			oldCollectionConfigPackage, err := privdata.RetrieveCollectionConfigPackageFromState(collectionCriteria, state)
			if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[85], 1);
				// fail if we get any error other than NoSuchCollectionError
				// because it means something went wrong while looking up the
				// older collection
				if _, ok := err.(privdata.NoSuchCollectionError); !ok {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[86], 1);
					return &commonerrors.VSCCExecutionFailureError{Err: fmt.Errorf("unable to check whether collection existed earlier for chaincode %s:%s: %v",
						cdRWSet.Name, cdRWSet.Version, err),
					}
				}
			}

			// oldCollectionConfigPackage denotes the existing collection config package in the ledger
			_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[84], 1);if oldCollectionConfigPackage != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[87], 1);
				oldCollectionConfigs := oldCollectionConfigPackage.GetConfig()
				if err := validateNewCollectionConfigsAgainstOld(newCollectionConfigs, oldCollectionConfigs); err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[88], 1);
					return policyErr(err)
				}

			}
		}
	}

	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[64], 1);return nil
}

func (vscc *Validator) ValidateLSCCInvocation(
	chid string,
	env *common.Envelope,
	cap *pb.ChaincodeActionPayload,
	payl *common.Payload,
	ac channelconfig.ApplicationCapabilities,
) commonerrors.TxValidationError {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[89], 1);
	cpp, err := utils.GetChaincodeProposalPayload(cap.ChaincodeProposalPayload)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[93], 1);
		logger.Errorf("VSCC error: GetChaincodeProposalPayload failed, err %s", err)
		return policyErr(err)
	}

	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[90], 1);cis := &pb.ChaincodeInvocationSpec{}
	err = proto.Unmarshal(cpp.Input, cis)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[94], 1);
		logger.Errorf("VSCC error: Unmarshal ChaincodeInvocationSpec failed, err %s", err)
		return policyErr(err)
	}

	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[91], 1);if cis.ChaincodeSpec == nil ||
		cis.ChaincodeSpec.Input == nil ||
		cis.ChaincodeSpec.Input.Args == nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[95], 1);
		logger.Errorf("VSCC error: committing invalid vscc invocation")
		return policyErr(fmt.Errorf("malformed chaincode invocation spec"))
	}

	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[92], 1);lsccFunc := string(cis.ChaincodeSpec.Input.Args[0])
	lsccArgs := cis.ChaincodeSpec.Input.Args[1:]

	logger.Debugf("VSCC info: ValidateLSCCInvocation acting on %s %#v", lsccFunc, lsccArgs)

	switch lsccFunc {
	case lscc.UPGRADE, lscc.DEPLOY:_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[96], 1);
		logger.Debugf("VSCC info: validating invocation of lscc function %s on arguments %#v", lsccFunc, lsccArgs)

		if len(lsccArgs) < 2 {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[116], 1);
			return policyErr(fmt.Errorf("Wrong number of arguments for invocation lscc(%s): expected at least 2, received %d", lsccFunc, len(lsccArgs)))
		}

		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[97], 1);if (!ac.PrivateChannelData() && len(lsccArgs) > 5) ||
			(ac.PrivateChannelData() && len(lsccArgs) > 6) {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[117], 1);
			return policyErr(fmt.Errorf("Wrong number of arguments for invocation lscc(%s): received %d", lsccFunc, len(lsccArgs)))
		}

		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[98], 1);cdsArgs, err := utils.GetChaincodeDeploymentSpec(lsccArgs[1], platforms.NewRegistry(
			// XXX We should definitely _not_ have this external dependency in VSCC
			// as adding a platform could cause non-determinism.  This is yet another
			// reason why all of this custom LSCC validation at commit time has no
			// long term hope of staying deterministic and needs to be removed.
			&golang.Platform{},
			&node.Platform{},
			&java.Platform{},
			&car.Platform{},
		))

		if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[118], 1);
			return policyErr(fmt.Errorf("GetChaincodeDeploymentSpec error %s", err))
		}

		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[99], 1);if cdsArgs == nil || cdsArgs.ChaincodeSpec == nil || cdsArgs.ChaincodeSpec.ChaincodeId == nil ||
			cap.Action == nil || cap.Action.ProposalResponsePayload == nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[119], 1);
			return policyErr(fmt.Errorf("VSCC error: invocation of lscc(%s) does not have appropriate arguments", lsccFunc))
		}

		// get the rwset
		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[100], 1);pRespPayload, err := utils.GetProposalResponsePayload(cap.Action.ProposalResponsePayload)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[120], 1);
			return policyErr(fmt.Errorf("GetProposalResponsePayload error %s", err))
		}
		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[101], 1);if pRespPayload.Extension == nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[121], 1);
			return policyErr(fmt.Errorf("nil pRespPayload.Extension"))
		}
		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[102], 1);respPayload, err := utils.GetChaincodeAction(pRespPayload.Extension)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[122], 1);
			return policyErr(fmt.Errorf("GetChaincodeAction error %s", err))
		}
		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[103], 1);txRWSet := &rwsetutil.TxRwSet{}
		if err = txRWSet.FromProtoBytes(respPayload.Results); err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[123], 1);
			return policyErr(fmt.Errorf("txRWSet.FromProtoBytes error %s", err))
		}

		// extract the rwset for lscc
		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[104], 1);var lsccrwset *kvrwset.KVRWSet
		for _, ns := range txRWSet.NsRwSets {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[124], 1);
			logger.Debugf("Namespace %s", ns.NameSpace)
			if ns.NameSpace == "lscc" {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[125], 1);
				lsccrwset = ns.KvRwSet
				break
			}
		}

		// retrieve from the ledger the entry for the chaincode at hand
		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[105], 1);cdLedger, ccExistsOnLedger, err := vscc.getInstantiatedCC(chid, cdsArgs.ChaincodeSpec.ChaincodeId.Name)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[126], 1);
			return &commonerrors.VSCCExecutionFailureError{Err: err}
		}

		/******************************************/
		/* security check 0 - validation of rwset */
		/******************************************/
		// there has to be a write-set
		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[106], 1);if lsccrwset == nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[127], 1);
			return policyErr(fmt.Errorf("No read write set for lscc was found"))
		}
		// there must be at least one write
		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[107], 1);if len(lsccrwset.Writes) < 1 {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[128], 1);
			return policyErr(fmt.Errorf("LSCC must issue at least one single putState upon deploy/upgrade"))
		}
		// the first key name must be the chaincode id provided in the deployment spec
		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[108], 1);if lsccrwset.Writes[0].Key != cdsArgs.ChaincodeSpec.ChaincodeId.Name {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[129], 1);
			return policyErr(fmt.Errorf("expected key %s, found %s", cdsArgs.ChaincodeSpec.ChaincodeId.Name, lsccrwset.Writes[0].Key))
		}
		// the value must be a ChaincodeData struct
		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[109], 1);cdRWSet := &ccprovider.ChaincodeData{}
		err = proto.Unmarshal(lsccrwset.Writes[0].Value, cdRWSet)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[130], 1);
			return policyErr(fmt.Errorf("unmarhsalling of ChaincodeData failed, error %s", err))
		}
		// the chaincode name in the lsccwriteset must match the chaincode name in the deployment spec
		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[110], 1);if cdRWSet.Name != cdsArgs.ChaincodeSpec.ChaincodeId.Name {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[131], 1);
			return policyErr(fmt.Errorf("expected cc name %s, found %s", cdsArgs.ChaincodeSpec.ChaincodeId.Name, cdRWSet.Name))
		}
		// the chaincode version in the lsccwriteset must match the chaincode version in the deployment spec
		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[111], 1);if cdRWSet.Version != cdsArgs.ChaincodeSpec.ChaincodeId.Version {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[132], 1);
			return policyErr(fmt.Errorf("expected cc version %s, found %s", cdsArgs.ChaincodeSpec.ChaincodeId.Version, cdRWSet.Version))
		}
		// it must only write to 2 namespaces: LSCC's and the cc that we are deploying/upgrading
		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[112], 1);for _, ns := range txRWSet.NsRwSets {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[133], 1);
			if ns.NameSpace != "lscc" && ns.NameSpace != cdRWSet.Name && len(ns.KvRwSet.Writes) > 0 {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[134], 1);
				return policyErr(fmt.Errorf("LSCC invocation is attempting to write to namespace %s", ns.NameSpace))
			}
		}

		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[113], 1);logger.Debugf("Validating %s for cc %s version %s", lsccFunc, cdRWSet.Name, cdRWSet.Version)

		switch lsccFunc {
		case lscc.DEPLOY:_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[135], 1);

			/******************************************************************/
			/* security check 1 - cc not in the LCCC table of instantiated cc */
			/******************************************************************/
			if ccExistsOnLedger {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[145], 1);
				return policyErr(fmt.Errorf("Chaincode %s is already instantiated", cdsArgs.ChaincodeSpec.ChaincodeId.Name))
			}

			/****************************************************************************/
			/* security check 2 - validation of rwset (and of collections if enabled) */
			/****************************************************************************/
			_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[136], 1);if ac.PrivateChannelData() {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[146], 1);
				// do extra validation for collections
				err := vscc.validateRWSetAndCollection(lsccrwset, cdRWSet, lsccArgs, lsccFunc, ac, chid)
				if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[147], 1);
					return err
				}
			} else{ _cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[148], 1);{
				// there can only be a single ledger write
				if len(lsccrwset.Writes) != 1 {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[149], 1);
					return policyErr(fmt.Errorf("LSCC can only issue a single putState upon deploy"))
				}
			}}

			/*****************************************************/
			/* security check 3 - check the instantiation policy */
			/*****************************************************/
			_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[137], 1);pol := cdRWSet.InstantiationPolicy
			if pol == nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[150], 1);
				return policyErr(fmt.Errorf("no instantiation policy was specified"))
			}
			// FIXME: could we actually pull the cds package from the
			// file system to verify whether the policy that is specified
			// here is the same as the one on disk?
			// PROS: we prevent attacks where the policy is replaced
			// CONS: this would be a point of non-determinism
			_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[138], 1);err := vscc.checkInstantiationPolicy(chid, env, pol, payl)
			if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[151], 1);
				return err
			}

		case lscc.UPGRADE:_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[139], 1);
			/**************************************************************/
			/* security check 1 - cc in the LCCC table of instantiated cc */
			/**************************************************************/
			if !ccExistsOnLedger {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[152], 1);
				return policyErr(fmt.Errorf("Upgrading non-existent chaincode %s", cdsArgs.ChaincodeSpec.ChaincodeId.Name))
			}

			/**********************************************************/
			/* security check 2 - existing cc's version was different */
			/**********************************************************/
			_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[140], 1);if cdLedger.Version == cdsArgs.ChaincodeSpec.ChaincodeId.Version {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[153], 1);
				return policyErr(fmt.Errorf("Existing version of the cc on the ledger (%s) should be different from the upgraded one", cdsArgs.ChaincodeSpec.ChaincodeId.Version))
			}

			/****************************************************************************/
			/* security check 3 validation of rwset (and of collections if enabled) */
			/****************************************************************************/
			// Only in v1.2, a collection can be updated during a chaincode upgrade
			_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[141], 1);if ac.V1_2Validation() {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[154], 1);
				// do extra validation for collections
				err := vscc.validateRWSetAndCollection(lsccrwset, cdRWSet, lsccArgs, lsccFunc, ac, chid)
				if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[155], 1);
					return err
				}
			} else{ _cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[156], 1);{
				// there can only be a single ledger write
				if len(lsccrwset.Writes) != 1 {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[157], 1);
					return policyErr(fmt.Errorf("LSCC can only issue a single putState upon upgrade"))
				}
			}}

			/*****************************************************/
			/* security check 4 - check the instantiation policy */
			/*****************************************************/
			_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[142], 1);pol := cdLedger.InstantiationPolicy
			if pol == nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[158], 1);
				return policyErr(fmt.Errorf("No instantiation policy was specified"))
			}
			// FIXME: could we actually pull the cds package from the
			// file system to verify whether the policy that is specified
			// here is the same as the one on disk?
			// PROS: we prevent attacks where the policy is replaced
			// CONS: this would be a point of non-determinism
			_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[143], 1);err := vscc.checkInstantiationPolicy(chid, env, pol, payl)
			if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[159], 1);
				return err
			}

			/******************************************************************/
			/* security check 5 - check the instantiation policy in the rwset */
			/******************************************************************/
			_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[144], 1);if ac.V1_1Validation() {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[160], 1);
				polNew := cdRWSet.InstantiationPolicy
				if polNew == nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[162], 1);
					return policyErr(fmt.Errorf("No instantiation policy was specified"))
				}

				// no point in checking it again if they are the same policy
				_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[161], 1);if !bytes.Equal(polNew, pol) {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[163], 1);
					err = vscc.checkInstantiationPolicy(chid, env, polNew, payl)
					if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[164], 1);
						return err
					}
				}
			}
		}

		// all is good!
		_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[114], 1);return nil
	default:_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[115], 1);
		return policyErr(fmt.Errorf("VSCC error: committing an invocation of function %s of lscc is invalid", lsccFunc))
	}
}

func (vscc *Validator) getInstantiatedCC(chid, ccid string) (cd *ccprovider.ChaincodeData, exists bool, err error) {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[165], 1);
	qe, err := vscc.stateFetcher.FetchState()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[170], 1);
		err = fmt.Errorf("could not retrieve QueryExecutor for channel %s, error %s", chid, err)
		return
	}
	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[166], 1);defer qe.Done()
	channelState := &state{qe}
	bytes, err := channelState.GetState("lscc", ccid)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[171], 1);
		err = fmt.Errorf("could not retrieve state for chaincode %s on channel %s, error %s", ccid, chid, err)
		return
	}

	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[167], 1);if bytes == nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[172], 1);
		return
	}

	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[168], 1);cd = &ccprovider.ChaincodeData{}
	err = proto.Unmarshal(bytes, cd)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[173], 1);
		err = fmt.Errorf("unmarshalling ChaincodeQueryResponse failed, error %s", err)
		return
	}

	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[169], 1);exists = true
	return
}

type state struct {
	State
}

// GetState retrieves the value for the given key in the given namespace
func (s *state) GetState(namespace string, key string) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[174], 1);
	values, err := s.GetStateMultipleKeys(namespace, []string{key})
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[177], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[175], 1);if len(values) == 0 {_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[178], 1);
		return nil, nil
	}
	_cover_atomic_.AddUint32(&GoCover_0_333464623263633231393534.Count[176], 1);return values[0], nil
}

var GoCover_0_333464623263633231393534 = struct {
	Count     [179]uint32
	Pos       [3 * 179]uint32
	NumStmt   [179]uint16
} {
	Pos: [3 * 179]uint32{
		35, 38, 0x1000aa, // [0]
		43, 49, 0x100002, // [1]
		52, 52, 0xc0002, // [2]
		38, 40, 0x30010, // [3]
		49, 51, 0x30010, // [4]
		55, 58, 0x3b005a, // [5]
		98, 98, 0xc0002, // [6]
		58, 61, 0x1b003b, // [7]
		66, 68, 0x400003, // [8]
		72, 72, 0x360003, // [9]
		79, 81, 0x2b0003, // [10]
		86, 86, 0x1c0003, // [11]
		93, 94, 0x110003, // [12]
		61, 63, 0x4001b, // [13]
		68, 70, 0x40040, // [14]
		72, 74, 0x40036, // [15]
		74, 76, 0x40009, // [16]
		81, 85, 0x4002b, // [17]
		86, 90, 0x4001c, // [18]
		94, 96, 0x40011, // [19]
		102, 103, 0x1b003b, // [20]
		107, 107, 0x1b0002, // [21]
		111, 111, 0x2c0002, // [22]
		117, 117, 0xc0002, // [23]
		103, 105, 0x3001b, // [24]
		107, 109, 0x3001b, // [25]
		111, 113, 0x11002c, // [26]
		113, 115, 0x40011, // [27]
		121, 126, 0x3b0009, // [28]
		142, 142, 0x210002, // [29]
		147, 147, 0xc0002, // [30]
		126, 130, 0x1b003b, // [31]
		135, 137, 0xa0003, // [32]
		130, 132, 0x4001b, // [33]
		137, 139, 0x4000a, // [34]
		142, 145, 0x30021, // [35]
		151, 156, 0x3b0009, // [36]
		172, 172, 0x250002, // [37]
		177, 177, 0xc0002, // [38]
		156, 160, 0x1b003b, // [39]
		164, 167, 0x470003, // [40]
		160, 162, 0x4001b, // [41]
		167, 169, 0x40047, // [42]
		172, 175, 0x30025, // [43]
		181, 184, 0x3b0009, // [44]
		191, 191, 0x5c0002, // [45]
		195, 195, 0x600002, // [46]
		199, 199, 0xc0002, // [47]
		184, 189, 0x3003b, // [48]
		191, 193, 0x3005c, // [49]
		195, 197, 0x30060, // [50]
		202, 203, 0x1a003a, // [51]
		206, 207, 0x270002, // [52]
		211, 211, 0xc0002, // [53]
		203, 205, 0x3001a, // [54]
		207, 210, 0x30027, // [55]
		224, 229, 0x1f0022, // [56]
		236, 237, 0x170002, // [57]
		241, 242, 0x200002, // [58]
		253, 253, 0x410002, // [59]
		259, 260, 0x100002, // [60]
		263, 269, 0x1d0002, // [61]
		289, 291, 0x210002, // [62]
		301, 301, 0x190002, // [63]
		334, 334, 0xc0002, // [64]
		229, 231, 0x3001f, // [65]
		237, 239, 0x30017, // [66]
		242, 244, 0x250020, // [67]
		250, 250, 0x360003, // [68]
		244, 248, 0x40025, // [69]
		253, 257, 0x30041, // [70]
		260, 262, 0x30010, // [71]
		269, 272, 0x11001d, // [72]
		282, 282, 0x110003, // [73]
		272, 276, 0x3a0011, // [74]
		276, 280, 0x5003a, // [75]
		282, 284, 0x40011, // [76]
		291, 293, 0x110021, // [77]
		293, 296, 0x40011, // [78]
		297, 299, 0x30008, // [79]
		301, 303, 0x4c0019, // [80]
		307, 307, 0x1f0003, // [81]
		303, 305, 0x4004c, // [82]
		307, 312, 0x12001f, // [83]
		324, 324, 0x290004, // [84]
		312, 316, 0x3b0012, // [85]
		316, 320, 0x6003b, // [86]
		324, 326, 0x6e0029, // [87]
		326, 328, 0x6006e, // [88]
		343, 345, 0x100022, // [89]
		350, 352, 0x100002, // [90]
		357, 359, 0x270002, // [91]
		364, 369, 0x120002, // [92]
		345, 348, 0x30010, // [93]
		352, 355, 0x30010, // [94]
		359, 362, 0x30027, // [95]
		370, 373, 0x180021, // [96]
		377, 378, 0x330003, // [97]
		382, 393, 0x110003, // [98]
		397, 398, 0x430003, // [99]
		403, 404, 0x110003, // [100]
		407, 407, 0x240003, // [101]
		410, 411, 0x110003, // [102]
		414, 415, 0x440003, // [103]
		420, 421, 0x270003, // [104]
		430, 431, 0x110003, // [105]
		439, 439, 0x170003, // [106]
		443, 443, 0x200003, // [107]
		447, 447, 0x480003, // [108]
		451, 453, 0x110003, // [109]
		457, 457, 0x3d0003, // [110]
		461, 461, 0x430003, // [111]
		465, 465, 0x270003, // [112]
		471, 473, 0x130003, // [113]
		585, 585, 0xd0003, // [114]
		586, 587, 0x73000a, // [115]
		373, 375, 0x40018, // [116]
		378, 380, 0x40033, // [117]
		393, 395, 0x40011, // [118]
		398, 400, 0x40043, // [119]
		404, 406, 0x40011, // [120]
		407, 409, 0x40024, // [121]
		411, 413, 0x40011, // [122]
		415, 417, 0x40044, // [123]
		421, 423, 0x1e0027, // [124]
		423, 425, 0xa001e, // [125]
		431, 433, 0x40011, // [126]
		439, 441, 0x40017, // [127]
		443, 445, 0x40020, // [128]
		447, 449, 0x40048, // [129]
		453, 455, 0x40011, // [130]
		457, 459, 0x4003d, // [131]
		461, 463, 0x40043, // [132]
		465, 466, 0x5c0027, // [133]
		466, 468, 0x5005c, // [134]
		474, 479, 0x180014, // [135]
		486, 486, 0x1f0004, // [136]
		502, 503, 0x120004, // [137]
		511, 512, 0x120004, // [138]
		516, 520, 0x190015, // [139]
		527, 527, 0x450004, // [140]
		535, 535, 0x1b0004, // [141]
		551, 552, 0x120004, // [142]
		560, 561, 0x120004, // [143]
		568, 568, 0x1b0004, // [144]
		479, 481, 0x50018, // [145]
		486, 489, 0x13001f, // [146]
		489, 491, 0x60013, // [147]
		492, 494, 0x23000a, // [148]
		494, 496, 0x60023, // [149]
		503, 505, 0x50012, // [150]
		512, 514, 0x50012, // [151]
		520, 522, 0x50019, // [152]
		527, 529, 0x50045, // [153]
		535, 538, 0x13001b, // [154]
		538, 540, 0x60013, // [155]
		541, 543, 0x23000a, // [156]
		543, 545, 0x60023, // [157]
		552, 554, 0x50012, // [158]
		561, 563, 0x50012, // [159]
		568, 570, 0x16001b, // [160]
		575, 575, 0x220005, // [161]
		570, 572, 0x60016, // [162]
		575, 577, 0x140022, // [163]
		577, 579, 0x70014, // [164]
		591, 593, 0x100074, // [165]
		597, 600, 0x100002, // [166]
		605, 605, 0x120002, // [167]
		609, 611, 0x100002, // [168]
		616, 617, 0x80002, // [169]
		593, 596, 0x30010, // [170]
		600, 603, 0x30010, // [171]
		605, 607, 0x30012, // [172]
		611, 614, 0x30010, // [173]
		625, 627, 0x100048, // [174]
		630, 630, 0x160002, // [175]
		633, 633, 0x170002, // [176]
		627, 629, 0x30010, // [177]
		630, 632, 0x30016, // [178]
	},
	NumStmt: [179]uint16{
		2, // 0
		3, // 1
		1, // 2
		1, // 3
		1, // 4
		2, // 5
		1, // 6
		2, // 7
		2, // 8
		1, // 9
		3, // 10
		1, // 11
		2, // 12
		1, // 13
		1, // 14
		1, // 15
		1, // 16
		1, // 17
		1, // 18
		1, // 19
		1, // 20
		1, // 21
		1, // 22
		1, // 23
		1, // 24
		1, // 25
		2, // 26
		1, // 27
		2, // 28
		1, // 29
		1, // 30
		2, // 31
		3, // 32
		1, // 33
		1, // 34
		1, // 35
		2, // 36
		1, // 37
		1, // 38
		2, // 39
		3, // 40
		1, // 41
		1, // 42
		1, // 43
		2, // 44
		1, // 45
		1, // 46
		1, // 47
		2, // 48
		1, // 49
		1, // 50
		1, // 51
		2, // 52
		1, // 53
		1, // 54
		1, // 55
		1, // 56
		2, // 57
		2, // 58
		1, // 59
		2, // 60
		3, // 61
		2, // 62
		1, // 63
		1, // 64
		1, // 65
		1, // 66
		2, // 67
		1, // 68
		1, // 69
		1, // 70
		1, // 71
		3, // 72
		1, // 73
		1, // 74
		1, // 75
		1, // 76
		2, // 77
		1, // 78
		1, // 79
		2, // 80
		1, // 81
		1, // 82
		3, // 83
		1, // 84
		1, // 85
		1, // 86
		2, // 87
		1, // 88
		2, // 89
		3, // 90
		1, // 91
		4, // 92
		2, // 93
		2, // 94
		2, // 95
		2, // 96
		1, // 97
		2, // 98
		1, // 99
		2, // 100
		1, // 101
		2, // 102
		2, // 103
		2, // 104
		2, // 105
		1, // 106
		1, // 107
		1, // 108
		3, // 109
		1, // 110
		1, // 111
		1, // 112
		2, // 113
		1, // 114
		1, // 115
		1, // 116
		1, // 117
		1, // 118
		1, // 119
		1, // 120
		1, // 121
		1, // 122
		1, // 123
		2, // 124
		2, // 125
		1, // 126
		1, // 127
		1, // 128
		1, // 129
		1, // 130
		1, // 131
		1, // 132
		1, // 133
		1, // 134
		1, // 135
		1, // 136
		2, // 137
		2, // 138
		1, // 139
		1, // 140
		1, // 141
		2, // 142
		2, // 143
		1, // 144
		1, // 145
		2, // 146
		1, // 147
		1, // 148
		1, // 149
		1, // 150
		1, // 151
		1, // 152
		1, // 153
		2, // 154
		1, // 155
		1, // 156
		1, // 157
		1, // 158
		1, // 159
		2, // 160
		1, // 161
		1, // 162
		2, // 163
		1, // 164
		2, // 165
		4, // 166
		1, // 167
		3, // 168
		2, // 169
		2, // 170
		2, // 171
		1, // 172
		2, // 173
		2, // 174
		1, // 175
		1, // 176
		1, // 177
		1, // 178
	},
}
var _ = _cover_atomic_.LoadUint32
