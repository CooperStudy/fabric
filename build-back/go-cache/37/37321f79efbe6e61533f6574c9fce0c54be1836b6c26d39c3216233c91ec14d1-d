//line /home/cooper/go/src/github.com/hyperledger/fabric/common/channelconfig/util.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package channelconfig; import _cover_atomic_ "sync/atomic"

import (
	"math"

	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/bccsp"
	cb "github.com/hyperledger/fabric/protos/common"
	mspprotos "github.com/hyperledger/fabric/protos/msp"
	ab "github.com/hyperledger/fabric/protos/orderer"
	pb "github.com/hyperledger/fabric/protos/peer"
)

const (
	// ReadersPolicyKey is the key used for the read policy
	ReadersPolicyKey = "Readers"

	// WritersPolicyKey is the key used for the read policy
	WritersPolicyKey = "Writers"

	// AdminsPolicyKey is the key used for the read policy
	AdminsPolicyKey = "Admins"

	defaultHashingAlgorithm = bccsp.SHA256

	defaultBlockDataHashingStructureWidth = math.MaxUint32
)

// ConfigValue defines a common representation for different *cb.ConfigValue values.
type ConfigValue interface {
	// Key is the key this value should be stored in the *cb.ConfigGroup.Values map.
	Key() string

	// Value is the message which should be marshaled to opaque bytes for the *cb.ConfigValue.value.
	Value() proto.Message
}

// StandardConfigValue implements the ConfigValue interface.
type StandardConfigValue struct {
	key   string
	value proto.Message
}

// Key is the key this value should be stored in the *cb.ConfigGroup.Values map.
func (scv *StandardConfigValue) Key() string {_cover_atomic_.AddUint32(&GoCover_14_373339383034363064316135.Count[0], 1);
	return scv.key
}

// Value is the message which should be marshaled to opaque bytes for the *cb.ConfigValue.value.
func (scv *StandardConfigValue) Value() proto.Message {_cover_atomic_.AddUint32(&GoCover_14_373339383034363064316135.Count[1], 1);
	return scv.value
}

// ConsortiumValue returns the config definition for the consortium name.
// It is a value for the channel group.
func ConsortiumValue(name string) *StandardConfigValue {_cover_atomic_.AddUint32(&GoCover_14_373339383034363064316135.Count[2], 1);
	return &StandardConfigValue{
		key: ConsortiumKey,
		value: &cb.Consortium{
			Name: name,
		},
	}
}

// HashingAlgorithm returns the only currently valid hashing algorithm.
// It is a value for the /Channel group.
func HashingAlgorithmValue() *StandardConfigValue {_cover_atomic_.AddUint32(&GoCover_14_373339383034363064316135.Count[3], 1);
	return &StandardConfigValue{
		key: HashingAlgorithmKey,
		value: &cb.HashingAlgorithm{
			Name: defaultHashingAlgorithm,
		},
	}
}

// BlockDataHashingStructureValue returns the only currently valid block data hashing structure.
// It is a value for the /Channel group.
func BlockDataHashingStructureValue() *StandardConfigValue {_cover_atomic_.AddUint32(&GoCover_14_373339383034363064316135.Count[4], 1);
	return &StandardConfigValue{
		key: BlockDataHashingStructureKey,
		value: &cb.BlockDataHashingStructure{
			Width: defaultBlockDataHashingStructureWidth,
		},
	}
}

// OrdererAddressesValue returns the a config definition for the orderer addresses.
// It is a value for the /Channel group.
func OrdererAddressesValue(addresses []string) *StandardConfigValue {_cover_atomic_.AddUint32(&GoCover_14_373339383034363064316135.Count[5], 1);
	return &StandardConfigValue{
		key: OrdererAddressesKey,
		value: &cb.OrdererAddresses{
			Addresses: addresses,
		},
	}
}

// ConsensusTypeValue returns the config definition for the orderer consensus type.
// It is a value for the /Channel/Orderer group.
func ConsensusTypeValue(consensusType string, consensusMetadata []byte) *StandardConfigValue {_cover_atomic_.AddUint32(&GoCover_14_373339383034363064316135.Count[6], 1);
	return &StandardConfigValue{
		key: ConsensusTypeKey,
		value: &ab.ConsensusType{
			Type:     consensusType,
			Metadata: consensusMetadata,
		},
	}
}

// BatchSizeValue returns the config definition for the orderer batch size.
// It is a value for the /Channel/Orderer group.
func BatchSizeValue(maxMessages, absoluteMaxBytes, preferredMaxBytes uint32) *StandardConfigValue {_cover_atomic_.AddUint32(&GoCover_14_373339383034363064316135.Count[7], 1);
	return &StandardConfigValue{
		key: BatchSizeKey,
		value: &ab.BatchSize{
			MaxMessageCount:   maxMessages,
			AbsoluteMaxBytes:  absoluteMaxBytes,
			PreferredMaxBytes: preferredMaxBytes,
		},
	}
}

// BatchTimeoutValue returns the config definition for the orderer batch timeout.
// It is a value for the /Channel/Orderer group.
func BatchTimeoutValue(timeout string) *StandardConfigValue {_cover_atomic_.AddUint32(&GoCover_14_373339383034363064316135.Count[8], 1);
	return &StandardConfigValue{
		key: BatchTimeoutKey,
		value: &ab.BatchTimeout{
			Timeout: timeout,
		},
	}
}

// ChannelRestrictionsValue returns the config definition for the orderer channel restrictions.
// It is a value for the /Channel/Orderer group.
func ChannelRestrictionsValue(maxChannelCount uint64) *StandardConfigValue {_cover_atomic_.AddUint32(&GoCover_14_373339383034363064316135.Count[9], 1);
	return &StandardConfigValue{
		key: ChannelRestrictionsKey,
		value: &ab.ChannelRestrictions{
			MaxCount: maxChannelCount,
		},
	}
}

// KafkaBrokersValue returns the config definition for the addresses of the ordering service's Kafka brokers.
// It is a value for the /Channel/Orderer group.
func KafkaBrokersValue(brokers []string) *StandardConfigValue {_cover_atomic_.AddUint32(&GoCover_14_373339383034363064316135.Count[10], 1);
	return &StandardConfigValue{
		key: KafkaBrokersKey,
		value: &ab.KafkaBrokers{
			Brokers: brokers,
		},
	}
}

// MSPValue returns the config definition for an MSP.
// It is a value for the /Channel/Orderer/*, /Channel/Application/*, and /Channel/Consortiums/*/*/* groups.
func MSPValue(mspDef *mspprotos.MSPConfig) *StandardConfigValue {_cover_atomic_.AddUint32(&GoCover_14_373339383034363064316135.Count[11], 1);
	return &StandardConfigValue{
		key:   MSPKey,
		value: mspDef,
	}
}

// CapabilitiesValue returns the config definition for a a set of capabilities.
// It is a value for the /Channel/Orderer, Channel/Application/, and /Channel groups.
func CapabilitiesValue(capabilities map[string]bool) *StandardConfigValue {_cover_atomic_.AddUint32(&GoCover_14_373339383034363064316135.Count[12], 1);
	c := &cb.Capabilities{
		Capabilities: make(map[string]*cb.Capability),
	}

	for capability, required := range capabilities {_cover_atomic_.AddUint32(&GoCover_14_373339383034363064316135.Count[14], 1);
		if !required {_cover_atomic_.AddUint32(&GoCover_14_373339383034363064316135.Count[16], 1);
			continue
		}
		_cover_atomic_.AddUint32(&GoCover_14_373339383034363064316135.Count[15], 1);c.Capabilities[capability] = &cb.Capability{}
	}

	_cover_atomic_.AddUint32(&GoCover_14_373339383034363064316135.Count[13], 1);return &StandardConfigValue{
		key:   CapabilitiesKey,
		value: c,
	}
}

// AnchorPeersValue returns the config definition for an org's anchor peers.
// It is a value for the /Channel/Application/*.
func AnchorPeersValue(anchorPeers []*pb.AnchorPeer) *StandardConfigValue {_cover_atomic_.AddUint32(&GoCover_14_373339383034363064316135.Count[17], 1);
	return &StandardConfigValue{
		key:   AnchorPeersKey,
		value: &pb.AnchorPeers{AnchorPeers: anchorPeers},
	}
}

// ChannelCreationPolicyValue returns the config definition for a consortium's channel creation policy
// It is a value for the /Channel/Consortiums/*/*.
func ChannelCreationPolicyValue(policy *cb.Policy) *StandardConfigValue {_cover_atomic_.AddUint32(&GoCover_14_373339383034363064316135.Count[18], 1);
	return &StandardConfigValue{
		key:   ChannelCreationPolicyKey,
		value: policy,
	}
}

// ACLsValues returns the config definition for an applications resources based ACL definitions.
// It is a value for the /Channel/Application/.
func ACLValues(acls map[string]string) *StandardConfigValue {_cover_atomic_.AddUint32(&GoCover_14_373339383034363064316135.Count[19], 1);
	a := &pb.ACLs{
		Acls: make(map[string]*pb.APIResource),
	}

	for apiResource, policyRef := range acls {_cover_atomic_.AddUint32(&GoCover_14_373339383034363064316135.Count[21], 1);
		a.Acls[apiResource] = &pb.APIResource{PolicyRef: policyRef}
	}

	_cover_atomic_.AddUint32(&GoCover_14_373339383034363064316135.Count[20], 1);return &StandardConfigValue{
		key:   ACLsKey,
		value: a,
	}
}

var GoCover_14_373339383034363064316135 = struct {
	Count     [22]uint32
	Pos       [3 * 22]uint32
	NumStmt   [22]uint16
} {
	Pos: [3 * 22]uint32{
		51, 53, 0x2002e, // [0]
		56, 58, 0x20037, // [1]
		62, 69, 0x20038, // [2]
		73, 80, 0x20033, // [3]
		84, 91, 0x2003c, // [4]
		95, 102, 0x20045, // [5]
		106, 114, 0x2005e, // [6]
		118, 127, 0x20063, // [7]
		131, 138, 0x2003d, // [8]
		142, 149, 0x2004c, // [9]
		153, 160, 0x2003f, // [10]
		164, 169, 0x20041, // [11]
		173, 178, 0x31004b, // [12]
		185, 188, 0x30002, // [13]
		178, 179, 0x100031, // [14]
		182, 182, 0x300003, // [15]
		179, 180, 0xc0010, // [16]
		193, 198, 0x2004a, // [17]
		202, 207, 0x20049, // [18]
		211, 216, 0x2b003d, // [19]
		220, 223, 0x30002, // [20]
		216, 218, 0x3002b, // [21]
	},
	NumStmt: [22]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
		1, // 10
		1, // 11
		2, // 12
		1, // 13
		1, // 14
		1, // 15
		1, // 16
		1, // 17
		1, // 18
		2, // 19
		1, // 20
		1, // 21
	},
}
var _ = _cover_atomic_.LoadUint32
