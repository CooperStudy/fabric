//line /home/cooper/go/src/github.com/hyperledger/fabric/core/chaincode/platforms/car/platform.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package car; import _cover_atomic_ "sync/atomic"

import (
	"archive/tar"
	"bytes"
	"fmt"
	"io"
	"io/ioutil"
	"strings"

	"github.com/hyperledger/fabric/core/chaincode/platforms"
	"github.com/hyperledger/fabric/core/chaincode/platforms/util"
	cutil "github.com/hyperledger/fabric/core/container/util"
	pb "github.com/hyperledger/fabric/protos/peer"
)

// Platform for the CAR type
type Platform struct {
}

// Name returns the name of this platform
func (carPlatform *Platform) Name() string {_cover_atomic_.AddUint32(&GoCover_1_666530646566303562376539.Count[0], 1);
	return pb.ChaincodeSpec_CAR.String()
}

// ValidatePath validates the chaincode path for CAR types to satisfy
// the platform interface.  This chaincode type currently doesn't
// require anything specific so we just implicitly approve any spec
func (carPlatform *Platform) ValidatePath(path string) error {_cover_atomic_.AddUint32(&GoCover_1_666530646566303562376539.Count[1], 1);
	return nil
}

func (carPlatform *Platform) ValidateCodePackage(codePackage []byte) error {_cover_atomic_.AddUint32(&GoCover_1_666530646566303562376539.Count[2], 1);
	// CAR platform will validate the code package within chaintool
	return nil
}

func (carPlatform *Platform) GetDeploymentPayload(path string) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_666530646566303562376539.Count[3], 1);

	return ioutil.ReadFile(path)
}

func (carPlatform *Platform) GenerateDockerfile() (string, error) {_cover_atomic_.AddUint32(&GoCover_1_666530646566303562376539.Count[4], 1);

	var buf []string

	//let the executable's name be chaincode ID's name
	buf = append(buf, "FROM "+cutil.GetDockerfileFromConfig("chaincode.car.runtime"))
	buf = append(buf, "ADD binpackage.tar /usr/local/bin")

	dockerFileContents := strings.Join(buf, "\n")

	return dockerFileContents, nil
}

func (carPlatform *Platform) GenerateDockerBuild(path string, code []byte, tw *tar.Writer) error {_cover_atomic_.AddUint32(&GoCover_1_666530646566303562376539.Count[5], 1);

	// Bundle the .car file into a tar stream so it may be transferred to the builder container
	codepackage, output := io.Pipe()
	go func() {_cover_atomic_.AddUint32(&GoCover_1_666530646566303562376539.Count[8], 1);
		tw := tar.NewWriter(output)

		err := cutil.WriteBytesToPackage("codepackage.car", code, tw)

		tw.Close()
		output.CloseWithError(err)
	}()

	_cover_atomic_.AddUint32(&GoCover_1_666530646566303562376539.Count[6], 1);binpackage := bytes.NewBuffer(nil)
	err := util.DockerBuild(util.DockerBuildOptions{
		Cmd:          "java -jar /usr/local/bin/chaintool buildcar /chaincode/input/codepackage.car -o /chaincode/output/chaincode",
		InputStream:  codepackage,
		OutputStream: binpackage,
	})
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_666530646566303562376539.Count[9], 1);
		return fmt.Errorf("Error building CAR: %s", err)
	}

	_cover_atomic_.AddUint32(&GoCover_1_666530646566303562376539.Count[7], 1);return cutil.WriteBytesToPackage("binpackage.tar", binpackage.Bytes(), tw)
}

//GetMetadataProvider fetches metadata provider given deployment spec
func (carPlatform *Platform) GetMetadataProvider(code []byte) platforms.MetadataProvider {_cover_atomic_.AddUint32(&GoCover_1_666530646566303562376539.Count[10], 1);
	return &MetadataProvider{}
}

var GoCover_1_666530646566303562376539 = struct {
	Count     [11]uint32
	Pos       [3 * 11]uint32
	NumStmt   [11]uint16
} {
	Pos: [3 * 11]uint32{
		28, 30, 0x2002c, // [0]
		35, 37, 0x2003e, // [1]
		39, 42, 0x2004c, // [2]
		44, 47, 0x20050, // [3]
		49, 60, 0x20043, // [4]
		62, 66, 0xc0062, // [5]
		75, 81, 0x100002, // [6]
		85, 85, 0x4c0002, // [7]
		66, 73, 0x3000c, // [8]
		81, 83, 0x30010, // [9]
		89, 91, 0x2005a, // [10]
	},
	NumStmt: [11]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
		5, // 4
		2, // 5
		3, // 6
		1, // 7
		4, // 8
		1, // 9
		1, // 10
	},
}
var _ = _cover_atomic_.LoadUint32
