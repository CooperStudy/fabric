//line /home/cooper/go/src/github.com/hyperledger/fabric/core/chaincode/platforms/car/metadataprovider.go:1
/*
# Copyright State Street Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
*/
package car; import _cover_atomic_ "sync/atomic"

import (
	"archive/tar"
	"bytes"
)

//MetadataProvider provides Metadata
type MetadataProvider struct {
}

// GetMetadataAsTarEntries extracts metata data from ChaincodeDeploymentSpec
func (carMetadataProv *MetadataProvider) GetMetadataAsTarEntries() ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_0_666530646566303562376539.Count[0], 1);
	//This will convert metadata generated by car
	//into tar entries identical to the tar entries generated by
	//other platforms.
	//
	//Not implemented currently, users cannot specify metadata through CAR

	buf := bytes.NewBuffer(nil)
	tw := tar.NewWriter(buf)

	if err := tw.Close(); err != nil {_cover_atomic_.AddUint32(&GoCover_0_666530646566303562376539.Count[2], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_0_666530646566303562376539.Count[1], 1);return buf.Bytes(), nil
}

var GoCover_0_666530646566303562376539 = struct {
	Count     [3]uint32
	Pos       [3 * 3]uint32
	NumStmt   [3]uint16
} {
	Pos: [3 * 3]uint32{
		18, 28, 0x230054, // [0]
		32, 32, 0x190002, // [1]
		28, 30, 0x30023, // [2]
	},
	NumStmt: [3]uint16{
		3, // 0
		1, // 1
		1, // 2
	},
}
var _ = _cover_atomic_.LoadUint32
