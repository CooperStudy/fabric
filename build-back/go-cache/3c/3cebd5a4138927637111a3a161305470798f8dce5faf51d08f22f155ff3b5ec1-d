//line /home/cooper/go/src/github.com/hyperledger/fabric/orderer/consensus/kafka/partitioner.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package kafka; import _cover_atomic_ "sync/atomic"

import "github.com/Shopify/sarama"

type staticPartitioner struct {
	partitionID int32
}

// newStaticPartitioner returns a PartitionerConstructor that
// returns a Partitioner that always chooses the specified partition.
func newStaticPartitioner(partition int32) sarama.PartitionerConstructor {_cover_atomic_.AddUint32(&GoCover_6_623633326437306563303132.Count[0], 1);
	return func(topic string) sarama.Partitioner {_cover_atomic_.AddUint32(&GoCover_6_623633326437306563303132.Count[1], 1);
		return &staticPartitioner{partition}
	}
}

// Partition takes a message and partition count and chooses a partition.
func (prt *staticPartitioner) Partition(message *sarama.ProducerMessage, numPartitions int32) (int32, error) {_cover_atomic_.AddUint32(&GoCover_6_623633326437306563303132.Count[2], 1);
	return prt.partitionID, nil
}

// RequiresConsistency indicates to the user of the partitioner whether the
// mapping of key->partition is consistent or not.
func (prt *staticPartitioner) RequiresConsistency() bool {_cover_atomic_.AddUint32(&GoCover_6_623633326437306563303132.Count[3], 1);
	return true
}

var GoCover_6_623633326437306563303132 = struct {
	Count     [4]uint32
	Pos       [3 * 4]uint32
	NumStmt   [4]uint16
} {
	Pos: [3 * 4]uint32{
		17, 18, 0x2f004a, // [0]
		18, 20, 0x3002f, // [1]
		24, 26, 0x2006e, // [2]
		30, 32, 0x2003a, // [3]
	},
	NumStmt: [4]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
	},
}
var _ = _cover_atomic_.LoadUint32
