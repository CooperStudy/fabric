//line /home/cooper/go/src/github.com/hyperledger/fabric/core/peer/deliverevents.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package peer; import _cover_atomic_ "sync/atomic"

import (
	"runtime/debug"
	"time"

	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/common/deliver"
	"github.com/hyperledger/fabric/common/flogging"
	"github.com/hyperledger/fabric/common/metrics"
	"github.com/hyperledger/fabric/core/aclmgmt/resources"
	"github.com/hyperledger/fabric/core/ledger/util"
	"github.com/hyperledger/fabric/protos/common"
	"github.com/hyperledger/fabric/protos/peer"
	"github.com/hyperledger/fabric/protos/utils"
	"github.com/pkg/errors"
	"github.com/spf13/viper"
)

var logger = flogging.MustGetLogger("common.deliverevents")

// PolicyCheckerProvider provides the corresponding policy checker for a
// given resource name
type PolicyCheckerProvider func(resourceName string) deliver.PolicyCheckerFunc

// server holds the dependencies necessary to create a deliver server
type server struct {
	dh                    *deliver.Handler
	policyCheckerProvider PolicyCheckerProvider
}

// blockResponseSender structure used to send block responses
type blockResponseSender struct {
	peer.Deliver_DeliverServer
}

// SendStatusResponse generates status reply proto message
func (brs *blockResponseSender) SendStatusResponse(status common.Status) error {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[0], 1);
	reply := &peer.DeliverResponse{
		Type: &peer.DeliverResponse_Status{Status: status},
	}
	return brs.Send(reply)
}

// SendBlockResponse generates deliver response with block message
func (brs *blockResponseSender) SendBlockResponse(block *common.Block) error {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[1], 1);
	response := &peer.DeliverResponse{
		Type: &peer.DeliverResponse_Block{Block: block},
	}
	return brs.Send(response)
}

// filteredBlockResponseSender structure used to send filtered block responses
type filteredBlockResponseSender struct {
	peer.Deliver_DeliverFilteredServer
}

// SendStatusResponse generates status reply proto message
func (fbrs *filteredBlockResponseSender) SendStatusResponse(status common.Status) error {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[2], 1);
	response := &peer.DeliverResponse{
		Type: &peer.DeliverResponse_Status{Status: status},
	}
	return fbrs.Send(response)
}

// IsFiltered is a marker method which indicates that this response sender
// sends filtered blocks.
func (fbrs *filteredBlockResponseSender) IsFiltered() bool {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[3], 1);
	return true
}

// SendBlockResponse generates deliver response with block message
func (fbrs *filteredBlockResponseSender) SendBlockResponse(block *common.Block) error {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[4], 1);
	// Generates filtered block response
	b := blockEvent(*block)
	filteredBlock, err := b.toFilteredBlock()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[6], 1);
		logger.Warningf("Failed to generate filtered block due to: %s", err)
		return fbrs.SendStatusResponse(common.Status_BAD_REQUEST)
	}
	_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[5], 1);response := &peer.DeliverResponse{
		Type: &peer.DeliverResponse_FilteredBlock{FilteredBlock: filteredBlock},
	}
	return fbrs.Send(response)
}

// transactionActions aliasing for peer.TransactionAction pointers slice
type transactionActions []*peer.TransactionAction

// blockEvent an alias for common.Block structure, used to
// extend with auxiliary functionality
type blockEvent common.Block

// Deliver sends a stream of blocks to a client after commitment
func (s *server) DeliverFiltered(srv peer.Deliver_DeliverFilteredServer) error {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[7], 1);
	logger.Debugf("Starting new DeliverFiltered handler")
	defer dumpStacktraceOnPanic()
	// getting policy checker based on resources.Event_FilteredBlock resource name
	deliverServer := &deliver.Server{
		Receiver:      srv,
		PolicyChecker: s.policyCheckerProvider(resources.Event_FilteredBlock),
		ResponseSender: &filteredBlockResponseSender{
			Deliver_DeliverFilteredServer: srv,
		},
	}
	return s.dh.Handle(srv.Context(), deliverServer)
}

// Deliver sends a stream of blocks to a client after commitment
func (s *server) Deliver(srv peer.Deliver_DeliverServer) (err error) {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[8], 1);
	logger.Debugf("Starting new Deliver handler")
	defer dumpStacktraceOnPanic()
	// getting policy checker based on resources.Event_Block resource name
	deliverServer := &deliver.Server{
		PolicyChecker: s.policyCheckerProvider(resources.Event_Block),
		Receiver:      srv,
		ResponseSender: &blockResponseSender{
			Deliver_DeliverServer: srv,
		},
	}
	return s.dh.Handle(srv.Context(), deliverServer)
}

// NewDeliverEventsServer creates a peer.Deliver server to deliver block and
// filtered block events
func NewDeliverEventsServer(mutualTLS bool, policyCheckerProvider PolicyCheckerProvider, chainManager deliver.ChainManager, metricsProvider metrics.Provider) peer.DeliverServer {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[9], 1);
	timeWindow := viper.GetDuration("peer.authentication.timewindow")
	if timeWindow == 0 {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[11], 1);
		defaultTimeWindow := 15 * time.Minute
		logger.Warningf("`peer.authentication.timewindow` not set; defaulting to %s", defaultTimeWindow)
		timeWindow = defaultTimeWindow
	}
	_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[10], 1);metrics := deliver.NewMetrics(metricsProvider)
	return &server{
		dh:                    deliver.NewHandler(chainManager, timeWindow, mutualTLS, metrics),
		policyCheckerProvider: policyCheckerProvider,
	}
}

func (s *server) sendProducer(srv peer.Deliver_DeliverFilteredServer) func(msg proto.Message) error {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[12], 1);
	return func(msg proto.Message) error {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[13], 1);
		response, ok := msg.(*peer.DeliverResponse)
		if !ok {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[15], 1);
			logger.Errorf("received wrong response type, expected response type peer.DeliverResponse")
			return errors.New("expected response type peer.DeliverResponse")
		}
		_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[14], 1);return srv.Send(response)
	}
}

func (block *blockEvent) toFilteredBlock() (*peer.FilteredBlock, error) {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[16], 1);
	filteredBlock := &peer.FilteredBlock{
		Number: block.Header.Number,
	}

	txsFltr := util.TxValidationFlags(block.Metadata.Metadata[common.BlockMetadataIndex_TRANSACTIONS_FILTER])
	for txIndex, ebytes := range block.Data.Data {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[18], 1);
		var env *common.Envelope
		var err error

		if ebytes == nil {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[25], 1);
			logger.Debugf("got nil data bytes for tx index %d, "+
				"block num %d", txIndex, block.Header.Number)
			continue
		}

		_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[19], 1);env, err = utils.GetEnvelopeFromBlock(ebytes)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[26], 1);
			logger.Errorf("error getting tx from block, %s", err)
			continue
		}

		// get the payload from the envelope
		_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[20], 1);payload, err := utils.GetPayload(env)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[27], 1);
			return nil, errors.WithMessage(err, "could not extract payload from envelope")
		}

		_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[21], 1);if payload.Header == nil {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[28], 1);
			logger.Debugf("transaction payload header is nil, %d, block num %d",
				txIndex, block.Header.Number)
			continue
		}
		_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[22], 1);chdr, err := utils.UnmarshalChannelHeader(payload.Header.ChannelHeader)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[29], 1);
			return nil, err
		}

		_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[23], 1);filteredBlock.ChannelId = chdr.ChannelId

		filteredTransaction := &peer.FilteredTransaction{
			Txid:             chdr.TxId,
			Type:             common.HeaderType(chdr.Type),
			TxValidationCode: txsFltr.Flag(txIndex),
		}

		if filteredTransaction.Type == common.HeaderType_ENDORSER_TRANSACTION {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[30], 1);
			tx, err := utils.GetTransaction(payload.Data)
			if err != nil {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[32], 1);
				return nil, errors.WithMessage(err, "error unmarshal transaction payload for block event")
			}

			_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[31], 1);filteredTransaction.Data, err = transactionActions(tx.Actions).toFilteredActions()
			if err != nil {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[33], 1);
				logger.Errorf(err.Error())
				return nil, err
			}
		}

		_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[24], 1);filteredBlock.FilteredTransactions = append(filteredBlock.FilteredTransactions, filteredTransaction)
	}

	_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[17], 1);return filteredBlock, nil
}

func (ta transactionActions) toFilteredActions() (*peer.FilteredTransaction_TransactionActions, error) {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[34], 1);
	transactionActions := &peer.FilteredTransactionActions{}
	for _, action := range ta {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[36], 1);
		chaincodeActionPayload, err := utils.GetChaincodeActionPayload(action.Payload)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[42], 1);
			return nil, errors.WithMessage(err, "error unmarshal transaction action payload for block event")
		}

		_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[37], 1);if chaincodeActionPayload.Action == nil {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[43], 1);
			logger.Debugf("chaincode action, the payload action is nil, skipping")
			continue
		}
		_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[38], 1);propRespPayload, err := utils.GetProposalResponsePayload(chaincodeActionPayload.Action.ProposalResponsePayload)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[44], 1);
			return nil, errors.WithMessage(err, "error unmarshal proposal response payload for block event")
		}

		_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[39], 1);caPayload, err := utils.GetChaincodeAction(propRespPayload.Extension)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[45], 1);
			return nil, errors.WithMessage(err, "error unmarshal chaincode action for block event")
		}

		_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[40], 1);ccEvent, err := utils.GetChaincodeEvents(caPayload.Events)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[46], 1);
			return nil, errors.WithMessage(err, "error unmarshal chaincode event for block event")
		}

		_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[41], 1);if ccEvent.GetChaincodeId() != "" {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[47], 1);
			filteredAction := &peer.FilteredChaincodeAction{
				ChaincodeEvent: &peer.ChaincodeEvent{
					TxId:        ccEvent.TxId,
					ChaincodeId: ccEvent.ChaincodeId,
					EventName:   ccEvent.EventName,
				},
			}
			transactionActions.ChaincodeActions = append(transactionActions.ChaincodeActions, filteredAction)
		}
	}
	_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[35], 1);return &peer.FilteredTransaction_TransactionActions{
		TransactionActions: transactionActions,
	}, nil
}

func dumpStacktraceOnPanic() {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[48], 1);
	func() {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[49], 1);
		if r := recover(); r != nil {_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[51], 1);
			logger.Criticalf("Deliver client triggered panic: %s\n%s", r, debug.Stack())
		}
		_cover_atomic_.AddUint32(&GoCover_3_323265356137393664323638.Count[50], 1);logger.Debugf("Closing Deliver stream")
	}()
}

var GoCover_3_323265356137393664323638 = struct {
	Count     [52]uint32
	Pos       [3 * 52]uint32
	NumStmt   [52]uint16
} {
	Pos: [3 * 52]uint32{
		44, 49, 0x20050, // [0]
		52, 57, 0x2004e, // [1]
		65, 70, 0x20059, // [2]
		74, 76, 0x2003c, // [3]
		79, 83, 0x100057, // [4]
		87, 90, 0x1c0002, // [5]
		83, 86, 0x30010, // [6]
		101, 113, 0x20050, // [7]
		116, 128, 0x20046, // [8]
		132, 134, 0x1500b2, // [9]
		139, 143, 0x30002, // [10]
		134, 138, 0x30015, // [11]
		146, 147, 0x270065, // [12]
		147, 149, 0xa0027, // [13]
		153, 153, 0x1c0003, // [14]
		149, 152, 0x4000a, // [15]
		157, 163, 0x2f0049, // [16]
		219, 219, 0x1b0002, // [17]
		163, 167, 0x14002f, // [18]
		173, 174, 0x110003, // [19]
		180, 181, 0x110003, // [20]
		185, 185, 0x1c0003, // [21]
		190, 191, 0x110003, // [22]
		195, 203, 0x490003, // [23]
		216, 216, 0x670003, // [24]
		167, 170, 0xc0014, // [25]
		174, 176, 0xc0011, // [26]
		181, 183, 0x40011, // [27]
		185, 188, 0xc001c, // [28]
		191, 193, 0x40011, // [29]
		203, 205, 0x120049, // [30]
		209, 210, 0x120004, // [31]
		205, 207, 0x50012, // [32]
		210, 213, 0x50012, // [33]
		222, 224, 0x1c0068, // [34]
		260, 262, 0x80002, // [35]
		224, 226, 0x11001c, // [36]
		230, 230, 0x2b0003, // [37]
		234, 235, 0x110003, // [38]
		239, 240, 0x110003, // [39]
		244, 245, 0x110003, // [40]
		249, 249, 0x250003, // [41]
		226, 228, 0x40011, // [42]
		230, 232, 0xc002b, // [43]
		235, 237, 0x40011, // [44]
		240, 242, 0x40011, // [45]
		245, 247, 0x40011, // [46]
		249, 258, 0x40025, // [47]
		265, 266, 0x9001e, // [48]
		266, 267, 0x1f0009, // [49]
		270, 270, 0x2a0003, // [50]
		267, 269, 0x4001f, // [51]
	},
	NumStmt: [52]uint16{
		2, // 0
		2, // 1
		2, // 2
		1, // 3
		3, // 4
		2, // 5
		2, // 6
		4, // 7
		4, // 8
		2, // 9
		2, // 10
		3, // 11
		1, // 12
		2, // 13
		1, // 14
		2, // 15
		3, // 16
		1, // 17
		3, // 18
		2, // 19
		2, // 20
		1, // 21
		2, // 22
		3, // 23
		1, // 24
		2, // 25
		2, // 26
		1, // 27
		2, // 28
		1, // 29
		2, // 30
		2, // 31
		1, // 32
		2, // 33
		2, // 34
		1, // 35
		2, // 36
		1, // 37
		2, // 38
		2, // 39
		2, // 40
		1, // 41
		1, // 42
		2, // 43
		1, // 44
		1, // 45
		1, // 46
		2, // 47
		1, // 48
		1, // 49
		1, // 50
		1, // 51
	},
}
var _ = _cover_atomic_.LoadUint32
