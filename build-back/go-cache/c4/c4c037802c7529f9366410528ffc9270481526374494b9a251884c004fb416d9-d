//line /home/cooper/go/src/github.com/hyperledger/fabric/cmd/common/config.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package common; import _cover_atomic_ "sync/atomic"

import (
	"io/ioutil"

	"github.com/hyperledger/fabric/cmd/common/comm"
	"github.com/hyperledger/fabric/cmd/common/signer"
	"github.com/pkg/errors"
	"gopkg.in/yaml.v2"
)

const (
	v12 = iota
)

// Config aggregates configuration of TLS and signing
type Config struct {
	Version      int
	TLSConfig    comm.Config
	SignerConfig signer.Config
}

// ConfigFromFile loads the given file and converts it to a Config
func ConfigFromFile(file string) (Config, error) {_cover_atomic_.AddUint32(&GoCover_1_623737633338616638356566.Count[0], 1);
	configData, err := ioutil.ReadFile(file)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_623737633338616638356566.Count[3], 1);
		return Config{}, errors.WithStack(err)
	}
	_cover_atomic_.AddUint32(&GoCover_1_623737633338616638356566.Count[1], 1);config := Config{}

	if err := yaml.Unmarshal([]byte(configData), &config); err != nil {_cover_atomic_.AddUint32(&GoCover_1_623737633338616638356566.Count[4], 1);
		return Config{}, errors.Errorf("error unmarshaling YAML file %s: %s", file, err)
	}

	_cover_atomic_.AddUint32(&GoCover_1_623737633338616638356566.Count[2], 1);return config, validateConfig(config)
}

// ToFile writes the config into a file
func (c Config) ToFile(file string) error {_cover_atomic_.AddUint32(&GoCover_1_623737633338616638356566.Count[5], 1);
	if err := validateConfig(c); err != nil {_cover_atomic_.AddUint32(&GoCover_1_623737633338616638356566.Count[8], 1);
		return errors.Wrap(err, "config isn't valid")
	}
	_cover_atomic_.AddUint32(&GoCover_1_623737633338616638356566.Count[6], 1);b, _ := yaml.Marshal(c)
	if err := ioutil.WriteFile(file, b, 0600); err != nil {_cover_atomic_.AddUint32(&GoCover_1_623737633338616638356566.Count[9], 1);
		return errors.Errorf("failed writing file %s: %v", file, err)
	}
	_cover_atomic_.AddUint32(&GoCover_1_623737633338616638356566.Count[7], 1);return nil
}

func validateConfig(conf Config) error {_cover_atomic_.AddUint32(&GoCover_1_623737633338616638356566.Count[10], 1);
	nonEmptyStrings := []string{
		conf.SignerConfig.MSPID,
		conf.SignerConfig.IdentityPath,
		conf.SignerConfig.KeyPath,
	}

	for _, s := range nonEmptyStrings {_cover_atomic_.AddUint32(&GoCover_1_623737633338616638356566.Count[12], 1);
		if s == "" {_cover_atomic_.AddUint32(&GoCover_1_623737633338616638356566.Count[13], 1);
			return errors.New("empty string that is mandatory")
		}
	}
	_cover_atomic_.AddUint32(&GoCover_1_623737633338616638356566.Count[11], 1);return nil
}

var GoCover_1_623737633338616638356566 = struct {
	Count     [14]uint32
	Pos       [3 * 14]uint32
	NumStmt   [14]uint16
} {
	Pos: [3 * 14]uint32{
		30, 32, 0x100032, // [0]
		35, 37, 0x440002, // [1]
		41, 41, 0x270002, // [2]
		32, 34, 0x30010, // [3]
		37, 39, 0x30044, // [4]
		45, 46, 0x2a002b, // [5]
		49, 50, 0x380002, // [6]
		53, 53, 0xc0002, // [7]
		46, 48, 0x3002a, // [8]
		50, 52, 0x30038, // [9]
		56, 63, 0x240028, // [10]
		68, 68, 0xc0002, // [11]
		63, 64, 0xe0024, // [12]
		64, 66, 0x4000e, // [13]
	},
	NumStmt: [14]uint16{
		2, // 0
		2, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
		2, // 6
		1, // 7
		1, // 8
		1, // 9
		2, // 10
		1, // 11
		1, // 12
		1, // 13
	},
}
var _ = _cover_atomic_.LoadUint32
