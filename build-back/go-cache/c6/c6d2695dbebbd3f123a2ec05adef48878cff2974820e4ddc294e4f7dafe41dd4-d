//line /home/cooper/go/src/github.com/hyperledger/fabric/discovery/cmd/config.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package discovery; import _cover_atomic_ "sync/atomic"

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/hyperledger/fabric/cmd/common"
	"github.com/hyperledger/fabric/discovery/client"
	"github.com/pkg/errors"
)

// NewConfigCmd creates a new ConfigCmd
func NewConfigCmd(stub Stub, parser ResponseParser) *ConfigCmd {_cover_atomic_.AddUint32(&GoCover_1_646636343763343830343930.Count[0], 1);
	return &ConfigCmd{
		stub:   stub,
		parser: parser,
	}
}

// ConfigCmd executes a command that retrieves config
type ConfigCmd struct {
	stub    Stub
	server  *string
	channel *string
	parser  ResponseParser
}

// SetServer sets the server of the ConfigCmd
func (pc *ConfigCmd) SetServer(server *string) {_cover_atomic_.AddUint32(&GoCover_1_646636343763343830343930.Count[1], 1);
	pc.server = server
}

// SetChannel sets the channel of the ConfigCmd
func (pc *ConfigCmd) SetChannel(channel *string) {_cover_atomic_.AddUint32(&GoCover_1_646636343763343830343930.Count[2], 1);
	pc.channel = channel
}

// Execute executes the command
func (pc *ConfigCmd) Execute(conf common.Config) error {_cover_atomic_.AddUint32(&GoCover_1_646636343763343830343930.Count[3], 1);
	if pc.server == nil || *pc.server == "" {_cover_atomic_.AddUint32(&GoCover_1_646636343763343830343930.Count[7], 1);
		return errors.New("no server specified")
	}
	_cover_atomic_.AddUint32(&GoCover_1_646636343763343830343930.Count[4], 1);if pc.channel == nil || *pc.channel == "" {_cover_atomic_.AddUint32(&GoCover_1_646636343763343830343930.Count[8], 1);
		return errors.New("no channel specified")
	}

	_cover_atomic_.AddUint32(&GoCover_1_646636343763343830343930.Count[5], 1);server := *pc.server
	channel := *pc.channel

	req := discovery.NewRequest().OfChannel(channel).AddConfigQuery()
	res, err := pc.stub.Send(server, conf, req)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_646636343763343830343930.Count[9], 1);
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_1_646636343763343830343930.Count[6], 1);return pc.parser.ParseResponse(channel, res)
}

// ConfigResponseParser parses config responses
type ConfigResponseParser struct {
	io.Writer
}

// ParseResponse parses the given response for the given channel
func (parser *ConfigResponseParser) ParseResponse(channel string, res ServiceResponse) error {_cover_atomic_.AddUint32(&GoCover_1_646636343763343830343930.Count[10], 1);
	chanConf, err := res.ForChannel(channel).Config()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_646636343763343830343930.Count[12], 1);
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_1_646636343763343830343930.Count[11], 1);jsonBytes, _ := json.MarshalIndent(chanConf, "", "\t")
	fmt.Fprintln(parser.Writer, string(jsonBytes))
	return nil
}

var GoCover_1_646636343763343830343930 = struct {
	Count     [13]uint32
	Pos       [3 * 13]uint32
	NumStmt   [13]uint16
} {
	Pos: [3 * 13]uint32{
		20, 25, 0x20040, // [0]
		36, 38, 0x20030, // [1]
		41, 43, 0x20032, // [2]
		46, 47, 0x2a0038, // [3]
		50, 50, 0x2c0002, // [4]
		54, 59, 0x100002, // [5]
		62, 62, 0x2e0002, // [6]
		47, 49, 0x3002a, // [7]
		50, 52, 0x3002c, // [8]
		59, 61, 0x30010, // [9]
		71, 73, 0x10005e, // [10]
		76, 78, 0xc0002, // [11]
		73, 75, 0x30010, // [12]
	},
	NumStmt: [13]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
		1, // 4
		5, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
		2, // 10
		3, // 11
		1, // 12
	},
}
var _ = _cover_atomic_.LoadUint32
