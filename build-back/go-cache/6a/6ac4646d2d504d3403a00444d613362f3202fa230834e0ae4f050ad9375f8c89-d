//line /home/cooper/go/src/github.com/hyperledger/fabric/orderer/common/msgprocessor/sigfilter.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package msgprocessor; import _cover_atomic_ "sync/atomic"

import (
	"fmt"

	"github.com/hyperledger/fabric/common/policies"
	cb "github.com/hyperledger/fabric/protos/common"
	"github.com/pkg/errors"
)

// SigFilterSupport provides the resources required for the signature filter
type SigFilterSupport interface {
	// PolicyManager returns a reference to the current policy manager
	PolicyManager() policies.Manager
}

// SigFilter stores the name of the policy to apply to deliver requests to
// determine whether a client is authorized
type SigFilter struct {
	policyName string
	support    SigFilterSupport
}

// NewSigFilter creates a new signature filter, at every evaluation, the policy manager is called
// to retrieve the latest version of the policy
func NewSigFilter(policyName string, support SigFilterSupport) *SigFilter {_cover_atomic_.AddUint32(&GoCover_3_646330373837303238396264.Count[0], 1);
	return &SigFilter{
		policyName: policyName,
		support:    support,
	}
}

// Apply applies the policy given, resulting in Reject or Forward, never Accept
func (sf *SigFilter) Apply(message *cb.Envelope) error {_cover_atomic_.AddUint32(&GoCover_3_646330373837303238396264.Count[1], 1);
	signedData, err := message.AsSignedData()

	if err != nil {_cover_atomic_.AddUint32(&GoCover_3_646330373837303238396264.Count[5], 1);
		return fmt.Errorf("could not convert message to signedData: %s", err)
	}

	_cover_atomic_.AddUint32(&GoCover_3_646330373837303238396264.Count[2], 1);policy, ok := sf.support.PolicyManager().GetPolicy(sf.policyName)
	if !ok {_cover_atomic_.AddUint32(&GoCover_3_646330373837303238396264.Count[6], 1);
		return fmt.Errorf("could not find policy %s", sf.policyName)
	}

	_cover_atomic_.AddUint32(&GoCover_3_646330373837303238396264.Count[3], 1);err = policy.Evaluate(signedData)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_3_646330373837303238396264.Count[7], 1);
		return errors.Wrap(errors.WithStack(ErrPermissionDenied), err.Error())
	}
	_cover_atomic_.AddUint32(&GoCover_3_646330373837303238396264.Count[4], 1);return nil
}

var GoCover_3_646330373837303238396264 = struct {
	Count     [8]uint32
	Pos       [3 * 8]uint32
	NumStmt   [8]uint16
} {
	Pos: [3 * 8]uint32{
		32, 37, 0x2004b, // [0]
		40, 43, 0x100038, // [1]
		47, 48, 0x90002, // [2]
		52, 53, 0x100002, // [3]
		56, 56, 0xc0002, // [4]
		43, 45, 0x30010, // [5]
		48, 50, 0x30009, // [6]
		53, 55, 0x30010, // [7]
	},
	NumStmt: [8]uint16{
		1, // 0
		2, // 1
		2, // 2
		2, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
	},
}
var _ = _cover_atomic_.LoadUint32
