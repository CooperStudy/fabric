//line /home/cooper/go/src/github.com/hyperledger/fabric/cmd/common/comm/client.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package comm; import _cover_atomic_ "sync/atomic"

import (
	"time"

	"github.com/hyperledger/fabric/common/crypto/tlsgen"
	"github.com/hyperledger/fabric/common/util"
	"github.com/hyperledger/fabric/core/comm"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
)

const defaultTimeout = time.Second * 5

// Client deals with TLS connections
// to the discovery server
type Client struct {
	TLSCertHash []byte
	*comm.GRPCClient
}

// NewClient creates a new comm client out of the given configuration
func NewClient(conf Config) (*Client, error) {_cover_atomic_.AddUint32(&GoCover_0_643331663539306330303863.Count[0], 1);
	if conf.Timeout == time.Duration(0) {_cover_atomic_.AddUint32(&GoCover_0_643331663539306330303863.Count[4], 1);
		conf.Timeout = defaultTimeout
	}
	_cover_atomic_.AddUint32(&GoCover_0_643331663539306330303863.Count[1], 1);sop, err := conf.ToSecureOptions(newSelfSignedTLSCert)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_643331663539306330303863.Count[5], 1);
		return nil, errors.WithStack(err)
	}
	_cover_atomic_.AddUint32(&GoCover_0_643331663539306330303863.Count[2], 1);cl, err := comm.NewGRPCClient(comm.ClientConfig{
		SecOpts: sop,
		Timeout: conf.Timeout,
	})
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_643331663539306330303863.Count[6], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_643331663539306330303863.Count[3], 1);return &Client{GRPCClient: cl, TLSCertHash: util.ComputeSHA256(sop.Certificate)}, nil
}

// NewDialer creates a new dialer from the given endpoint
func (c *Client) NewDialer(endpoint string) func() (*grpc.ClientConn, error) {_cover_atomic_.AddUint32(&GoCover_0_643331663539306330303863.Count[7], 1);
	return func() (*grpc.ClientConn, error) {_cover_atomic_.AddUint32(&GoCover_0_643331663539306330303863.Count[8], 1);
		conn, err := c.NewConnection(endpoint, "")
		if err != nil {_cover_atomic_.AddUint32(&GoCover_0_643331663539306330303863.Count[10], 1);
			return nil, errors.WithStack(err)
		}
		_cover_atomic_.AddUint32(&GoCover_0_643331663539306330303863.Count[9], 1);return conn, nil
	}
}

func newSelfSignedTLSCert() (*tlsgen.CertKeyPair, error) {_cover_atomic_.AddUint32(&GoCover_0_643331663539306330303863.Count[11], 1);
	ca, err := tlsgen.NewCA()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_643331663539306330303863.Count[13], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_643331663539306330303863.Count[12], 1);return ca.NewClientCertKeyPair()
}

var GoCover_0_643331663539306330303863 = struct {
	Count     [14]uint32
	Pos       [3 * 14]uint32
	NumStmt   [14]uint16
} {
	Pos: [3 * 14]uint32{
		29, 30, 0x26002e, // [0]
		33, 34, 0x100002, // [1]
		37, 41, 0x100002, // [2]
		44, 44, 0x570002, // [3]
		30, 32, 0x30026, // [4]
		34, 36, 0x30010, // [5]
		41, 43, 0x30010, // [6]
		48, 49, 0x2a004e, // [7]
		49, 51, 0x11002a, // [8]
		54, 54, 0x130003, // [9]
		51, 53, 0x40011, // [10]
		58, 60, 0x10003a, // [11]
		63, 63, 0x220002, // [12]
		60, 62, 0x30010, // [13]
	},
	NumStmt: [14]uint16{
		1, // 0
		2, // 1
		2, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
		2, // 8
		1, // 9
		1, // 10
		2, // 11
		1, // 12
		1, // 13
	},
}
var _ = _cover_atomic_.LoadUint32
