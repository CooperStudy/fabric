//line /home/cooper/go/src/github.com/hyperledger/fabric/core/middleware/chain.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package middleware; import _cover_atomic_ "sync/atomic"

import (
	"net/http"
)

type Middleware func(http.Handler) http.Handler

// A Chain is a middleware chain use for http request processing.
type Chain struct {
	mw []Middleware
}

// NewChain creates a new Middleware chain. The chain will call the Middleware
// in the order provided.
func NewChain(middlewares ...Middleware) Chain {_cover_atomic_.AddUint32(&GoCover_0_393739636635663162336662.Count[0], 1);
	return Chain{
		mw: append([]Middleware{}, middlewares...),
	}
}

// Handler returns an http.Handler for this chain.
func (c Chain) Handler(h http.Handler) http.Handler {_cover_atomic_.AddUint32(&GoCover_0_393739636635663162336662.Count[1], 1);
	if h == nil {_cover_atomic_.AddUint32(&GoCover_0_393739636635663162336662.Count[4], 1);
		h = http.DefaultServeMux
	}

	_cover_atomic_.AddUint32(&GoCover_0_393739636635663162336662.Count[2], 1);for i := len(c.mw) - 1; i >= 0; i-- {_cover_atomic_.AddUint32(&GoCover_0_393739636635663162336662.Count[5], 1);
		h = c.mw[i](h)
	}
	_cover_atomic_.AddUint32(&GoCover_0_393739636635663162336662.Count[3], 1);return h
}

var GoCover_0_393739636635663162336662 = struct {
	Count     [6]uint32
	Pos       [3 * 6]uint32
	NumStmt   [6]uint16
} {
	Pos: [3 * 6]uint32{
		22, 26, 0x20030, // [0]
		29, 30, 0xe0035, // [1]
		34, 34, 0x260002, // [2]
		37, 37, 0xa0002, // [3]
		30, 32, 0x3000e, // [4]
		34, 36, 0x30026, // [5]
	},
	NumStmt: [6]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
	},
}
var _ = _cover_atomic_.LoadUint32
