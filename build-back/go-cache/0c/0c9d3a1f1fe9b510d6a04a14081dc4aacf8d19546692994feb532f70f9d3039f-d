//line /home/cooper/go/src/github.com/hyperledger/fabric/core/chaincode/lifecycle/lifecycle.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package lifecycle; import _cover_atomic_ "sync/atomic"

import (
	"fmt"

	"github.com/hyperledger/fabric/core/chaincode/persistence"
	"github.com/pkg/errors"
)

// ChaincodeStore provides a way to persist chaincodes
type ChaincodeStore interface {
	Save(name, version string, ccInstallPkg []byte) (hash []byte, err error)
	RetrieveHash(name, version string) (hash []byte, err error)
}

type PackageParser interface {
	Parse(data []byte) (*persistence.ChaincodePackage, error)
}

// Lifecycle implements the lifecycle operations which are invoked
// by the SCC as well as internally
type Lifecycle struct {
	ChaincodeStore ChaincodeStore
	PackageParser  PackageParser
}

// InstallChaincode installs a given chaincode to the peer's chaincode store.
// It returns the hash to reference the chaincode by or an error on failure.
func (l *Lifecycle) InstallChaincode(name, version string, chaincodeInstallPackage []byte) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_0_653762643837333931396366.Count[0], 1);
	// Let's validate that the chaincodeInstallPackage is at least well formed before writing it
	_, err := l.PackageParser.Parse(chaincodeInstallPackage)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_653762643837333931396366.Count[3], 1);
		return nil, errors.WithMessage(err, "could not parse as a chaincode install package")
	}

	_cover_atomic_.AddUint32(&GoCover_0_653762643837333931396366.Count[1], 1);hash, err := l.ChaincodeStore.Save(name, version, chaincodeInstallPackage)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_653762643837333931396366.Count[4], 1);
		return nil, errors.WithMessage(err, "could not save cc install package")
	}

	_cover_atomic_.AddUint32(&GoCover_0_653762643837333931396366.Count[2], 1);return hash, nil
}

// QueryInstalledChaincode returns the hash of an installed chaincode of a given name and version.
func (l *Lifecycle) QueryInstalledChaincode(name, version string) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_0_653762643837333931396366.Count[5], 1);
	hash, err := l.ChaincodeStore.RetrieveHash(name, version)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_653762643837333931396366.Count[7], 1);
		return nil, errors.WithMessage(err, fmt.Sprintf("could not retrieve hash for chaincode '%s:%s'", name, version))
	}

	_cover_atomic_.AddUint32(&GoCover_0_653762643837333931396366.Count[6], 1);return hash, nil
}

var GoCover_0_653762643837333931396366 = struct {
	Count     [8]uint32
	Pos       [3 * 8]uint32
	NumStmt   [8]uint16
} {
	Pos: [3 * 8]uint32{
		35, 38, 0x10006c, // [0]
		42, 43, 0x100002, // [1]
		47, 47, 0x120002, // [2]
		38, 40, 0x30010, // [3]
		43, 45, 0x30010, // [4]
		51, 53, 0x100053, // [5]
		57, 57, 0x120002, // [6]
		53, 55, 0x30010, // [7]
	},
	NumStmt: [8]uint16{
		2, // 0
		2, // 1
		1, // 2
		1, // 3
		1, // 4
		2, // 5
		1, // 6
		1, // 7
	},
}
var _ = _cover_atomic_.LoadUint32
