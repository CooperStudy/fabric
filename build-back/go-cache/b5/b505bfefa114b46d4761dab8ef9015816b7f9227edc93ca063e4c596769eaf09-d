//line /home/cooper/go/src/github.com/hyperledger/fabric/common/util/utils.go:1
/*
Copyright IBM Corp. 2016 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

		 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package util; import _cover_atomic_ "sync/atomic"

import (
	"crypto/rand"
	"fmt"
	"io"
	"math/big"
	"reflect"
	"strings"
	"time"

	"github.com/golang/protobuf/ptypes/timestamp"
	"github.com/hyperledger/fabric/bccsp"
	"github.com/hyperledger/fabric/bccsp/factory"
	"github.com/hyperledger/fabric/common/metadata"
)

type alg struct {
	hashFun func([]byte) string
}

const defaultAlg = "sha256"

var availableIDgenAlgs = map[string]alg{
	defaultAlg: {GenerateIDfromTxSHAHash},
}

// ComputeSHA256 returns SHA2-256 on data
func ComputeSHA256(data []byte) (hash []byte) {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[0], 1);
	hash, err := factory.GetDefault().Hash(data, &bccsp.SHA256Opts{})
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[2], 1);
		panic(fmt.Errorf("Failed computing SHA256 on [% x]", data))
	}
	_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[1], 1);return
}

// ComputeSHA3256 returns SHA3-256 on data
func ComputeSHA3256(data []byte) (hash []byte) {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[3], 1);
	hash, err := factory.GetDefault().Hash(data, &bccsp.SHA3_256Opts{})
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[5], 1);
		panic(fmt.Errorf("Failed computing SHA3_256 on [% x]", data))
	}
	_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[4], 1);return
}

// GenerateBytesUUID returns a UUID based on RFC 4122 returning the generated bytes
func GenerateBytesUUID() []byte {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[6], 1);
	uuid := make([]byte, 16)
	_, err := io.ReadFull(rand.Reader, uuid)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[8], 1);
		panic(fmt.Sprintf("Error generating UUID: %s", err))
	}

	// variant bits; see section 4.1.1
	_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[7], 1);uuid[8] = uuid[8]&^0xc0 | 0x80

	// version 4 (pseudo-random); see section 4.1.3
	uuid[6] = uuid[6]&^0xf0 | 0x40

	return uuid
}

// GenerateIntUUID returns a UUID based on RFC 4122 returning a big.Int
func GenerateIntUUID() *big.Int {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[9], 1);
	uuid := GenerateBytesUUID()
	z := big.NewInt(0)
	return z.SetBytes(uuid)
}

// GenerateUUID returns a UUID based on RFC 4122
func GenerateUUID() string {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[10], 1);
	uuid := GenerateBytesUUID()
	return idBytesToStr(uuid)
}

// CreateUtcTimestamp returns a google/protobuf/Timestamp in UTC
func CreateUtcTimestamp() *timestamp.Timestamp {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[11], 1);
	now := time.Now().UTC()
	secs := now.Unix()
	nanos := int32(now.UnixNano() - (secs * 1000000000))
	return &(timestamp.Timestamp{Seconds: secs, Nanos: nanos})
}

//GenerateHashFromSignature returns a hash of the combined parameters
func GenerateHashFromSignature(path string, args []byte) []byte {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[12], 1);
	return ComputeSHA256(args)
}

// GenerateIDfromTxSHAHash generates SHA256 hash using Tx payload
func GenerateIDfromTxSHAHash(payload []byte) string {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[13], 1);
	return fmt.Sprintf("%x", ComputeSHA256(payload))
}

// GenerateIDWithAlg generates an ID using a custom algorithm
func GenerateIDWithAlg(customIDgenAlg string, payload []byte) (string, error) {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[14], 1);
	if customIDgenAlg == "" {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[17], 1);
		customIDgenAlg = defaultAlg
	}
	_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[15], 1);var alg = availableIDgenAlgs[customIDgenAlg]
	if alg.hashFun != nil {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[18], 1);
		return alg.hashFun(payload), nil
	}
	_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[16], 1);return "", fmt.Errorf("Wrong ID generation algorithm was given: %s", customIDgenAlg)
}

func idBytesToStr(id []byte) string {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[19], 1);
	return fmt.Sprintf("%x-%x-%x-%x-%x", id[0:4], id[4:6], id[6:8], id[8:10], id[10:])
}

// FindMissingElements identifies the elements of the first slice that are not present in the second
// The second slice is expected to be a subset of the first slice
func FindMissingElements(all []string, some []string) (delta []string) {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[20], 1);
all:
	for _, v1 := range all {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[22], 1);
		for _, v2 := range some {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[24], 1);
			if strings.Compare(v1, v2) == 0 {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[25], 1);
				continue all
			}
		}
		_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[23], 1);delta = append(delta, v1)
	}
	_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[21], 1);return
}

// ToChaincodeArgs converts string args to []byte args
func ToChaincodeArgs(args ...string) [][]byte {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[26], 1);
	bargs := make([][]byte, len(args))
	for i, arg := range args {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[28], 1);
		bargs[i] = []byte(arg)
	}
	_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[27], 1);return bargs
}

// ArrayToChaincodeArgs converts array of string args to array of []byte args
func ArrayToChaincodeArgs(args []string) [][]byte {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[29], 1);
	bargs := make([][]byte, len(args))
	for i, arg := range args {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[31], 1);
		bargs[i] = []byte(arg)
	}
	_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[30], 1);return bargs
}

const testchainid = "testchainid"
const testorgid = "**TEST_ORGID**"

//GetTestChainID returns the CHAINID constant in use by orderer
func GetTestChainID() string {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[32], 1);
	return testchainid
}

//GetTestOrgID returns the ORGID constant in use by gossip join message
func GetTestOrgID() string {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[33], 1);
	return testorgid
}

//GetSysCCVersion returns the version of all system chaincodes
//This needs to be revisited on policies around system chaincode
//"upgrades" from user and relationship with "fabric" upgrade. For
//now keep it simple and use the fabric's version stamp
func GetSysCCVersion() string {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[34], 1);
	return metadata.Version
}

// ConcatenateBytes is useful for combining multiple arrays of bytes, especially for
// signatures or digests over multiple fields
func ConcatenateBytes(data ...[]byte) []byte {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[35], 1);
	finalLength := 0
	for _, slice := range data {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[38], 1);
		finalLength += len(slice)
	}
	_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[36], 1);result := make([]byte, finalLength)
	last := 0
	for _, slice := range data {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[39], 1);
		for i := range slice {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[41], 1);
			result[i+last] = slice[i]
		}
		_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[40], 1);last += len(slice)
	}
	_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[37], 1);return result
}

// `flatten` recursively retrieves every leaf node in a struct in depth-first fashion
// and aggregate the results into given string slice with format: "path.to.leaf = value"
// in the order of definition. Root name is ignored in the path. This helper function is
// useful to pretty-print a struct, such as configs.
// for example, given data structure:
// A{
//   B{
//     C: "foo",
//     D: 42,
//   },
//   E: nil,
// }
// it should yield a slice of string containing following items:
// [
//   "B.C = \"foo\"",
//   "B.D = 42",
//   "E =",
// ]
func Flatten(i interface{}) []string {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[42], 1);
	var res []string
	flatten("", &res, reflect.ValueOf(i))
	return res
}

const DELIMITER = "."

func flatten(k string, m *[]string, v reflect.Value) {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[43], 1);
	delimiter := DELIMITER
	if k == "" {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[45], 1);
		delimiter = ""
	}

	_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[44], 1);switch v.Kind() {
	case reflect.Ptr:_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[46], 1);
		if v.IsNil() {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[52], 1);
			*m = append(*m, fmt.Sprintf("%s =", k))
			return
		}
		_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[47], 1);flatten(k, m, v.Elem())
	case reflect.Struct:_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[48], 1);
		if x, ok := v.Interface().(fmt.Stringer); ok {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[53], 1);
			*m = append(*m, fmt.Sprintf("%s = %v", k, x))
			return
		}

		_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[49], 1);for i := 0; i < v.NumField(); i++ {_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[54], 1);
			flatten(k+delimiter+v.Type().Field(i).Name, m, v.Field(i))
		}
	case reflect.String:_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[50], 1);
		// It is useful to quote string values
		*m = append(*m, fmt.Sprintf("%s = \"%s\"", k, v))
	default:_cover_atomic_.AddUint32(&GoCover_1_356631643333376535366331.Count[51], 1);
		*m = append(*m, fmt.Sprintf("%s = %v", k, v))
	}
}

var GoCover_1_356631643333376535366331 = struct {
	Count     [55]uint32
	Pos       [3 * 55]uint32
	NumStmt   [55]uint16
} {
	Pos: [3 * 55]uint32{
		45, 47, 0x10002f, // [0]
		50, 50, 0x80002, // [1]
		47, 48, 0x3e0010, // [2]
		54, 56, 0x100030, // [3]
		59, 59, 0x80002, // [4]
		56, 57, 0x400010, // [5]
		63, 66, 0x100021, // [6]
		71, 76, 0xd0002, // [7]
		66, 67, 0x370010, // [8]
		80, 84, 0x20021, // [9]
		87, 90, 0x2001c, // [10]
		93, 98, 0x20030, // [11]
		101, 103, 0x20041, // [12]
		106, 108, 0x20035, // [13]
		111, 112, 0x1a004f, // [14]
		115, 116, 0x180002, // [15]
		119, 119, 0x560002, // [16]
		112, 114, 0x3001a, // [17]
		116, 118, 0x30018, // [18]
		122, 124, 0x20025, // [19]
		128, 130, 0x190048, // [20]
		138, 138, 0x80002, // [21]
		130, 131, 0x1b0019, // [22]
		136, 136, 0x1c0003, // [23]
		131, 132, 0x24001b, // [24]
		132, 133, 0x110024, // [25]
		142, 144, 0x1b002f, // [26]
		147, 147, 0xe0002, // [27]
		144, 146, 0x3001b, // [28]
		151, 153, 0x1b0033, // [29]
		156, 156, 0xe0002, // [30]
		153, 155, 0x3001b, // [31]
		163, 165, 0x2001e, // [32]
		168, 170, 0x2001c, // [33]
		176, 178, 0x2001f, // [34]
		182, 184, 0x1d002e, // [35]
		187, 189, 0x1d0002, // [36]
		195, 195, 0xf0002, // [37]
		184, 186, 0x3001d, // [38]
		189, 190, 0x18001d, // [39]
		193, 193, 0x150003, // [40]
		190, 192, 0x40018, // [41]
		216, 220, 0x20026, // [42]
		224, 226, 0xd0036, // [43]
		230, 230, 0x120002, // [44]
		226, 228, 0x3000d, // [45]
		231, 232, 0x100013, // [46]
		236, 236, 0x1a0003, // [47]
		237, 238, 0x300016, // [48]
		243, 243, 0x250003, // [49]
		246, 248, 0x340016, // [50]
		249, 250, 0x30000a, // [51]
		232, 235, 0x40010, // [52]
		238, 241, 0x40030, // [53]
		243, 245, 0x40025, // [54]
	},
	NumStmt: [55]uint16{
		2, // 0
		1, // 1
		1, // 2
		2, // 3
		1, // 4
		1, // 5
		3, // 6
		3, // 7
		1, // 8
		3, // 9
		2, // 10
		4, // 11
		1, // 12
		1, // 13
		1, // 14
		2, // 15
		1, // 16
		1, // 17
		1, // 18
		1, // 19
		1, // 20
		1, // 21
		1, // 22
		1, // 23
		1, // 24
		1, // 25
		2, // 26
		1, // 27
		1, // 28
		2, // 29
		1, // 30
		1, // 31
		1, // 32
		1, // 33
		1, // 34
		2, // 35
		3, // 36
		1, // 37
		1, // 38
		1, // 39
		1, // 40
		1, // 41
		3, // 42
		2, // 43
		1, // 44
		1, // 45
		1, // 46
		1, // 47
		1, // 48
		1, // 49
		1, // 50
		1, // 51
		2, // 52
		2, // 53
		1, // 54
	},
}
var _ = _cover_atomic_.LoadUint32
