//line /home/cooper/go/src/github.com/hyperledger/fabric/core/admin/validate.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package admin; import _cover_atomic_ "sync/atomic"

import (
	"context"
	"time"

	"github.com/hyperledger/fabric/common/util"
	"github.com/hyperledger/fabric/protos/common"
	"github.com/hyperledger/fabric/protos/peer"
	"github.com/hyperledger/fabric/protos/utils"
	"github.com/pkg/errors"
)

var (
	accessDenied = errors.New("access denied")
	timeDiff     = time.Minute * 15
)

type validator struct {
	ace AccessControlEvaluator
}

func (v *validator) validate(ctx context.Context, env *common.Envelope) (*peer.AdminOperation, error) {_cover_atomic_.AddUint32(&GoCover_1_353964393634633462376530.Count[0], 1);
	op, sd, err := validateStructure(ctx, env)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_353964393634633462376530.Count[3], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_1_353964393634633462376530.Count[1], 1);addr := util.ExtractRemoteAddress(ctx)
	if err := v.ace.Evaluate(sd); err != nil {_cover_atomic_.AddUint32(&GoCover_1_353964393634633462376530.Count[4], 1);
		logger.Warningf("Request from %s unauthorized due to authentication: %v", addr, err)
		return nil, accessDenied
	}

	_cover_atomic_.AddUint32(&GoCover_1_353964393634633462376530.Count[2], 1);return op, nil
}

func validateStructure(ctx context.Context, env *common.Envelope) (*peer.AdminOperation, []*common.SignedData, error) {_cover_atomic_.AddUint32(&GoCover_1_353964393634633462376530.Count[5], 1);
	if ctx == nil {_cover_atomic_.AddUint32(&GoCover_1_353964393634633462376530.Count[12], 1);
		return nil, nil, errors.New("nil context")
	}
	_cover_atomic_.AddUint32(&GoCover_1_353964393634633462376530.Count[6], 1);if env == nil {_cover_atomic_.AddUint32(&GoCover_1_353964393634633462376530.Count[13], 1);
		return nil, nil, errors.New("nil envelope")
	}
	_cover_atomic_.AddUint32(&GoCover_1_353964393634633462376530.Count[7], 1);addr := util.ExtractRemoteAddress(ctx)
	op := &peer.AdminOperation{}
	ch, err := utils.UnmarshalEnvelopeOfType(env, common.HeaderType_PEER_ADMIN_OPERATION, op)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_353964393634633462376530.Count[14], 1);
		logger.Warningf("Request from %s is badly formed: +%v", addr, err)
		return nil, nil, errors.Wrap(err, "bad request")
	}

	_cover_atomic_.AddUint32(&GoCover_1_353964393634633462376530.Count[8], 1);if ch.Timestamp == nil {_cover_atomic_.AddUint32(&GoCover_1_353964393634633462376530.Count[15], 1);
		logger.Warningf("Request from %s has no timestamp", addr)
		return nil, nil, errors.Errorf("empty timestamp")
	}
	_cover_atomic_.AddUint32(&GoCover_1_353964393634633462376530.Count[9], 1);ts := ch.Timestamp
	reqTs := time.Unix(ts.Seconds, int64(ts.Nanos))
	now := time.Now()
	if reqTs.Add(timeDiff).Before(now) || reqTs.Add(-timeDiff).After(now) {_cover_atomic_.AddUint32(&GoCover_1_353964393634633462376530.Count[16], 1);
		logger.Warningf("Request from %s unauthorized due to incorrect time: %s", addr, reqTs.String())
		return nil, nil, accessDenied
	}
	_cover_atomic_.AddUint32(&GoCover_1_353964393634633462376530.Count[10], 1);sd, err := env.AsSignedData()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_353964393634633462376530.Count[17], 1);
		return nil, nil, errors.Errorf("bad request, cannot extract signed data: %v", err)
	}
	_cover_atomic_.AddUint32(&GoCover_1_353964393634633462376530.Count[11], 1);return op, sd, nil
}

var GoCover_1_353964393634633462376530 = struct {
	Count     [18]uint32
	Pos       [3 * 18]uint32
	NumStmt   [18]uint16
} {
	Pos: [3 * 18]uint32{
		29, 31, 0x100067, // [0]
		34, 35, 0x2b0002, // [1]
		40, 40, 0x100002, // [2]
		31, 33, 0x30010, // [3]
		35, 38, 0x3002b, // [4]
		43, 44, 0x100077, // [5]
		47, 47, 0x100002, // [6]
		50, 53, 0x100002, // [7]
		58, 58, 0x190002, // [8]
		62, 65, 0x480002, // [9]
		69, 70, 0x100002, // [10]
		73, 73, 0x140002, // [11]
		44, 46, 0x30010, // [12]
		47, 49, 0x30010, // [13]
		53, 56, 0x30010, // [14]
		58, 61, 0x30019, // [15]
		65, 68, 0x30048, // [16]
		70, 72, 0x30010, // [17]
	},
	NumStmt: [18]uint16{
		2, // 0
		2, // 1
		1, // 2
		1, // 3
		2, // 4
		1, // 5
		1, // 6
		4, // 7
		1, // 8
		4, // 9
		2, // 10
		1, // 11
		1, // 12
		1, // 13
		2, // 14
		2, // 15
		2, // 16
		1, // 17
	},
}
var _ = _cover_atomic_.LoadUint32
