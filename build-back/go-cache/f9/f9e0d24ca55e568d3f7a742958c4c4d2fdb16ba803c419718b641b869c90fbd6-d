//line /home/cooper/go/src/github.com/hyperledger/fabric/common/channelconfig/applicationorg.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package channelconfig; import _cover_atomic_ "sync/atomic"

import (
	"fmt"

	cb "github.com/hyperledger/fabric/protos/common"
	pb "github.com/hyperledger/fabric/protos/peer"
	"github.com/pkg/errors"
)

const (
	// AnchorPeersKey is the key name for the AnchorPeers ConfigValue
	AnchorPeersKey = "AnchorPeers"
)

// ApplicationOrgProtos are deserialized from the config
type ApplicationOrgProtos struct {
	AnchorPeers *pb.AnchorPeers
}

// ApplicationOrgConfig defines the configuration for an application org
type ApplicationOrgConfig struct {
	*OrganizationConfig
	protos *ApplicationOrgProtos
	name   string
}

// NewApplicationOrgConfig creates a new config for an application org
func NewApplicationOrgConfig(id string, orgGroup *cb.ConfigGroup, mspConfig *MSPConfigHandler) (*ApplicationOrgConfig, error) {_cover_atomic_.AddUint32(&GoCover_3_373339383034363064316135.Count[0], 1);
	if len(orgGroup.Groups) > 0 {_cover_atomic_.AddUint32(&GoCover_3_373339383034363064316135.Count[4], 1);
		return nil, fmt.Errorf("ApplicationOrg config does not allow sub-groups")
	}

	_cover_atomic_.AddUint32(&GoCover_3_373339383034363064316135.Count[1], 1);protos := &ApplicationOrgProtos{}
	orgProtos := &OrganizationProtos{}

	if err := DeserializeProtoValuesFromGroup(orgGroup, protos, orgProtos); err != nil {_cover_atomic_.AddUint32(&GoCover_3_373339383034363064316135.Count[5], 1);
		return nil, errors.Wrap(err, "failed to deserialize values")
	}

	_cover_atomic_.AddUint32(&GoCover_3_373339383034363064316135.Count[2], 1);aoc := &ApplicationOrgConfig{
		name:   id,
		protos: protos,
		OrganizationConfig: &OrganizationConfig{
			name:             id,
			protos:           orgProtos,
			mspConfigHandler: mspConfig,
		},
	}

	if err := aoc.Validate(); err != nil {_cover_atomic_.AddUint32(&GoCover_3_373339383034363064316135.Count[6], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_3_373339383034363064316135.Count[3], 1);return aoc, nil
}

// AnchorPeers returns the list of anchor peers of this Organization
func (aog *ApplicationOrgConfig) AnchorPeers() []*pb.AnchorPeer {_cover_atomic_.AddUint32(&GoCover_3_373339383034363064316135.Count[7], 1);
	return aog.protos.AnchorPeers.AnchorPeers
}

func (aoc *ApplicationOrgConfig) Validate() error {_cover_atomic_.AddUint32(&GoCover_3_373339383034363064316135.Count[8], 1);
	logger.Debugf("Anchor peers for org %s are %v", aoc.name, aoc.protos.AnchorPeers)
	return aoc.OrganizationConfig.Validate()
}

var GoCover_3_373339383034363064316135 = struct {
	Count     [9]uint32
	Pos       [3 * 9]uint32
	NumStmt   [9]uint16
} {
	Pos: [3 * 9]uint32{
		35, 36, 0x1e007f, // [0]
		40, 43, 0x550002, // [1]
		47, 57, 0x270002, // [2]
		61, 61, 0x110002, // [3]
		36, 38, 0x3001e, // [4]
		43, 45, 0x30055, // [5]
		57, 59, 0x30027, // [6]
		65, 67, 0x20041, // [7]
		69, 72, 0x20033, // [8]
	},
	NumStmt: [9]uint16{
		1, // 0
		3, // 1
		2, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
		2, // 8
	},
}
var _ = _cover_atomic_.LoadUint32
