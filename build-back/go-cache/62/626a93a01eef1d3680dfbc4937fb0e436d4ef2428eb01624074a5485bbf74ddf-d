//line /home/cooper/go/src/github.com/hyperledger/fabric/core/chaincode/shim/ext/entities/testutils.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package entities; import _cover_atomic_ "sync/atomic"

import (
	"fmt"
	"sync"

	b "github.com/hyperledger/fabric/bccsp"
	"github.com/hyperledger/fabric/bccsp/factory"
)

var bccspInst b.BCCSP
var o sync.Once

func initOnce() {_cover_atomic_.AddUint32(&GoCover_3_336436626366316266366632.Count[0], 1);
	factory.InitFactories(nil)
	bccspInst = factory.GetDefault()
}

func GetEncrypterEntityForTest(id string) (EncrypterEntity, error) {_cover_atomic_.AddUint32(&GoCover_3_336436626366316266366632.Count[1], 1);
	o.Do(initOnce)

	sk, err := bccspInst.KeyGen(&b.AES256KeyGenOpts{Temporary: true})
	if err != nil {_cover_atomic_.AddUint32(&GoCover_3_336436626366316266366632.Count[4], 1);
		return nil, fmt.Errorf("GetEncrypterEntityForTest error: KeyGen returned %s", err)
	}

	_cover_atomic_.AddUint32(&GoCover_3_336436626366316266366632.Count[2], 1);ent, err := NewEncrypterEntity(id, bccspInst, sk, &b.AESCBCPKCS7ModeOpts{}, &b.AESCBCPKCS7ModeOpts{})
	if err != nil {_cover_atomic_.AddUint32(&GoCover_3_336436626366316266366632.Count[5], 1);
		return nil, fmt.Errorf("GetEncrypterEntityForTest error: NewEncrypterEntity returned %s", err)
	}

	_cover_atomic_.AddUint32(&GoCover_3_336436626366316266366632.Count[3], 1);return ent, nil
}

func GetEncrypterSignerEntityForTest(id string) (EncrypterSignerEntity, error) {_cover_atomic_.AddUint32(&GoCover_3_336436626366316266366632.Count[6], 1);
	o.Do(initOnce)

	sk_enc, err := bccspInst.KeyGen(&b.AES256KeyGenOpts{Temporary: true})
	if err != nil {_cover_atomic_.AddUint32(&GoCover_3_336436626366316266366632.Count[10], 1);
		return nil, fmt.Errorf("GetEncrypterSignerEntityForTest error: KeyGen returned %s", err)
	}

	_cover_atomic_.AddUint32(&GoCover_3_336436626366316266366632.Count[7], 1);sk_sig, err := bccspInst.KeyGen(&b.ECDSAP256KeyGenOpts{Temporary: true})
	if err != nil {_cover_atomic_.AddUint32(&GoCover_3_336436626366316266366632.Count[11], 1);
		return nil, fmt.Errorf("GetEncrypterSignerEntityForTest error: KeyGen returned %s", err)
	}

	_cover_atomic_.AddUint32(&GoCover_3_336436626366316266366632.Count[8], 1);ent, err := NewEncrypterSignerEntity(id, bccspInst, sk_enc, sk_sig, &b.AESCBCPKCS7ModeOpts{}, &b.AESCBCPKCS7ModeOpts{}, nil, &b.SHA256Opts{})
	if err != nil {_cover_atomic_.AddUint32(&GoCover_3_336436626366316266366632.Count[12], 1);
		return nil, fmt.Errorf("GetEncrypterSignerEntityForTest error: NewEncrypterSignerEntity returned %s", err)
	}

	_cover_atomic_.AddUint32(&GoCover_3_336436626366316266366632.Count[9], 1);return ent, nil
}

var GoCover_3_336436626366316266366632 = struct {
	Count     [13]uint32
	Pos       [3 * 13]uint32
	NumStmt   [13]uint16
} {
	Pos: [3 * 13]uint32{
		20, 23, 0x20011, // [0]
		25, 29, 0x100044, // [1]
		33, 34, 0x100002, // [2]
		38, 38, 0x110002, // [3]
		29, 31, 0x30010, // [4]
		34, 36, 0x30010, // [5]
		41, 45, 0x100050, // [6]
		49, 50, 0x100002, // [7]
		54, 55, 0x100002, // [8]
		59, 59, 0x110002, // [9]
		45, 47, 0x30010, // [10]
		50, 52, 0x30010, // [11]
		55, 57, 0x30010, // [12]
	},
	NumStmt: [13]uint16{
		2, // 0
		3, // 1
		2, // 2
		1, // 3
		1, // 4
		1, // 5
		3, // 6
		2, // 7
		2, // 8
		1, // 9
		1, // 10
		1, // 11
		1, // 12
	},
}
var _ = _cover_atomic_.LoadUint32
