//line /home/cooper/go/src/github.com/hyperledger/fabric/bccsp/idemix/handlers/issuer.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/
package handlers; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric/bccsp"
	"github.com/pkg/errors"
)

// issuerSecretKey contains the issuer secret key
// and implements the bccsp.Key interface
type issuerSecretKey struct {
	// sk is the idemix reference to the issuer key
	sk IssuerSecretKey
	// exportable if true, sk can be exported via the Bytes function
	exportable bool
}

func NewIssuerSecretKey(sk IssuerSecretKey, exportable bool) *issuerSecretKey {_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[0], 1);
	return &issuerSecretKey{sk: sk, exportable: exportable}
}

func (k *issuerSecretKey) Bytes() ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[1], 1);
	if k.exportable {_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[3], 1);
		return k.sk.Bytes()
	}

	_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[2], 1);return nil, errors.New("not exportable")
}

func (k *issuerSecretKey) SKI() []byte {_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[4], 1);
	pk, err := k.PublicKey()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[6], 1);
		return nil
	}

	_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[5], 1);return pk.SKI()
}

func (*issuerSecretKey) Symmetric() bool {_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[7], 1);
	return false
}

func (*issuerSecretKey) Private() bool {_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[8], 1);
	return true
}

func (k *issuerSecretKey) PublicKey() (bccsp.Key, error) {_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[9], 1);
	return &issuerPublicKey{k.sk.Public()}, nil
}

// issuerPublicKey contains the issuer public key
// and implements the bccsp.Key interface
type issuerPublicKey struct {
	pk IssuerPublicKey
}

func NewIssuerPublicKey(pk IssuerPublicKey) *issuerPublicKey {_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[10], 1);
	return &issuerPublicKey{pk}
}

func (k *issuerPublicKey) Bytes() ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[11], 1);
	return k.pk.Bytes()
}

func (k *issuerPublicKey) SKI() []byte {_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[12], 1);
	return k.pk.Hash()
}

func (*issuerPublicKey) Symmetric() bool {_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[13], 1);
	return false
}

func (*issuerPublicKey) Private() bool {_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[14], 1);
	return false
}

func (k *issuerPublicKey) PublicKey() (bccsp.Key, error) {_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[15], 1);
	return k, nil
}

// IssuerKeyGen generates issuer secret keys.
type IssuerKeyGen struct {
	// exportable is a flag to allow an issuer secret key to be marked as exportable.
	// If a secret key is marked as exportable, its Bytes method will return the key's byte representation.
	Exportable bool
	// Issuer implements the underlying cryptographic algorithms
	Issuer Issuer
}

func (g *IssuerKeyGen) KeyGen(opts bccsp.KeyGenOpts) (k bccsp.Key, err error) {_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[16], 1);
	o, ok := opts.(*bccsp.IdemixIssuerKeyGenOpts)
	if !ok {_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[19], 1);
		return nil, errors.New("invalid options, expected *bccsp.IdemixIssuerKeyGenOpts")
	}

	// Create a new key pair
	_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[17], 1);key, err := g.Issuer.NewKey(o.AttributeNames)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[20], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[18], 1);return &issuerSecretKey{exportable: g.Exportable, sk: key}, nil
}

// IssuerPublicKeyImporter imports issuer public keys
type IssuerPublicKeyImporter struct {
	// Issuer implements the underlying cryptographic algorithms
	Issuer Issuer
}

func (i *IssuerPublicKeyImporter) KeyImport(raw interface{}, opts bccsp.KeyImportOpts) (k bccsp.Key, err error) {_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[21], 1);
	der, ok := raw.([]byte)
	if !ok {_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[26], 1);
		return nil, errors.New("invalid raw, expected byte array")
	}

	_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[22], 1);if len(der) == 0 {_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[27], 1);
		return nil, errors.New("invalid raw, it must not be nil")
	}

	_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[23], 1);o, ok := opts.(*bccsp.IdemixIssuerPublicKeyImportOpts)
	if !ok {_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[28], 1);
		return nil, errors.New("invalid options, expected *bccsp.IdemixIssuerPublicKeyImportOpts")
	}

	_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[24], 1);pk, err := i.Issuer.NewPublicKeyFromBytes(raw.([]byte), o.AttributeNames)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[29], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_2_353738643438356165663564.Count[25], 1);return &issuerPublicKey{pk}, nil
}

var GoCover_2_353738643438356165663564 = struct {
	Count     [30]uint32
	Pos       [3 * 30]uint32
	NumStmt   [30]uint16
} {
	Pos: [3 * 30]uint32{
		22, 24, 0x2004f, // [0]
		26, 27, 0x120033, // [1]
		31, 31, 0x2a0002, // [2]
		27, 29, 0x30012, // [3]
		34, 36, 0x100028, // [4]
		40, 40, 0x110002, // [5]
		36, 38, 0x30010, // [6]
		43, 45, 0x2002a, // [7]
		47, 49, 0x20028, // [8]
		51, 53, 0x2003a, // [9]
		61, 63, 0x2003e, // [10]
		65, 67, 0x20033, // [11]
		69, 71, 0x20028, // [12]
		73, 75, 0x2002a, // [13]
		77, 79, 0x20028, // [14]
		81, 83, 0x2003a, // [15]
		94, 96, 0x9004f, // [16]
		101, 102, 0x100002, // [17]
		106, 106, 0x410002, // [18]
		96, 98, 0x30009, // [19]
		102, 104, 0x30010, // [20]
		115, 117, 0x90071, // [21]
		121, 121, 0x130002, // [22]
		125, 126, 0x90002, // [23]
		130, 131, 0x100002, // [24]
		135, 135, 0x220002, // [25]
		117, 119, 0x30009, // [26]
		121, 123, 0x30013, // [27]
		126, 128, 0x30009, // [28]
		131, 133, 0x30010, // [29]
	},
	NumStmt: [30]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
		2, // 4
		1, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
		1, // 10
		1, // 11
		1, // 12
		1, // 13
		1, // 14
		1, // 15
		2, // 16
		2, // 17
		1, // 18
		1, // 19
		1, // 20
		2, // 21
		1, // 22
		2, // 23
		2, // 24
		1, // 25
		1, // 26
		1, // 27
		1, // 28
		1, // 29
	},
}
var _ = _cover_atomic_.LoadUint32
