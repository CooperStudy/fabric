//line /home/cooper/go/src/github.com/hyperledger/fabric/core/handlers/auth/plugin/filter.go:1
/*
Copyright IBM Corp, SecureKey Technologies Inc. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package main; import _cover_atomic_ "sync/atomic"

import (
	"context"

	"github.com/hyperledger/fabric/core/handlers/auth"
	"github.com/hyperledger/fabric/protos/peer"
)

// NewFilter creates a new Filter
func NewFilter() auth.Filter {_cover_atomic_.AddUint32(&GoCover_0_613234346262663733636531.Count[0], 1);
	return &filter{}
}

type filter struct {
	next peer.EndorserServer
}

// Init initializes the Filter with the next EndorserServer
func (f *filter) Init(next peer.EndorserServer) {_cover_atomic_.AddUint32(&GoCover_0_613234346262663733636531.Count[1], 1);
	f.next = next
}

// ProcessProposal processes a signed proposal
func (f *filter) ProcessProposal(ctx context.Context, signedProp *peer.SignedProposal) (*peer.ProposalResponse, error) {_cover_atomic_.AddUint32(&GoCover_0_613234346262663733636531.Count[2], 1);
	return f.next.ProcessProposal(ctx, signedProp)
}

func main() {_cover_atomic_.AddUint32(&GoCover_0_613234346262663733636531.Count[3], 1);
}

var GoCover_0_613234346262663733636531 = struct {
	Count     [4]uint32
	Pos       [3 * 4]uint32
	NumStmt   [4]uint16
} {
	Pos: [3 * 4]uint32{
		17, 19, 0x2001e, // [0]
		26, 28, 0x20031, // [1]
		31, 33, 0x20078, // [2]
		35, 36, 0x2000e, // [3]
	},
	NumStmt: [4]uint16{
		1, // 0
		1, // 1
		1, // 2
		0, // 3
	},
}
var _ = _cover_atomic_.LoadUint32
