//line /home/cooper/go/src/github.com/hyperledger/fabric/common/capabilities/application.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package capabilities; import _cover_atomic_ "sync/atomic"

import (
	cb "github.com/hyperledger/fabric/protos/common"
)

const (
	applicationTypeName = "Application"

	// ApplicationV1_1 is the capabilties string for standard new non-backwards compatible fabric v1.1 application capabilities.
	ApplicationV1_1 = "V1_1"

	// ApplicationV1_2 is the capabilties string for standard new non-backwards compatible fabric v1.2 application capabilities.
	ApplicationV1_2 = "V1_2"

	// ApplicationV1_3 is the capabilties string for standard new non-backwards compatible fabric v1.3 application capabilities.
	ApplicationV1_3 = "V1_3"

	// ApplicationPvtDataExperimental is the capabilties string for private data using the experimental feature of collections/sideDB.
	ApplicationPvtDataExperimental = "V1_1_PVTDATA_EXPERIMENTAL"

	// ApplicationResourcesTreeExperimental is the capabilties string for private data using the experimental feature of collections/sideDB.
	ApplicationResourcesTreeExperimental = "V1_1_RESOURCETREE_EXPERIMENTAL"

	ApplicationFabTokenExperimental = "V1_4_FABTOKEN_EXPERIMENTAL"
)

// ApplicationProvider provides capabilities information for application level config.
type ApplicationProvider struct {
	*registry
	v11                     bool
	v12                     bool
	v13                     bool
	v11PvtDataExperimental  bool
	v14FabTokenExperimental bool
}

// NewApplicationProvider creates a application capabilities provider.
func NewApplicationProvider(capabilities map[string]*cb.Capability) *ApplicationProvider {_cover_atomic_.AddUint32(&GoCover_0_333764323863383062363335.Count[0], 1);
	ap := &ApplicationProvider{}
	ap.registry = newRegistry(ap, capabilities)
	_, ap.v11 = capabilities[ApplicationV1_1]
	_, ap.v12 = capabilities[ApplicationV1_2]
	_, ap.v13 = capabilities[ApplicationV1_3]
	_, ap.v11PvtDataExperimental = capabilities[ApplicationPvtDataExperimental]
	_, ap.v14FabTokenExperimental = capabilities[ApplicationFabTokenExperimental]
	return ap
}

// Type returns a descriptive string for logging purposes.
func (ap *ApplicationProvider) Type() string {_cover_atomic_.AddUint32(&GoCover_0_333764323863383062363335.Count[1], 1);
	return applicationTypeName
}

// ACLs returns whether ACLs may be specified in the channel application config
func (ap *ApplicationProvider) ACLs() bool {_cover_atomic_.AddUint32(&GoCover_0_333764323863383062363335.Count[2], 1);
	return ap.v12 || ap.v13
}

// ForbidDuplicateTXIdInBlock specifies whether two transactions with the same TXId are permitted
// in the same block or whether we mark the second one as TxValidationCode_DUPLICATE_TXID
func (ap *ApplicationProvider) ForbidDuplicateTXIdInBlock() bool {_cover_atomic_.AddUint32(&GoCover_0_333764323863383062363335.Count[3], 1);
	return ap.v11 || ap.v12 || ap.v13
}

// PrivateChannelData returns true if support for private channel data (a.k.a. collections) is enabled.
// In v1.1, the private channel data is experimental and has to be enabled explicitly.
// In v1.2, the private channel data is enabled by default.
func (ap *ApplicationProvider) PrivateChannelData() bool {_cover_atomic_.AddUint32(&GoCover_0_333764323863383062363335.Count[4], 1);
	return ap.v11PvtDataExperimental || ap.v12 || ap.v13
}

// CollectionUpgrade returns true if this channel is configured to allow updates to
// existing collection or add new collections through chaincode upgrade (as introduced in v1.2)
func (ap ApplicationProvider) CollectionUpgrade() bool {_cover_atomic_.AddUint32(&GoCover_0_333764323863383062363335.Count[5], 1);
	return ap.v12 || ap.v13
}

// V1_1Validation returns true is this channel is configured to perform stricter validation
// of transactions (as introduced in v1.1).
func (ap *ApplicationProvider) V1_1Validation() bool {_cover_atomic_.AddUint32(&GoCover_0_333764323863383062363335.Count[6], 1);
	return ap.v11 || ap.v12 || ap.v13
}

// V1_2Validation returns true if this channel is configured to perform stricter validation
// of transactions (as introduced in v1.2).
func (ap *ApplicationProvider) V1_2Validation() bool {_cover_atomic_.AddUint32(&GoCover_0_333764323863383062363335.Count[7], 1);
	return ap.v12 || ap.v13
}

// V1_3Validation returns true if this channel is configured to perform stricter validation
// of transactions (as introduced in v1.3).
func (ap *ApplicationProvider) V1_3Validation() bool {_cover_atomic_.AddUint32(&GoCover_0_333764323863383062363335.Count[8], 1);
	return ap.v13
}

// MetadataLifecycle indicates whether the peer should use the deprecated and problematic
// v1.0/v1.1/v1.2 lifecycle, or whether it should use the newer per channel peer local chaincode
// metadata package approach planned for release with Fabric v1.3
func (ap *ApplicationProvider) MetadataLifecycle() bool {_cover_atomic_.AddUint32(&GoCover_0_333764323863383062363335.Count[9], 1);
	return false
}

// KeyLevelEndorsement returns true if this channel supports endorsement
// policies expressible at a ledger key granularity, as described in FAB-8812
func (ap *ApplicationProvider) KeyLevelEndorsement() bool {_cover_atomic_.AddUint32(&GoCover_0_333764323863383062363335.Count[10], 1);
	return ap.v13
}

// FabToken returns true if support for fabric token functions is enabled.
func (ap *ApplicationProvider) FabToken() bool {_cover_atomic_.AddUint32(&GoCover_0_333764323863383062363335.Count[11], 1);
	return ap.v14FabTokenExperimental
}

// HasCapability returns true if the capability is supported by this binary.
func (ap *ApplicationProvider) HasCapability(capability string) bool {_cover_atomic_.AddUint32(&GoCover_0_333764323863383062363335.Count[12], 1);
	switch capability {
	// Add new capability names here
	case ApplicationV1_1:_cover_atomic_.AddUint32(&GoCover_0_333764323863383062363335.Count[13], 1);
		return true
	case ApplicationV1_2:_cover_atomic_.AddUint32(&GoCover_0_333764323863383062363335.Count[14], 1);
		return true
	case ApplicationV1_3:_cover_atomic_.AddUint32(&GoCover_0_333764323863383062363335.Count[15], 1);
		return true
	case ApplicationPvtDataExperimental:_cover_atomic_.AddUint32(&GoCover_0_333764323863383062363335.Count[16], 1);
		return true
	case ApplicationResourcesTreeExperimental:_cover_atomic_.AddUint32(&GoCover_0_333764323863383062363335.Count[17], 1);
		return true
	case ApplicationFabTokenExperimental:_cover_atomic_.AddUint32(&GoCover_0_333764323863383062363335.Count[18], 1);
		return true
	default:_cover_atomic_.AddUint32(&GoCover_0_333764323863383062363335.Count[19], 1);
		return false
	}
}

var GoCover_0_333764323863383062363335 = struct {
	Count     [20]uint32
	Pos       [3 * 20]uint32
	NumStmt   [20]uint16
} {
	Pos: [3 * 20]uint32{
		45, 54, 0x2005a, // [0]
		57, 59, 0x2002e, // [1]
		62, 64, 0x2002c, // [2]
		68, 70, 0x20042, // [3]
		75, 77, 0x2003a, // [4]
		81, 83, 0x20038, // [5]
		87, 89, 0x20036, // [6]
		93, 95, 0x20036, // [7]
		99, 101, 0x20036, // [8]
		106, 108, 0x20039, // [9]
		112, 114, 0x2003b, // [10]
		117, 119, 0x20030, // [11]
		122, 123, 0x140046, // [12]
		125, 126, 0xe0017, // [13]
		127, 128, 0xe0017, // [14]
		129, 130, 0xe0017, // [15]
		131, 132, 0xe0026, // [16]
		133, 134, 0xe002c, // [17]
		135, 136, 0xe0027, // [18]
		137, 138, 0xf000a, // [19]
	},
	NumStmt: [20]uint16{
		8, // 0
		1, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
		1, // 10
		1, // 11
		1, // 12
		1, // 13
		1, // 14
		1, // 15
		1, // 16
		1, // 17
		1, // 18
		1, // 19
	},
}
var _ = _cover_atomic_.LoadUint32
