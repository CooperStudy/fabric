//line /home/cooper/go/src/github.com/hyperledger/fabric/protos/utils/chaincodeutils.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package utils; import _cover_atomic_ "sync/atomic"

import (
	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/protos/peer"
	"github.com/pkg/errors"
)

// UnmarshalChaincodeDeploymentSpec unmarshals a ChaincodeDeploymentSpec from
// the provided bytes
func UnmarshalChaincodeDeploymentSpec(cdsBytes []byte) (*peer.ChaincodeDeploymentSpec, error) {_cover_atomic_.AddUint32(&GoCover_1_333834643165316261363934.Count[0], 1);
	cds := &peer.ChaincodeDeploymentSpec{}
	err := proto.Unmarshal(cdsBytes, cds)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_333834643165316261363934.Count[2], 1);
		return nil, errors.Wrap(err, "error unmarshaling ChaincodeDeploymentSpec")
	}

	_cover_atomic_.AddUint32(&GoCover_1_333834643165316261363934.Count[1], 1);return cds, nil
}

var GoCover_1_333834643165316261363934 = struct {
	Count     [3]uint32
	Pos       [3 * 3]uint32
	NumStmt   [3]uint16
} {
	Pos: [3 * 3]uint32{
		17, 20, 0x10005f, // [0]
		24, 24, 0x110002, // [1]
		20, 22, 0x30010, // [2]
	},
	NumStmt: [3]uint16{
		3, // 0
		1, // 1
		1, // 2
	},
}
var _ = _cover_atomic_.LoadUint32
