// Copyright IBM Corp. All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
syntax = "proto3";

import "gossip/message.proto";
import "msp/msp_config.proto";
import "msp/identities.proto";

option go_package = "github.com/hyperledger/fabric/protos/discovery" ;

package discovery;

// Discovery defines a service that serves information about the fabric network
// like which peers, orderers, chaincodes, etc.
//Discovery 定义了一个服务，该服务提供有关 Fabric 网络的信息
//例如对等节点、排序节点、链码等
service Discovery {
    // Discover receives a signed request, and returns a response.
    // Discover 收到一个签名的请求，并返回一个响应。
    rpc Discover (SignedRequest) returns (Response) {}
}

// SignedRequest contains a serialized Request in the payload field
// and a signature.
// The identity that is used to verify the signature
// can be extracted from the authentication field of type AuthInfo
// in the Request itself after deserializing it.
/ SignedRequest 在有效载荷payload字段中包含一个序列化的请求和一个签名。
// identity用于验证签名
// 可以从AuthInfo类型的认证AuthInfo字段中提取
// 在反序列化后的请求本身中。
message SignedRequest {
    bytes payload   = 1;
    bytes signature = 2;
}

// Request contains authentication info about the client that sent the request
// and the queries it wishes to query the service
// 请求包含有关发送请求的客户端的身份验证信息
// 以及它希望查询服务的查询
message Request {
    // authentication contains information that the service uses to check
    // the client's eligibility for the queries.
    // 身份验证包含服务用来检查的信息
        // 客户端对查询的资格。
    AuthInfo authentication = 1;
    // queries
    // 查询
    repeated Query queries = 2;
}

message Response {
    // The results are returned in the same order of the queries
    // 结果按照查询顺序返回
    repeated QueryResult results = 1;
}

// AuthInfo aggregates authentication information that the server uses
// to authenticate the client
// AuthInfo 聚合了服务器使用的认证信息
// 验证客户端
message AuthInfo {
    // This is the identity of the client that is used to verify the signature
    // on the SignedRequest's payload.
    // It is a msp.SerializedIdentity in bytes form
    // 这是用于验证签名的客户端的身份
    // 在 SignedRequest 的负载payload上。
    // 它是一个字节形式的 msp.SerializedIdentity
    bytes client_identity = 1;

    // This is the hash of the client's TLS cert.
    // When the network is running with TLS, clients that don't include a certificate
    // will be denied access to the service.
    // Since the Request is encapsulated with a SignedRequest (which is signed),
    // this binds the TLS session to the enrollement identity of the client and
    // therefore both authenticates the client to the server,
    // and also prevents the server from relaying the request message to another server.
    // 这是客户端 TLS 证书的哈希值。
        // 当网络使用 TLS 运行时，不包含证书的客户端
        // 将被拒绝访问该服务。
        // 由于Request封装了一个SignedRequest（已签名），
        // 这将 TLS session会话绑定到客户端的注册身份enrollement identity，并且
        // 因此两者都向服务器验证客户端，
        // 并且还可以防止服务器将请求消息中继到另一台服务器。
    bytes client_tls_cert_hash = 2;
}

// Query asks for information in the context of a specific channel
// 查询在特定频道的上下文中询问信息
message Query {
    string channel = 1;
    oneof query {
        // ConfigQuery is used to query for the configuration of the channel,
        // such as FabricMSPConfig, and rorderer endpoints.
        // The client has to query a peer it trusts as it doesn't have means to self-verify
        // the authenticity of the returned result.
        // The result is returned in the form of ConfigResult.
        // ConfigQuery 用于查询通道的配置，
        // 例如 FabricMSPConfig 和 orderer 端点。
        // 客户端必须查询它信任的对等点，因为它没有自我验证的方法
        // 返回结果的真实性。
        // 结果以ConfigResult的形式返回。
        ConfigQuery config_query = 2;

        // PeerMembershipQuery queries for peers in a channel context,
        // and returns PeerMembershipResult
        // PeerMembershipQuery 查询通道上下文中的对等点，
        // 并返回 PeerMembershipResult
        PeerMembershipQuery peer_query = 3;

        // ChaincodeQuery queries for chaincodes by their name and version.
        // An empty version means any version can by returned.
        // ChaincodeQuery 通过名称和版本查询链码。
        // 空版本意味着可以返回任何版本。
        ChaincodeQuery cc_query = 4;

        // LocalPeerQuery queries for peers in a non channel context,
        // and returns PeerMembershipResult
        // LocalPeerQuery 查询非通道上下文中的对等点，
        // 并返回 PeerMembershipResult
        LocalPeerQuery local_peers = 5;
    }
}

// QueryResult contains a result for a given Query.
// The corresponding Query can be inferred by the index of the QueryResult from
// its enclosing Response message.
// QueryResults are ordered in the same order as the Queries are ordered in their enclosing Request.

// QueryResult 包含给定查询的结果。
// 根据QueryResult的索引可以推断出对应的Query
// 它的封闭响应消息。
// 查询结果的排序顺序与查询在其封闭请求中的排序顺序相同。
message QueryResult {
    oneof result {
        // Error indicates failure or refusal to process the query
        // 错误表示失败或拒绝处理查询
        Error error = 1;

        // ConfigResult contains the configuration of the channel,
        // such as FabricMSPConfig and orderer endpoints
        // ConfigResult 包含通道的配置，
        // 例如 FabricMSPConfig 和 orderer 端点
        ConfigResult config_result = 2;

        // ChaincodeQueryResult contains information about chaincodes,
        // and their corresponding endorsers
        // ChaincodeQueryResult 包含有关链码的信息，
        // 和他们对应的背书人
        ChaincodeQueryResult cc_query_res = 3;

        // PeerMembershipResult contains information about peers,
        // such as their identity, endpoints, and channel related state.
        // PeerMembershipResult 包含有关对等点的信息，
        // 例如他们的身份、端点和与通道相关的状态。
        PeerMembershipResult members = 4;
    }
}

// ConfigQuery requests a ConfigResult
// ConfigQuery 请求一个 ConfigResult
message ConfigQuery {

}

message ConfigResult {
    // msps is a map from MSP_ID to FabricMSPConfig
    map<string, msp.FabricMSPConfig> msps = 1;
    // orderers is a map from MSP_ID to endpoint lists of orderers
    map<string, Endpoints> orderers = 2;
}

// PeerMembershipQuery requests PeerMembershipResult.
// The filter field may be optionally populated in order
// for the peer membership to be filtered according to
// chaincodes that are installed on peers and collection
// access control policies.
// PeerMembershipQuery 请求 PeerMembershipResult。
// 过滤器字段可以选择性地按顺序填充
// 对于要根据以下条件过滤的对等成员资格
// 安装在节点和集合上的链码
// 访问控制策略。
message PeerMembershipQuery {
    ChaincodeInterest filter = 1;
}

// PeerMembershipResult contains peers mapped by their organizations (MSP_ID)
// PeerMembershipResult 包含由其组织映射的对等节点
message PeerMembershipResult {
    map<string, Peers> peers_by_org = 1;
}

// ChaincodeQuery requests ChaincodeQueryResults for a given
// list of chaincode invocations.
// Each invocation is a separate one, and the endorsement policy
// 链码调用列表。
// 每次调用都是一个单独的，背书策略
// is evaluated independantly for each given interest.
//为每个给定的interest独立评估。
message ChaincodeQuery {
    repeated ChaincodeInterest interests = 1;
}

// ChaincodeInterest defines an interest about an endorsement
// for a specific single chaincode invocation.
// Multiple chaincodes indicate chaincode to chaincode invocations.

// ChaincodeInterest 定义了一个关于背书的interest
// 对于特定的单个链码调用。
// 多个链码表示链码到链码的调用。
message ChaincodeInterest {
    repeated ChaincodeCall chaincodes = 1;
}

// ChaincodeCall defines a call to a chaincode.
// It may have collections that are related to the chaincode
// ChaincodeCall 定义对链码的调用。
// 它可能有与链码相关的集合
message ChaincodeCall {
    string name = 1;
    repeated string collection_names = 2;
}

// ChaincodeQueryResult contains EndorsementDescriptors for
// chaincodes
message ChaincodeQueryResult {
    repeated EndorsementDescriptor content = 1;
}

// LocalPeerQuery queries for peers in a non channel context
// LocalPeerQuery 查询非通道上下文中的节点
message LocalPeerQuery {
}

// EndorsementDescriptor contains information about which peers can be used
// EndorsementDescriptor 包含有关可以使用哪些对等点的信息
// to request endorsement from, such that the endorsement policy would be fulfilled.
// 请求背书，从而实现背书策略。
// Here is how to compute a set of peers to ask an endorsement from, given an EndorsementDescriptor:
//给定一个 EndorsementDescriptor，这里是如何计算一组节点来请求背书：
// Let e: G --> P be the endorsers_by_groups field that maps a group to a set of peers.
//让 e: G --> P 是将一个组映射到一组对等节点的
// Note that applying e on a group g yields a set of peers.
// 请注意，在组 g 上应用 e 会产生一组对等点。
// 1) Select a layout l: G --> N out of the layouts given.  //从给定的布局中选择一个布局
//    l is the quantities_by_group field of a Layout, and it maps a group to an integer.
// l 是一个Layout的quantity_by_group字段，它将一个组映射到一个整数。
// 2) R = {}  (an empty set of peers)
// 2) R = {}（一组空的对等点）
// 3) For each group g in the layout l, compute n = l(g)
//    3.1) Denote P_g as a set of n random peers {p0, p1, ... p_n} selected from e(g)
//    3.2) R = R U P_g  (add P_g to R)
//对于布局 l 中的每个组 g，计算 n = l(g)
// 3.1) 将 P_g 表示为从 e(g) 中选择的一组 n 个随机对等点 {p0, p1, ... p_n}
// 3.2) R = R U P_g（将 P_g 添加到 R）
// 4) The set of peers R is the peers the client needs to request endorsements from
// 4) 点集 R 是客户端需要从中请求背书的点

message EndorsementDescriptor {
    string chaincode = 1;
    // Specifies the endorsers, separated to groups.
    // 指定背书人，按组分开。
    map<string, Peers> endorsers_by_groups = 2;

    // Specifies options of fulfulling the endorsement policy.
    // Each option lists the group names, and the amount of signatures needed
    // from each group.
    // 指定实现背书策略的选项。
    // 每个选项都列出了组名和所需的签名数量
    // 来自每个组。
    repeated Layout layouts = 3;
}

// Layout contains a mapping from a group name to number of peers
// that are needed for fulfilling an endorsement policy
// 布局包含从组名到对等点数的映射
// 实现背书政策所需的
message Layout {
    // Specifies how many non repeated signatures of each group
    // are needed for endorsement
    // 指定每组有多少非重复签名
    // 需要背书
    map<string, uint32> quantities_by_group = 1;
}

// Peers contains a list of Peer(s)
// Peers 包含 Peer 列表
message Peers {
    repeated Peer peers = 1;
}

// Peer contains information about the peer such as its channel specific
// state, and membership information.
// Peer 包含有关 Peer 的信息，例如其特定于通道的信息
// 状态和成员信息。
message Peer {
    // This is an Envelope of a GossipMessage with a gossip.StateInfo message
    // 这是一个带有 gossip.StateInfo 消息的 GossipMessage 的信封
    gossip.Envelope state_info = 1;
    // This is an Envelope of a GossipMessage with a gossip.AliveMessage message
    // 这是一个带有 gossip.AliveMessage 消息的 GossipMessage 信封
    gossip.Envelope membership_info = 2;

    // This is the msp.SerializedIdentity of the peer, represented in bytes.
    //这是peer的 msp.SerializedIdentity，以字节表示。
    bytes identity = 3;
}

// Error denotes that something went wrong and contains the error message
// 错误表示出现问题并包含错误信息
message Error {
    string content = 1;
}

// Endpoints is a list of Endpoint(s)
// Endpoints 是一个 Endpoint(s) 列表
message Endpoints {
    repeated Endpoint endpoint = 1;
}

// Endpoint is a combination of a host and a port
// 端点是主机和端口的组合
message Endpoint {
    string host = 1;
    uint32 port = 2;
}


