//line /home/cooper/go/src/github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/txmgr/lockbasedtxmgr/lockbased_tx_simulator.go:1
/*
Copyright IBM Corp. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0
*/

package lockbasedtxmgr; import _cover_atomic_ "sync/atomic"

import (
	"fmt"

	commonledger "github.com/hyperledger/fabric/common/ledger"
	"github.com/hyperledger/fabric/core/ledger"
	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/rwsetutil"
	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/txmgr"
	"github.com/pkg/errors"
)

// LockBasedTxSimulator is a transaction simulator used in `LockBasedTxMgr`
type lockBasedTxSimulator struct {
	lockBasedQueryExecutor
	rwsetBuilder              *rwsetutil.RWSetBuilder
	writePerformed            bool
	pvtdataQueriesPerformed   bool
	simulationResultsComputed bool
	paginatedQueriesPerformed bool
}

func newLockBasedTxSimulator(txmgr *LockBasedTxMgr, txid string) (*lockBasedTxSimulator, error) {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[0], 1);
	rwsetBuilder := rwsetutil.NewRWSetBuilder()
	helper := newQueryHelper(txmgr, rwsetBuilder)
	logger.Debugf("constructing new tx simulator txid = [%s]", txid)
	return &lockBasedTxSimulator{lockBasedQueryExecutor{helper, txid}, rwsetBuilder, false, false, false, false}, nil
}

// SetState implements method in interface `ledger.TxSimulator`
func (s *lockBasedTxSimulator) SetState(ns string, key string, value []byte) error {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[1], 1);
	if err := s.checkWritePrecondition(key, value); err != nil {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[3], 1);
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[2], 1);s.rwsetBuilder.AddToWriteSet(ns, key, value)
	return nil
}

// DeleteState implements method in interface `ledger.TxSimulator`
func (s *lockBasedTxSimulator) DeleteState(ns string, key string) error {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[4], 1);
	return s.SetState(ns, key, nil)
}

// SetStateMultipleKeys implements method in interface `ledger.TxSimulator`
func (s *lockBasedTxSimulator) SetStateMultipleKeys(namespace string, kvs map[string][]byte) error {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[5], 1);
	for k, v := range kvs {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[7], 1);
		if err := s.SetState(namespace, k, v); err != nil {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[8], 1);
			return err
		}
	}
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[6], 1);return nil
}

// SetStateMetadata implements method in interface `ledger.TxSimulator`
func (s *lockBasedTxSimulator) SetStateMetadata(namespace, key string, metadata map[string][]byte) error {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[9], 1);
	if err := s.checkWritePrecondition(key, nil); err != nil {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[11], 1);
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[10], 1);s.rwsetBuilder.AddToMetadataWriteSet(namespace, key, metadata)
	return nil
}

// DeleteStateMetadata implements method in interface `ledger.TxSimulator`
func (s *lockBasedTxSimulator) DeleteStateMetadata(namespace, key string) error {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[12], 1);
	return s.SetStateMetadata(namespace, key, nil)
}

// SetPrivateData implements method in interface `ledger.TxSimulator`
func (s *lockBasedTxSimulator) SetPrivateData(ns, coll, key string, value []byte) error {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[13], 1);
	if err := s.helper.validateCollName(ns, coll); err != nil {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[16], 1);
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[14], 1);if err := s.checkWritePrecondition(key, value); err != nil {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[17], 1);
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[15], 1);s.writePerformed = true
	s.rwsetBuilder.AddToPvtAndHashedWriteSet(ns, coll, key, value)
	return nil
}

// DeletePrivateData implements method in interface `ledger.TxSimulator`
func (s *lockBasedTxSimulator) DeletePrivateData(ns, coll, key string) error {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[18], 1);
	return s.SetPrivateData(ns, coll, key, nil)
}

// SetPrivateDataMultipleKeys implements method in interface `ledger.TxSimulator`
func (s *lockBasedTxSimulator) SetPrivateDataMultipleKeys(ns, coll string, kvs map[string][]byte) error {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[19], 1);
	for k, v := range kvs {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[21], 1);
		if err := s.SetPrivateData(ns, coll, k, v); err != nil {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[22], 1);
			return err
		}
	}
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[20], 1);return nil
}

// GetPrivateDataRangeScanIterator implements method in interface `ledger.TxSimulator`
func (s *lockBasedTxSimulator) GetPrivateDataRangeScanIterator(namespace, collection, startKey, endKey string) (commonledger.ResultsIterator, error) {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[23], 1);
	if err := s.checkBeforePvtdataQueries(); err != nil {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[25], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[24], 1);return s.lockBasedQueryExecutor.GetPrivateDataRangeScanIterator(namespace, collection, startKey, endKey)
}

// SetPrivateDataMetadata implements method in interface `ledger.TxSimulator`
func (s *lockBasedTxSimulator) SetPrivateDataMetadata(namespace, collection, key string, metadata map[string][]byte) error {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[26], 1);
	if err := s.helper.validateCollName(namespace, collection); err != nil {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[29], 1);
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[27], 1);if err := s.checkWritePrecondition(key, nil); err != nil {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[30], 1);
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[28], 1);s.rwsetBuilder.AddToHashedMetadataWriteSet(namespace, collection, key, metadata)
	return nil
}

// DeletePrivateMetadata implements method in interface `ledger.TxSimulator`
func (s *lockBasedTxSimulator) DeletePrivateDataMetadata(namespace, collection, key string) error {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[31], 1);
	return s.SetPrivateDataMetadata(namespace, collection, key, nil)
}

// ExecuteQueryOnPrivateData implements method in interface `ledger.TxSimulator`
func (s *lockBasedTxSimulator) ExecuteQueryOnPrivateData(namespace, collection, query string) (commonledger.ResultsIterator, error) {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[32], 1);
	if err := s.checkBeforePvtdataQueries(); err != nil {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[34], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[33], 1);return s.lockBasedQueryExecutor.ExecuteQueryOnPrivateData(namespace, collection, query)
}

// GetStateRangeScanIteratorWithMetadata implements method in interface `ledger.QueryExecutor`
func (s *lockBasedTxSimulator) GetStateRangeScanIteratorWithMetadata(namespace string, startKey string, endKey string, metadata map[string]interface{}) (ledger.QueryResultsIterator, error) {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[35], 1);
	if err := s.checkBeforePaginatedQueries(); err != nil {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[37], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[36], 1);return s.lockBasedQueryExecutor.GetStateRangeScanIteratorWithMetadata(namespace, startKey, endKey, metadata)
}

// ExecuteQueryWithMetadata implements method in interface `ledger.QueryExecutor`
func (s *lockBasedTxSimulator) ExecuteQueryWithMetadata(namespace, query string, metadata map[string]interface{}) (ledger.QueryResultsIterator, error) {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[38], 1);
	if err := s.checkBeforePaginatedQueries(); err != nil {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[40], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[39], 1);return s.lockBasedQueryExecutor.ExecuteQueryWithMetadata(namespace, query, metadata)
}

// GetTxSimulationResults implements method in interface `ledger.TxSimulator`
func (s *lockBasedTxSimulator) GetTxSimulationResults() (*ledger.TxSimulationResults, error) {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[41], 1);
	if s.simulationResultsComputed {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[45], 1);
		return nil, errors.New("this function should only be called once on a transaction simulator instance")
	}
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[42], 1);defer func() {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[46], 1); s.simulationResultsComputed = true }()
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[43], 1);logger.Debugf("Simulation completed, getting simulation results")
	if s.helper.err != nil {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[47], 1);
		return nil, s.helper.err
	}
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[44], 1);s.helper.addRangeQueryInfo()
	return s.rwsetBuilder.GetTxSimulationResults()
}

// ExecuteUpdate implements method in interface `ledger.TxSimulator`
func (s *lockBasedTxSimulator) ExecuteUpdate(query string) error {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[48], 1);
	return errors.New("not supported")
}

func (s *lockBasedTxSimulator) checkWritePrecondition(key string, value []byte) error {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[49], 1);
	if err := s.helper.checkDone(); err != nil {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[54], 1);
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[50], 1);if err := s.checkPvtdataQueryPerformed(); err != nil {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[55], 1);
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[51], 1);if err := s.checkPaginatedQueryPerformed(); err != nil {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[56], 1);
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[52], 1);s.writePerformed = true
	if err := s.helper.txmgr.db.ValidateKeyValue(key, value); err != nil {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[57], 1);
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[53], 1);return nil
}

func (s *lockBasedTxSimulator) checkBeforePvtdataQueries() error {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[58], 1);
	if s.writePerformed {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[60], 1);
		return &txmgr.ErrUnsupportedTransaction{
			Msg: fmt.Sprintf("txid [%s]: Queries on pvt data is supported only in a read-only transaction", s.txid),
		}
	}
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[59], 1);s.pvtdataQueriesPerformed = true
	return nil
}

func (s *lockBasedTxSimulator) checkPvtdataQueryPerformed() error {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[61], 1);
	if s.pvtdataQueriesPerformed {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[63], 1);
		return &txmgr.ErrUnsupportedTransaction{
			Msg: fmt.Sprintf("txid [%s]: Transaction has already performed queries on pvt data. Writes are not allowed", s.txid),
		}
	}
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[62], 1);return nil
}

func (s *lockBasedTxSimulator) checkBeforePaginatedQueries() error {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[64], 1);
	if s.writePerformed {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[66], 1);
		return &txmgr.ErrUnsupportedTransaction{
			Msg: fmt.Sprintf("txid [%s]: Paginated queries are supported only in a read-only transaction", s.txid),
		}
	}
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[65], 1);s.paginatedQueriesPerformed = true
	return nil
}

func (s *lockBasedTxSimulator) checkPaginatedQueryPerformed() error {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[67], 1);
	if s.paginatedQueriesPerformed {_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[69], 1);
		return &txmgr.ErrUnsupportedTransaction{
			Msg: fmt.Sprintf("txid [%s]: Transaction has already performed a paginated query. Writes are not allowed", s.txid),
		}
	}
	_cover_atomic_.AddUint32(&GoCover_3_386331373365306636336339.Count[68], 1);return nil
}

var GoCover_3_386331373365306636336339 = struct {
	Count     [70]uint32
	Pos       [3 * 70]uint32
	NumStmt   [70]uint16
} {
	Pos: [3 * 70]uint32{
		28, 33, 0x20061, // [0]
		36, 37, 0x3d0054, // [1]
		40, 41, 0xc0002, // [2]
		37, 39, 0x3003d, // [3]
		45, 47, 0x20049, // [4]
		50, 51, 0x180064, // [5]
		56, 56, 0xc0002, // [6]
		51, 52, 0x350018, // [7]
		52, 54, 0x40035, // [8]
		60, 61, 0x3b006a, // [9]
		64, 65, 0xc0002, // [10]
		61, 63, 0x3003b, // [11]
		69, 71, 0x20051, // [12]
		74, 75, 0x3c0059, // [13]
		78, 78, 0x3d0002, // [14]
		81, 83, 0xc0002, // [15]
		75, 77, 0x3003c, // [16]
		78, 80, 0x3003d, // [17]
		87, 89, 0x2004e, // [18]
		92, 93, 0x180069, // [19]
		98, 98, 0xc0002, // [20]
		93, 94, 0x3a0018, // [21]
		94, 96, 0x4003a, // [22]
		102, 103, 0x360096, // [23]
		106, 106, 0x6a0002, // [24]
		103, 105, 0x30036, // [25]
		110, 111, 0x49007c, // [26]
		114, 114, 0x3b0002, // [27]
		117, 118, 0xc0002, // [28]
		111, 113, 0x30049, // [29]
		114, 116, 0x3003b, // [30]
		122, 124, 0x20063, // [31]
		127, 128, 0x360085, // [32]
		131, 131, 0x590002, // [33]
		128, 130, 0x30036, // [34]
		135, 136, 0x3800be, // [35]
		139, 139, 0x6e0002, // [36]
		136, 138, 0x30038, // [37]
		143, 144, 0x380098, // [38]
		147, 147, 0x560002, // [39]
		144, 146, 0x30038, // [40]
		151, 152, 0x21005e, // [41]
		155, 155, 0xf0002, // [42]
		156, 157, 0x190002, // [43]
		160, 161, 0x300002, // [44]
		152, 154, 0x30021, // [45]
		155, 155, 0x35000f, // [46]
		157, 159, 0x30019, // [47]
		165, 167, 0x20042, // [48]
		169, 170, 0x2d0057, // [49]
		173, 173, 0x370002, // [50]
		176, 176, 0x390002, // [51]
		179, 180, 0x470002, // [52]
		183, 183, 0xc0002, // [53]
		170, 172, 0x3002d, // [54]
		173, 175, 0x30037, // [55]
		176, 178, 0x30039, // [56]
		180, 182, 0x30047, // [57]
		186, 187, 0x160042, // [58]
		192, 193, 0xc0002, // [59]
		187, 191, 0x30016, // [60]
		196, 197, 0x1f0043, // [61]
		202, 202, 0xc0002, // [62]
		197, 201, 0x3001f, // [63]
		205, 206, 0x160044, // [64]
		211, 212, 0xc0002, // [65]
		206, 210, 0x30016, // [66]
		215, 216, 0x210045, // [67]
		221, 221, 0xc0002, // [68]
		216, 220, 0x30021, // [69]
	},
	NumStmt: [70]uint16{
		4, // 0
		1, // 1
		2, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
		2, // 10
		1, // 11
		1, // 12
		1, // 13
		1, // 14
		3, // 15
		1, // 16
		1, // 17
		1, // 18
		1, // 19
		1, // 20
		1, // 21
		1, // 22
		1, // 23
		1, // 24
		1, // 25
		1, // 26
		1, // 27
		2, // 28
		1, // 29
		1, // 30
		1, // 31
		1, // 32
		1, // 33
		1, // 34
		1, // 35
		1, // 36
		1, // 37
		1, // 38
		1, // 39
		1, // 40
		1, // 41
		1, // 42
		2, // 43
		2, // 44
		1, // 45
		1, // 46
		1, // 47
		1, // 48
		1, // 49
		1, // 50
		1, // 51
		2, // 52
		1, // 53
		1, // 54
		1, // 55
		1, // 56
		1, // 57
		1, // 58
		2, // 59
		1, // 60
		1, // 61
		1, // 62
		1, // 63
		1, // 64
		2, // 65
		1, // 66
		1, // 67
		1, // 68
		1, // 69
	},
}
var _ = _cover_atomic_.LoadUint32
