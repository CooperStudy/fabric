//line /home/cooper/go/src/github.com/hyperledger/fabric/common/grpclogging/fields.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package grpclogging; import _cover_atomic_ "sync/atomic"

import (
	"github.com/gogo/protobuf/proto"
	"github.com/golang/protobuf/jsonpb"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
)

type protoMarshaler struct {
	jsonpb.Marshaler
	message proto.Message
}

func (m *protoMarshaler) MarshalJSON() ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643665343532316435366565.Count[0], 1);
	out, err := m.Marshaler.MarshalToString(m.message)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_643665343532316435366565.Count[2], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_1_643665343532316435366565.Count[1], 1);return []byte(out), nil
}

func ProtoMessage(key string, val interface{}) zapcore.Field {_cover_atomic_.AddUint32(&GoCover_1_643665343532316435366565.Count[3], 1);
	if pm, ok := val.(proto.Message); ok {_cover_atomic_.AddUint32(&GoCover_1_643665343532316435366565.Count[5], 1);
		return zap.Reflect(key, &protoMarshaler{message: pm})
	}
	_cover_atomic_.AddUint32(&GoCover_1_643665343532316435366565.Count[4], 1);return zap.Any(key, val)
}

func Error(err error) zapcore.Field {_cover_atomic_.AddUint32(&GoCover_1_643665343532316435366565.Count[6], 1);
	if err == nil {_cover_atomic_.AddUint32(&GoCover_1_643665343532316435366565.Count[8], 1);
		return zap.Skip()
	}

	// Wrap the error so it no longer implements fmt.Formatter. This will prevent
	// zap from adding the "verboseError" field to the log record that includes a
	// full stack trace.
	_cover_atomic_.AddUint32(&GoCover_1_643665343532316435366565.Count[7], 1);return zap.Error(struct{ error }{err})
}

var GoCover_1_643665343532316435366565 = struct {
	Count     [9]uint32
	Pos       [3 * 9]uint32
	NumStmt   [9]uint16
} {
	Pos: [3 * 9]uint32{
		21, 23, 0x100038, // [0]
		26, 26, 0x190002, // [1]
		23, 25, 0x30010, // [2]
		29, 30, 0x27003e, // [3]
		33, 33, 0x1a0002, // [4]
		30, 32, 0x30027, // [5]
		36, 37, 0x100025, // [6]
		44, 44, 0x280002, // [7]
		37, 39, 0x30010, // [8]
	},
	NumStmt: [9]uint16{
		2, // 0
		1, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
		1, // 8
	},
}
var _ = _cover_atomic_.LoadUint32
