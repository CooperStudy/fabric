//line /home/cooper/go/src/github.com/hyperledger/fabric/core/ledger/ledgerstorage/store.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package ledgerstorage; import _cover_atomic_ "sync/atomic"

import (
	"sync"

	"github.com/hyperledger/fabric/common/flogging"
	"github.com/hyperledger/fabric/common/ledger/blkstorage"
	"github.com/hyperledger/fabric/common/ledger/blkstorage/fsblkstorage"
	"github.com/hyperledger/fabric/core/ledger"
	"github.com/hyperledger/fabric/core/ledger/ledgerconfig"
	"github.com/hyperledger/fabric/core/ledger/pvtdatapolicy"
	"github.com/hyperledger/fabric/core/ledger/pvtdatastorage"
	lutil "github.com/hyperledger/fabric/core/ledger/util"
	"github.com/hyperledger/fabric/protos/common"
	"github.com/pkg/errors"
)

var logger = flogging.MustGetLogger("ledgerstorage")

// Provider encapusaltes two providers 1) block store provider and 2) and pvt data store provider
type Provider struct {
	blkStoreProvider     blkstorage.BlockStoreProvider
	pvtdataStoreProvider pvtdatastorage.Provider
}

// Store encapsulates two stores 1) block store and pvt data store
type Store struct {
	blkstorage.BlockStore
	pvtdataStore pvtdatastorage.Store
	rwlock       *sync.RWMutex
}

// NewProvider returns the handle to the provider
func NewProvider() *Provider {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[0], 1);
	// Initialize the block storage
	attrsToIndex := []blkstorage.IndexableAttr{
		blkstorage.IndexableAttrBlockHash,
		blkstorage.IndexableAttrBlockNum,
		blkstorage.IndexableAttrTxID,
		blkstorage.IndexableAttrBlockNumTranNum,
		blkstorage.IndexableAttrBlockTxID,
		blkstorage.IndexableAttrTxValidationCode,
	}
	indexConfig := &blkstorage.IndexConfig{AttrsToIndex: attrsToIndex}
	blockStoreProvider := fsblkstorage.NewProvider(
		fsblkstorage.NewConf(ledgerconfig.GetBlockStorePath(), ledgerconfig.GetMaxBlockfileSize()),
		indexConfig)

	pvtStoreProvider := pvtdatastorage.NewProvider()
	return &Provider{blockStoreProvider, pvtStoreProvider}
}

// Open opens the store
func (p *Provider) Open(ledgerid string) (*Store, error) {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[1], 1);
	var blockStore blkstorage.BlockStore
	var pvtdataStore pvtdatastorage.Store
	var err error

	if blockStore, err = p.blkStoreProvider.OpenBlockStore(ledgerid); err != nil {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[5], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[2], 1);if pvtdataStore, err = p.pvtdataStoreProvider.OpenStore(ledgerid); err != nil {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[6], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[3], 1);store := &Store{blockStore, pvtdataStore, &sync.RWMutex{}}
	if err := store.init(); err != nil {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[7], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[4], 1);return store, nil
}

// Close closes the provider
func (p *Provider) Close() {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[8], 1);
	p.blkStoreProvider.Close()
	p.pvtdataStoreProvider.Close()
}

// Init initializes store with essential configurations
func (s *Store) Init(btlPolicy pvtdatapolicy.BTLPolicy) {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[9], 1);
	s.pvtdataStore.Init(btlPolicy)
}

// CommitWithPvtData commits the block and the corresponding pvt data in an atomic operation
func (s *Store) CommitWithPvtData(blockAndPvtdata *ledger.BlockAndPvtData) error {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[10], 1);
	blockNum := blockAndPvtdata.Block.Header.Number
	s.rwlock.Lock()
	defer s.rwlock.Unlock()

	pvtBlkStoreHt, err := s.pvtdataStore.LastCommittedBlockHeight()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[15], 1);
		return err
	}

	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[11], 1);writtenToPvtStore := false
	if pvtBlkStoreHt < blockNum+1 {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[16], 1); // The pvt data store sanity check does not allow rewriting the pvt data.
		// when re-processing blocks (rejoin the channel or re-fetching last few block),
		// skip the pvt data commit to the pvtdata blockstore
		logger.Debugf("Writing block [%d] to pvt block store", blockNum)
		// as the ledger has already validated all txs in this block, we need to
		// use the validated info to commit only the pvtData of valid tx.
		// TODO: FAB-12924 Having said the above, there is a corner case that we
		// need to think about. If a state fork occurs during a regular block commit,
		// we have a mechanism to drop all blocks followed by refetching of blocks
		// and re-processing them. In the current way of doing this, we only drop
		// the block files (and related artifacts) but we do not drop/overwrite the
		// pvtdatastorage - because the assumption so far was to store full data
		// (for valid and invalid transactions). Now, we will have to allow dropping
		// of pvtdatastorage as well. However, the issue is that its shared across
		// channels (unlike block files).
		// The side effect of not dropping pvtdatastorage is that we may actually
		// have some missing data entries sitting in the pvtdatastore for the invalid
		// transactions which break our goal of storing only the pvtdata of valid tx.
		// We might also miss pvtData of a valid transaction. Note that the
		// RemoveStaleAndCommitPvtDataOfOldBlocks() in stateDB txmgr expects only
		// valid transactions' pvtdata. Hence, it is necessary to rebuild pvtdatastore
		// along with the blockstore to keep only valid tx data in the pvtdatastore.
		validTxPvtData, validTxMissingPvtData := constructValidTxPvtDataAndMissingData(blockAndPvtdata)
		if err := s.pvtdataStore.Prepare(blockAndPvtdata.Block.Header.Number, validTxPvtData, validTxMissingPvtData); err != nil {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[18], 1);
			return err
		}
		_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[17], 1);writtenToPvtStore = true
	} else{ _cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[19], 1);{
		logger.Debugf("Skipping writing block [%d] to pvt block store as the store height is [%d]", blockNum, pvtBlkStoreHt)
	}}

	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[12], 1);if err := s.AddBlock(blockAndPvtdata.Block); err != nil {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[20], 1);
		s.pvtdataStore.Rollback()
		return err
	}

	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[13], 1);if writtenToPvtStore {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[21], 1);
		return s.pvtdataStore.Commit()
	}
	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[14], 1);return nil
}

func constructValidTxPvtDataAndMissingData(blockAndPvtData *ledger.BlockAndPvtData) ([]*ledger.TxPvtData,
	ledger.TxMissingPvtDataMap) {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[22], 1);

	var validTxPvtData []*ledger.TxPvtData
	validTxMissingPvtData := make(ledger.TxMissingPvtDataMap)

	txsFilter := lutil.TxValidationFlags(blockAndPvtData.Block.Metadata.Metadata[common.BlockMetadataIndex_TRANSACTIONS_FILTER])
	numTxs := uint64(len(blockAndPvtData.Block.Data.Data))

	// for all valid tx, construct pvtdata and missing pvtdata list
	for txNum := uint64(0); txNum < numTxs; txNum++ {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[24], 1);
		if txsFilter.IsInvalid(int(txNum)) {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[27], 1);
			continue
		}

		_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[25], 1);if pvtdata, ok := blockAndPvtData.PvtData[txNum]; ok {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[28], 1);
			validTxPvtData = append(validTxPvtData, pvtdata)
		}

		_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[26], 1);if missingPvtData, ok := blockAndPvtData.MissingPvtData[txNum]; ok {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[29], 1);
			for _, missing := range missingPvtData {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[30], 1);
				validTxMissingPvtData.Add(txNum, missing.Namespace,
					missing.Collection, missing.IsEligible)
			}
		}
	}
	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[23], 1);return validTxPvtData, validTxMissingPvtData
}

// CommitPvtDataOfOldBlocks commits the pvtData of old blocks
func (s *Store) CommitPvtDataOfOldBlocks(blocksPvtData map[uint64][]*ledger.TxPvtData) error {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[31], 1);
	err := s.pvtdataStore.CommitPvtDataOfOldBlocks(blocksPvtData)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[33], 1);
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[32], 1);return nil
}

// GetPvtDataAndBlockByNum returns the block and the corresponding pvt data.
// The pvt data is filtered by the list of 'collections' supplied
func (s *Store) GetPvtDataAndBlockByNum(blockNum uint64, filter ledger.PvtNsCollFilter) (*ledger.BlockAndPvtData, error) {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[34], 1);
	s.rwlock.RLock()
	defer s.rwlock.RUnlock()

	var block *common.Block
	var pvtdata []*ledger.TxPvtData
	var err error
	if block, err = s.RetrieveBlockByNumber(blockNum); err != nil {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[37], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[35], 1);if pvtdata, err = s.getPvtDataByNumWithoutLock(blockNum, filter); err != nil {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[38], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[36], 1);return &ledger.BlockAndPvtData{Block: block, PvtData: constructPvtdataMap(pvtdata)}, nil
}

// GetPvtDataByNum returns only the pvt data  corresponding to the given block number
// The pvt data is filtered by the list of 'ns/collections' supplied in the filter
// A nil filter does not filter any results
func (s *Store) GetPvtDataByNum(blockNum uint64, filter ledger.PvtNsCollFilter) ([]*ledger.TxPvtData, error) {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[39], 1);
	s.rwlock.RLock()
	defer s.rwlock.RUnlock()
	return s.getPvtDataByNumWithoutLock(blockNum, filter)
}

// getPvtDataByNumWithoutLock returns only the pvt data  corresponding to the given block number.
// This function does not acquire a readlock and it is expected that in most of the circumstances, the caller
// possesses a read lock on `s.rwlock`
func (s *Store) getPvtDataByNumWithoutLock(blockNum uint64, filter ledger.PvtNsCollFilter) ([]*ledger.TxPvtData, error) {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[40], 1);
	var pvtdata []*ledger.TxPvtData
	var err error
	if pvtdata, err = s.pvtdataStore.GetPvtDataByBlockNum(blockNum, filter); err != nil {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[42], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[41], 1);return pvtdata, nil
}

// GetMissingPvtDataInfoForMostRecentBlocks invokes the function on underlying pvtdata store
func (s *Store) GetMissingPvtDataInfoForMostRecentBlocks(maxBlock int) (ledger.MissingPvtDataInfo, error) {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[43], 1);
	// it is safe to not acquire a read lock on s.rwlock. Without a lock, the value of
	// lastCommittedBlock can change due to a new block commit. As a result, we may not
	// be able to fetch the missing data info of truly the most recent blocks. This
	// decision was made to ensure that the regular block commit rate is not affected.
	return s.pvtdataStore.GetMissingPvtDataInfoForMostRecentBlocks(maxBlock)
}

// ProcessCollsEligibilityEnabled invokes the function on underlying pvtdata store
func (s *Store) ProcessCollsEligibilityEnabled(committingBlk uint64, nsCollMap map[string][]string) error {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[44], 1);
	return s.pvtdataStore.ProcessCollsEligibilityEnabled(committingBlk, nsCollMap)
}

// GetLastUpdatedOldBlocksPvtData invokes the function on underlying pvtdata store
func (s *Store) GetLastUpdatedOldBlocksPvtData() (map[uint64][]*ledger.TxPvtData, error) {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[45], 1);
	return s.pvtdataStore.GetLastUpdatedOldBlocksPvtData()
}

// ResetLastUpdatedOldBlocksList invokes the function on underlying pvtdata store
func (s *Store) ResetLastUpdatedOldBlocksList() error {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[46], 1);
	return s.pvtdataStore.ResetLastUpdatedOldBlocksList()
}

// init first invokes function `initFromExistingBlockchain`
// in order to check whether the pvtdata store is present because of an upgrade
// of peer from 1.0 and need to be updated with the existing blockchain. If, this is
// not the case then this init will invoke function `syncPvtdataStoreWithBlockStore`
// to follow the normal course
func (s *Store) init() error {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[47], 1);
	var initialized bool
	var err error
	if initialized, err = s.initPvtdataStoreFromExistingBlockchain(); err != nil || initialized {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[49], 1);
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[48], 1);return s.syncPvtdataStoreWithBlockStore()
}

// initPvtdataStoreFromExistingBlockchain updates the initial state of the pvtdata store
// if an existing block store has a blockchain and the pvtdata store is empty.
// This situation is expected to happen when a peer is upgrated from version 1.0
// and an existing blockchain is present that was generated with version 1.0.
// Under this scenario, the pvtdata store is brought upto the point as if it has
// processed existing blocks with no pvt data. This function returns true if the
// above mentioned condition is found to be true and pvtdata store is successfully updated
func (s *Store) initPvtdataStoreFromExistingBlockchain() (bool, error) {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[50], 1);
	var bcInfo *common.BlockchainInfo
	var pvtdataStoreEmpty bool
	var err error

	if bcInfo, err = s.BlockStore.GetBlockchainInfo(); err != nil {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[54], 1);
		return false, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[51], 1);if pvtdataStoreEmpty, err = s.pvtdataStore.IsEmpty(); err != nil {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[55], 1);
		return false, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[52], 1);if pvtdataStoreEmpty && bcInfo.Height > 0 {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[56], 1);
		if err = s.pvtdataStore.InitLastCommittedBlock(bcInfo.Height - 1); err != nil {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[58], 1);
			return false, err
		}
		_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[57], 1);return true, nil
	}
	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[53], 1);return false, nil
}

// syncPvtdataStoreWithBlockStore checks whether the block storage and pvt data store are in sync
// this is called when the store instance is constructed and handed over for the use.
// this check whether there is a pending batch (possibly from a previous system crash)
// of pvt data that was not committed. If a pending batch exists, the check is made
// whether the associated block was successfully committed in the block storage (before the crash)
// or not. If the block was committed, the private data batch is committed
// otherwise, the pvt data batch is rolledback
func (s *Store) syncPvtdataStoreWithBlockStore() error {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[59], 1);
	var pendingPvtbatch bool
	var err error
	if pendingPvtbatch, err = s.pvtdataStore.HasPendingBatch(); err != nil {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[66], 1);
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[60], 1);if !pendingPvtbatch {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[67], 1);
		return nil
	}
	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[61], 1);var bcInfo *common.BlockchainInfo
	var pvtdataStoreHt uint64

	if bcInfo, err = s.GetBlockchainInfo(); err != nil {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[68], 1);
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[62], 1);if pvtdataStoreHt, err = s.pvtdataStore.LastCommittedBlockHeight(); err != nil {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[69], 1);
		return err
	}

	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[63], 1);if bcInfo.Height == pvtdataStoreHt {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[70], 1);
		return s.pvtdataStore.Rollback()
	}

	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[64], 1);if bcInfo.Height == pvtdataStoreHt+1 {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[71], 1);
		return s.pvtdataStore.Commit()
	}

	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[65], 1);return errors.Errorf("This is not expected. blockStoreHeight=%d, pvtdataStoreHeight=%d", bcInfo.Height, pvtdataStoreHt)
}

func constructPvtdataMap(pvtdata []*ledger.TxPvtData) map[uint64]*ledger.TxPvtData {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[72], 1);
	if pvtdata == nil {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[75], 1);
		return nil
	}
	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[73], 1);m := make(map[uint64]*ledger.TxPvtData)
	for _, pvtdatum := range pvtdata {_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[76], 1);
		m[pvtdatum.SeqInBlock] = pvtdatum
	}
	_cover_atomic_.AddUint32(&GoCover_0_326263303364323864613132.Count[74], 1);return m
}

var GoCover_0_326263303364323864613132 = struct {
	Count     [77]uint32
	Pos       [3 * 77]uint32
	NumStmt   [77]uint16
} {
	Pos: [3 * 77]uint32{
		40, 57, 0x2001e, // [0]
		60, 65, 0x4f003a, // [1]
		68, 68, 0x500002, // [2]
		71, 72, 0x250002, // [3]
		75, 75, 0x130002, // [4]
		65, 67, 0x3004f, // [5]
		68, 70, 0x30050, // [6]
		72, 74, 0x30025, // [7]
		79, 82, 0x2001c, // [8]
		85, 87, 0x20039, // [9]
		90, 96, 0x100052, // [10]
		100, 101, 0x200002, // [11]
		132, 132, 0x3a0002, // [12]
		137, 137, 0x170002, // [13]
		140, 140, 0xc0002, // [14]
		96, 98, 0x30010, // [15]
		101, 124, 0x7c0020, // [16]
		127, 127, 0x1b0003, // [17]
		124, 126, 0x4007c, // [18]
		128, 130, 0x30008, // [19]
		132, 135, 0x3003a, // [20]
		137, 139, 0x30017, // [21]
		144, 153, 0x32001e, // [22]
		169, 169, 0x2e0002, // [23]
		153, 154, 0x260032, // [24]
		158, 158, 0x380003, // [25]
		162, 162, 0x460003, // [26]
		154, 155, 0xc0026, // [27]
		158, 160, 0x40038, // [28]
		162, 163, 0x2b0046, // [29]
		163, 166, 0x5002b, // [30]
		173, 175, 0x10005e, // [31]
		178, 178, 0xc0002, // [32]
		175, 177, 0x30010, // [33]
		183, 190, 0x40007a, // [34]
		193, 193, 0x4f0002, // [35]
		196, 196, 0x5a0002, // [36]
		190, 192, 0x30040, // [37]
		193, 195, 0x3004f, // [38]
		202, 206, 0x2006e, // [39]
		211, 214, 0x560079, // [40]
		217, 217, 0x150002, // [41]
		214, 216, 0x30056, // [42]
		221, 227, 0x2006b, // [43]
		230, 232, 0x2006b, // [44]
		235, 237, 0x2005a, // [45]
		240, 242, 0x20037, // [46]
		249, 252, 0x5e001e, // [47]
		255, 255, 0x2b0002, // [48]
		252, 254, 0x3005e, // [49]
		265, 270, 0x400048, // [50]
		273, 273, 0x430002, // [51]
		276, 276, 0x2c0002, // [52]
		282, 282, 0x130002, // [53]
		270, 272, 0x30040, // [54]
		273, 275, 0x30043, // [55]
		276, 277, 0x51002c, // [56]
		280, 280, 0x130003, // [57]
		277, 279, 0x40051, // [58]
		292, 295, 0x490038, // [59]
		298, 298, 0x160002, // [60]
		301, 304, 0x350002, // [61]
		307, 307, 0x510002, // [62]
		311, 311, 0x250002, // [63]
		315, 315, 0x270002, // [64]
		319, 319, 0x790002, // [65]
		295, 297, 0x30049, // [66]
		298, 300, 0x30016, // [67]
		304, 306, 0x30035, // [68]
		307, 309, 0x30051, // [69]
		311, 313, 0x30025, // [70]
		315, 317, 0x30027, // [71]
		322, 323, 0x140054, // [72]
		326, 327, 0x230002, // [73]
		330, 330, 0xa0002, // [74]
		323, 325, 0x30014, // [75]
		327, 329, 0x30023, // [76]
	},
	NumStmt: [77]uint16{
		5, // 0
		4, // 1
		1, // 2
		2, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
		2, // 8
		1, // 9
		5, // 10
		2, // 11
		1, // 12
		1, // 13
		1, // 14
		1, // 15
		3, // 16
		1, // 17
		1, // 18
		1, // 19
		2, // 20
		1, // 21
		5, // 22
		1, // 23
		1, // 24
		1, // 25
		1, // 26
		1, // 27
		1, // 28
		1, // 29
		1, // 30
		2, // 31
		1, // 32
		1, // 33
		6, // 34
		1, // 35
		1, // 36
		1, // 37
		1, // 38
		3, // 39
		3, // 40
		1, // 41
		1, // 42
		1, // 43
		1, // 44
		1, // 45
		1, // 46
		3, // 47
		1, // 48
		1, // 49
		4, // 50
		1, // 51
		1, // 52
		1, // 53
		1, // 54
		1, // 55
		1, // 56
		1, // 57
		1, // 58
		3, // 59
		1, // 60
		3, // 61
		1, // 62
		1, // 63
		1, // 64
		1, // 65
		1, // 66
		1, // 67
		1, // 68
		1, // 69
		1, // 70
		1, // 71
		1, // 72
		2, // 73
		1, // 74
		1, // 75
		1, // 76
	},
}
var _ = _cover_atomic_.LoadUint32
