//line /home/cooper/go/src/github.com/hyperledger/fabric/common/graph/graph.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package graph; import _cover_atomic_ "sync/atomic"

// Vertex defines a vertex of a graph
type Vertex struct {
	Id        string
	Data      interface{}
	neighbors map[string]*Vertex
}

// NewVertex creates a new vertex with given id and data
func NewVertex(id string, data interface{}) *Vertex {_cover_atomic_.AddUint32(&GoCover_1_333364376162323263303436.Count[0], 1);
	return &Vertex{
		Id:        id,
		Data:      data,
		neighbors: make(map[string]*Vertex),
	}
}

// NeighborById returns a neighbor vertex with the given id,
// or nil if no vertex with such an id is a neighbor
func (v *Vertex) NeighborById(id string) *Vertex {_cover_atomic_.AddUint32(&GoCover_1_333364376162323263303436.Count[1], 1);
	return v.neighbors[id]
}

// Neighbors returns the neighbors of the vertex
func (v *Vertex) Neighbors() []*Vertex {_cover_atomic_.AddUint32(&GoCover_1_333364376162323263303436.Count[2], 1);
	var res []*Vertex
	for _, u := range v.neighbors {_cover_atomic_.AddUint32(&GoCover_1_333364376162323263303436.Count[4], 1);
		res = append(res, u)
	}
	_cover_atomic_.AddUint32(&GoCover_1_333364376162323263303436.Count[3], 1);return res
}

// AddNeighbor adds the given vertex as a neighbor
// of the vertex
func (v *Vertex) AddNeighbor(u *Vertex) {_cover_atomic_.AddUint32(&GoCover_1_333364376162323263303436.Count[5], 1);
	v.neighbors[u.Id] = u
	u.neighbors[v.Id] = v
}

var GoCover_1_333364376162323263303436 = struct {
	Count     [6]uint32
	Pos       [3 * 6]uint32
	NumStmt   [6]uint16
} {
	Pos: [3 * 6]uint32{
		17, 23, 0x20035, // [0]
		27, 29, 0x20032, // [1]
		32, 34, 0x200028, // [2]
		37, 37, 0xc0002, // [3]
		34, 36, 0x30020, // [4]
		42, 45, 0x20029, // [5]
	},
	NumStmt: [6]uint16{
		1, // 0
		1, // 1
		2, // 2
		1, // 3
		1, // 4
		2, // 5
	},
}
var _ = _cover_atomic_.LoadUint32
