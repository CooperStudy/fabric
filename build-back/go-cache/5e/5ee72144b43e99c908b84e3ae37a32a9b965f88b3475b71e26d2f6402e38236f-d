//line /home/cooper/go/src/github.com/hyperledger/fabric/common/crypto/random.go:1
/*
Copyright IBM Corp. 2016 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

		 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package crypto; import _cover_atomic_ "sync/atomic"

import (
	"crypto/rand"

	"github.com/pkg/errors"
)

const (
	// NonceSize is the default NonceSize
	NonceSize = 24
)

// GetRandomBytes returns len random looking bytes
func GetRandomBytes(len int) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_653639303734353666643263.Count[0], 1);
	key := make([]byte, len)

	// TODO: rand could fill less bytes then len
	_, err := rand.Read(key)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_653639303734353666643263.Count[2], 1);
		return nil, errors.Wrap(err, "error getting random bytes")
	}

	_cover_atomic_.AddUint32(&GoCover_1_653639303734353666643263.Count[1], 1);return key, nil
}

// GetRandomNonce returns a random byte array of length NonceSize
func GetRandomNonce() ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_653639303734353666643263.Count[3], 1);
	return GetRandomBytes(NonceSize)
}

var GoCover_1_653639303734353666643263 = struct {
	Count     [4]uint32
	Pos       [3 * 4]uint32
	NumStmt   [4]uint16
} {
	Pos: [3 * 4]uint32{
		31, 36, 0x10002e, // [0]
		40, 40, 0x110002, // [1]
		36, 38, 0x30010, // [2]
		44, 46, 0x20027, // [3]
	},
	NumStmt: [4]uint16{
		3, // 0
		1, // 1
		1, // 2
		1, // 3
	},
}
var _ = _cover_atomic_.LoadUint32
