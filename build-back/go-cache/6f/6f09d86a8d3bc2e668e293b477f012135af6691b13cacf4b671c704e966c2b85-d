//line /home/cooper/go/src/github.com/hyperledger/fabric/bccsp/idemix/handlers/user.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/
package handlers; import _cover_atomic_ "sync/atomic"

import (
	"crypto/sha256"

	"github.com/hyperledger/fabric/bccsp"
	"github.com/pkg/errors"
)

// userSecretKey contains the User secret key
type userSecretKey struct {
	// sk is the idemix reference to the User key
	sk Big
	// Exportable if true, sk can be exported via the Bytes function
	exportable bool
}

func NewUserSecretKey(sk Big, exportable bool) *userSecretKey {_cover_atomic_.AddUint32(&GoCover_7_353738643438356165663564.Count[0], 1);
	return &userSecretKey{sk: sk, exportable: exportable}
}

func (k *userSecretKey) Bytes() ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_7_353738643438356165663564.Count[1], 1);
	if k.exportable {_cover_atomic_.AddUint32(&GoCover_7_353738643438356165663564.Count[3], 1);
		return k.sk.Bytes()
	}

	_cover_atomic_.AddUint32(&GoCover_7_353738643438356165663564.Count[2], 1);return nil, errors.New("not exportable")
}

func (k *userSecretKey) SKI() []byte {_cover_atomic_.AddUint32(&GoCover_7_353738643438356165663564.Count[4], 1);
	raw, err := k.sk.Bytes()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_7_353738643438356165663564.Count[6], 1);
		return nil
	}
	_cover_atomic_.AddUint32(&GoCover_7_353738643438356165663564.Count[5], 1);hash := sha256.New()
	hash.Write(raw)
	return hash.Sum(nil)
}

func (*userSecretKey) Symmetric() bool {_cover_atomic_.AddUint32(&GoCover_7_353738643438356165663564.Count[7], 1);
	return true
}

func (*userSecretKey) Private() bool {_cover_atomic_.AddUint32(&GoCover_7_353738643438356165663564.Count[8], 1);
	return true
}

func (k *userSecretKey) PublicKey() (bccsp.Key, error) {_cover_atomic_.AddUint32(&GoCover_7_353738643438356165663564.Count[9], 1);
	return nil, errors.New("cannot call this method on a symmetric key")
}

type UserKeyGen struct {
	// Exportable is a flag to allow an issuer secret key to be marked as Exportable.
	// If a secret key is marked as Exportable, its Bytes method will return the key's byte representation.
	Exportable bool
	// User implements the underlying cryptographic algorithms
	User User
}

func (g *UserKeyGen) KeyGen(opts bccsp.KeyGenOpts) (bccsp.Key, error) {_cover_atomic_.AddUint32(&GoCover_7_353738643438356165663564.Count[10], 1);
	sk, err := g.User.NewKey()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_7_353738643438356165663564.Count[12], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_7_353738643438356165663564.Count[11], 1);return &userSecretKey{exportable: g.Exportable, sk: sk}, nil
}

// UserKeyImporter import user keys
type UserKeyImporter struct {
	// Exportable is a flag to allow a secret key to be marked as Exportable.
	// If a secret key is marked as Exportable, its Bytes method will return the key's byte representation.
	Exportable bool
	// User implements the underlying cryptographic algorithms
	User User
}

func (i *UserKeyImporter) KeyImport(raw interface{}, opts bccsp.KeyImportOpts) (k bccsp.Key, err error) {_cover_atomic_.AddUint32(&GoCover_7_353738643438356165663564.Count[13], 1);
	der, ok := raw.([]byte)
	if !ok {_cover_atomic_.AddUint32(&GoCover_7_353738643438356165663564.Count[17], 1);
		return nil, errors.New("invalid raw, expected byte array")
	}

	_cover_atomic_.AddUint32(&GoCover_7_353738643438356165663564.Count[14], 1);if len(der) == 0 {_cover_atomic_.AddUint32(&GoCover_7_353738643438356165663564.Count[18], 1);
		return nil, errors.New("invalid raw, it must not be nil")
	}

	_cover_atomic_.AddUint32(&GoCover_7_353738643438356165663564.Count[15], 1);sk, err := i.User.NewKeyFromBytes(raw.([]byte))
	if err != nil {_cover_atomic_.AddUint32(&GoCover_7_353738643438356165663564.Count[19], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_7_353738643438356165663564.Count[16], 1);return &userSecretKey{exportable: i.Exportable, sk: sk}, nil
}

var GoCover_7_353738643438356165663564 = struct {
	Count     [20]uint32
	Pos       [3 * 20]uint32
	NumStmt   [20]uint16
} {
	Pos: [3 * 20]uint32{
		23, 25, 0x2003f, // [0]
		27, 28, 0x120031, // [1]
		32, 32, 0x2a0002, // [2]
		28, 30, 0x30012, // [3]
		35, 37, 0x100026, // [4]
		40, 42, 0x160002, // [5]
		37, 39, 0x30010, // [6]
		45, 47, 0x20028, // [7]
		49, 51, 0x20026, // [8]
		53, 55, 0x20038, // [9]
		65, 67, 0x100047, // [10]
		71, 71, 0x3e0002, // [11]
		67, 69, 0x30010, // [12]
		83, 85, 0x90069, // [13]
		89, 89, 0x130002, // [14]
		93, 94, 0x100002, // [15]
		98, 98, 0x3e0002, // [16]
		85, 87, 0x30009, // [17]
		89, 91, 0x30013, // [18]
		94, 96, 0x30010, // [19]
	},
	NumStmt: [20]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
		2, // 4
		3, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
		2, // 10
		1, // 11
		1, // 12
		2, // 13
		1, // 14
		2, // 15
		1, // 16
		1, // 17
		1, // 18
		1, // 19
	},
}
var _ = _cover_atomic_.LoadUint32
