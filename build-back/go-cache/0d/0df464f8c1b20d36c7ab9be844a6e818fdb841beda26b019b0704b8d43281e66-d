//line /home/cooper/go/src/github.com/hyperledger/fabric/common/flogging/levels.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package flogging; import _cover_atomic_ "sync/atomic"

import (
	"fmt"
	"math"

	"go.uber.org/zap/zapcore"
)

const (
	// DisabledLevel represents a disabled log level. Logs at this level should
	// never be emitted.
	DisabledLevel = zapcore.Level(math.MinInt8)

	// PayloadLevel is used to log the extremely detailed message level debug
	// information.
	PayloadLevel = zapcore.Level(zapcore.DebugLevel - 1)
)

// NameToLevel converts a level name to a zapcore.Level.  If the level name is
// unknown, zapcore.InfoLevel is returned.
func NameToLevel(level string) zapcore.Level {_cover_atomic_.AddUint32(&GoCover_3_643766633362313436336635.Count[0], 1);
	l, err := nameToLevel(level)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_3_643766633362313436336635.Count[2], 1);
		return zapcore.InfoLevel
	}
	_cover_atomic_.AddUint32(&GoCover_3_643766633362313436336635.Count[1], 1);return l
}

func nameToLevel(level string) (zapcore.Level, error) {_cover_atomic_.AddUint32(&GoCover_3_643766633362313436336635.Count[3], 1);
	switch level {
	case "PAYLOAD", "payload":_cover_atomic_.AddUint32(&GoCover_3_643766633362313436336635.Count[4], 1);
		return PayloadLevel, nil
	case "DEBUG", "debug":_cover_atomic_.AddUint32(&GoCover_3_643766633362313436336635.Count[5], 1);
		return zapcore.DebugLevel, nil
	case "INFO", "info":_cover_atomic_.AddUint32(&GoCover_3_643766633362313436336635.Count[6], 1);
		return zapcore.InfoLevel, nil
	case "WARNING", "WARN", "warning", "warn":_cover_atomic_.AddUint32(&GoCover_3_643766633362313436336635.Count[7], 1);
		return zapcore.WarnLevel, nil
	case "ERROR", "error":_cover_atomic_.AddUint32(&GoCover_3_643766633362313436336635.Count[8], 1);
		return zapcore.ErrorLevel, nil
	case "DPANIC", "dpanic":_cover_atomic_.AddUint32(&GoCover_3_643766633362313436336635.Count[9], 1);
		return zapcore.DPanicLevel, nil
	case "PANIC", "panic":_cover_atomic_.AddUint32(&GoCover_3_643766633362313436336635.Count[10], 1);
		return zapcore.PanicLevel, nil
	case "FATAL", "fatal":_cover_atomic_.AddUint32(&GoCover_3_643766633362313436336635.Count[11], 1);
		return zapcore.FatalLevel, nil

	case "NOTICE", "notice":_cover_atomic_.AddUint32(&GoCover_3_643766633362313436336635.Count[12], 1);
		return zapcore.InfoLevel, nil // future
	case "CRITICAL", "critical":_cover_atomic_.AddUint32(&GoCover_3_643766633362313436336635.Count[13], 1);
		return zapcore.ErrorLevel, nil // future

	default:_cover_atomic_.AddUint32(&GoCover_3_643766633362313436336635.Count[14], 1);
		return DisabledLevel, fmt.Errorf("invalid log level: %s", level)
	}
}

func IsValidLevel(level string) bool {_cover_atomic_.AddUint32(&GoCover_3_643766633362313436336635.Count[15], 1);
	_, err := nameToLevel(level)
	return err == nil
}

var GoCover_3_643766633362313436336635 = struct {
	Count     [16]uint32
	Pos       [3 * 16]uint32
	NumStmt   [16]uint16
} {
	Pos: [3 * 16]uint32{
		28, 30, 0x10002e, // [0]
		33, 33, 0xa0002, // [1]
		30, 32, 0x30010, // [2]
		36, 37, 0xf0037, // [3]
		38, 39, 0x1b001c, // [4]
		40, 41, 0x210018, // [5]
		42, 43, 0x200016, // [6]
		44, 45, 0x20002c, // [7]
		46, 47, 0x210018, // [8]
		48, 49, 0x22001a, // [9]
		50, 51, 0x210018, // [10]
		52, 53, 0x210018, // [11]
		55, 56, 0x20001a, // [12]
		57, 58, 0x21001e, // [13]
		60, 61, 0x43000a, // [14]
		65, 68, 0x20026, // [15]
	},
	NumStmt: [16]uint16{
		2, // 0
		1, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
		1, // 10
		1, // 11
		1, // 12
		1, // 13
		1, // 14
		2, // 15
	},
}
var _ = _cover_atomic_.LoadUint32
