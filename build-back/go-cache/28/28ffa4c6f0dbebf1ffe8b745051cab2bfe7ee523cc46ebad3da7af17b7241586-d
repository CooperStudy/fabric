//line /home/cooper/go/src/github.com/hyperledger/fabric/token/tms/plain/ledger.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package plain; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric/common/ledger"
)

// A MemoryLedger is an in-memory ledger of transactions and unspent outputs.
// This implementation is only meant for testing.
type MemoryLedger struct {
	entries map[string][]byte
}

// NewMemoryLedger creates a new MemoryLedger
func NewMemoryLedger() *MemoryLedger {_cover_atomic_.AddUint32(&GoCover_1_376538356362393564346637.Count[0], 1);
	return &MemoryLedger{
		entries: make(map[string][]byte),
	}
}

// GetState gets the value for given namespace and Key. For a chaincode, the namespace corresponds to the chaincodeID
func (p *MemoryLedger) GetState(namespace string, key string) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_376538356362393564346637.Count[1], 1);
	value := p.entries[key]

	return value, nil
}

// SetState sets the given value for the given namespace and Key. For a chaincode, the namespace corresponds to the chaincodeID
func (p *MemoryLedger) SetState(namespace string, key string, value []byte) error {_cover_atomic_.AddUint32(&GoCover_1_376538356362393564346637.Count[2], 1);
	p.entries[key] = value

	return nil
}

// GetStateRangeScanIterator gets the values for a given namespace that lie in an interval determined by startKey and endKey.
// this is a mock function.
func (p *MemoryLedger) GetStateRangeScanIterator(namespace string, startKey string, endKey string) (ledger.ResultsIterator, error) {_cover_atomic_.AddUint32(&GoCover_1_376538356362393564346637.Count[3], 1);
	return nil, nil
}

// Done releases resources occupied by the MemoryLedger
func (p *MemoryLedger) Done() {_cover_atomic_.AddUint32(&GoCover_1_376538356362393564346637.Count[4], 1);
	// No resources to be released for MemoryLedger
}

var GoCover_1_376538356362393564346637 = struct {
	Count     [5]uint32
	Pos       [3 * 5]uint32
	NumStmt   [5]uint16
} {
	Pos: [3 * 5]uint32{
		20, 24, 0x20026, // [0]
		27, 31, 0x2004f, // [1]
		34, 38, 0x20053, // [2]
		42, 44, 0x20084, // [3]
		47, 49, 0x20020, // [4]
	},
	NumStmt: [5]uint16{
		1, // 0
		2, // 1
		2, // 2
		1, // 3
		0, // 4
	},
}
var _ = _cover_atomic_.LoadUint32
