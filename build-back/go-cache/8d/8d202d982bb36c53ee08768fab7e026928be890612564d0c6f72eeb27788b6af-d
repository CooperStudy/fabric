//line /home/cooper/go/src/github.com/hyperledger/fabric/idemix/nonrevocation-verifier.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package idemix; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric-amcl/amcl/FP256BN"
	"github.com/pkg/errors"
)

// nonRevokedProver is the Verifier of the ZK proof system that handles revocation.
type nonRevocationVerifier interface {
	// recomputeFSContribution recomputes the contribution of the non-revocation proof to the ZKP challenge
	recomputeFSContribution(proof *NonRevocationProof, chal *FP256BN.BIG, epochPK *FP256BN.ECP2, proofSRh *FP256BN.BIG) ([]byte, error)
}

// nopNonRevocationVerifier is an empty nonRevocationVerifier that produces an empty contribution
type nopNonRevocationVerifier struct{}

func (verifier *nopNonRevocationVerifier) recomputeFSContribution(proof *NonRevocationProof, chal *FP256BN.BIG, epochPK *FP256BN.ECP2, proofSRh *FP256BN.BIG) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_5_633637303937343739336136.Count[0], 1);
	return nil, nil
}

// getNonRevocationVerifier returns the nonRevocationVerifier bound to the passed revocation algorithm
func getNonRevocationVerifier(algorithm RevocationAlgorithm) (nonRevocationVerifier, error) {_cover_atomic_.AddUint32(&GoCover_5_633637303937343739336136.Count[1], 1);
	switch algorithm {
	case ALG_NO_REVOCATION:_cover_atomic_.AddUint32(&GoCover_5_633637303937343739336136.Count[2], 1);
		return &nopNonRevocationVerifier{}, nil
	default:_cover_atomic_.AddUint32(&GoCover_5_633637303937343739336136.Count[3], 1);
		// unknown revocation algorithm
		return nil, errors.Errorf("unknown revocation algorithm %d", algorithm)
	}
}

var GoCover_5_633637303937343739336136 = struct {
	Count     [4]uint32
	Pos       [3 * 4]uint32
	NumStmt   [4]uint16
} {
	Pos: [3 * 4]uint32{
		23, 25, 0x200af, // [0]
		28, 29, 0x13005d, // [1]
		30, 31, 0x2a0019, // [2]
		32, 34, 0x4a000a, // [3]
	},
	NumStmt: [4]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
	},
}
var _ = _cover_atomic_.LoadUint32
