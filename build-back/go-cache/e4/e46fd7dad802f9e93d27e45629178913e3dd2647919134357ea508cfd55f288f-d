//line /home/cooper/go/src/github.com/hyperledger/fabric/core/middleware/request_id.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package middleware; import _cover_atomic_ "sync/atomic"

import (
	"context"
	"net/http"
)

var requestIDKey = requestIDKeyType{}

type requestIDKeyType struct{}

func RequestID(ctx context.Context) string {_cover_atomic_.AddUint32(&GoCover_1_393739636635663162336662.Count[0], 1);
	if reqID, ok := ctx.Value(requestIDKey).(string); ok {_cover_atomic_.AddUint32(&GoCover_1_393739636635663162336662.Count[2], 1);
		return reqID
	}
	_cover_atomic_.AddUint32(&GoCover_1_393739636635663162336662.Count[1], 1);return "unknown"
}

type GenerateIDFunc func() string

type requestID struct {
	generateID GenerateIDFunc
	next       http.Handler
}

func WithRequestID(generator GenerateIDFunc) Middleware {_cover_atomic_.AddUint32(&GoCover_1_393739636635663162336662.Count[3], 1);
	return func(next http.Handler) http.Handler {_cover_atomic_.AddUint32(&GoCover_1_393739636635663162336662.Count[4], 1);
		return &requestID{next: next, generateID: generator}
	}
}

func (r *requestID) ServeHTTP(w http.ResponseWriter, req *http.Request) {_cover_atomic_.AddUint32(&GoCover_1_393739636635663162336662.Count[5], 1);
	reqID := req.Header.Get("X-Request-Id")
	if reqID == "" {_cover_atomic_.AddUint32(&GoCover_1_393739636635663162336662.Count[7], 1);
		reqID = r.generateID()
		req.Header.Set("X-Request-Id", reqID)
	}

	_cover_atomic_.AddUint32(&GoCover_1_393739636635663162336662.Count[6], 1);ctx := context.WithValue(req.Context(), requestIDKey, reqID)
	req = req.WithContext(ctx)

	w.Header().Add("X-Request-Id", reqID)

	r.next.ServeHTTP(w, req)
}

var GoCover_1_393739636635663162336662 = struct {
	Count     [8]uint32
	Pos       [3 * 8]uint32
	NumStmt   [8]uint16
} {
	Pos: [3 * 8]uint32{
		18, 19, 0x37002c, // [0]
		22, 22, 0x120002, // [1]
		19, 21, 0x30037, // [2]
		32, 33, 0x2e0039, // [3]
		33, 35, 0x3002e, // [4]
		38, 40, 0x110049, // [5]
		45, 50, 0x1a0002, // [6]
		40, 43, 0x30011, // [7]
	},
	NumStmt: [8]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
		1, // 4
		2, // 5
		4, // 6
		2, // 7
	},
}
var _ = _cover_atomic_.LoadUint32
