//line /home/cooper/go/src/github.com/hyperledger/fabric/core/handlers/library/library.go:1
/*
Copyright IBM Corp, SecureKey Technologies Inc. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package library; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric/core/handlers/auth"
	"github.com/hyperledger/fabric/core/handlers/auth/filter"
	"github.com/hyperledger/fabric/core/handlers/decoration"
	"github.com/hyperledger/fabric/core/handlers/decoration/decorator"
	"github.com/hyperledger/fabric/core/handlers/endorsement/api"
	"github.com/hyperledger/fabric/core/handlers/endorsement/builtin"
	"github.com/hyperledger/fabric/core/handlers/validation/api"
	. "github.com/hyperledger/fabric/core/handlers/validation/builtin"
)

// HandlerLibrary is used to assert
// how to create the various handlers
type HandlerLibrary struct {
}

// DefaultAuth creates a default auth.Filter
// that doesn't do any access control checks - simply
// forwards the request further.
// It needs to be initialized via a call to Init()
// and be passed a peer.EndorserServer
func (r *HandlerLibrary) DefaultAuth() auth.Filter {_cover_atomic_.AddUint32(&GoCover_0_666161666230303134643734.Count[0], 1);
	return filter.NewFilter()
}

// ExpirationCheck is an auth filter which blocks requests
// from identities with expired x509 certificates
func (r *HandlerLibrary) ExpirationCheck() auth.Filter {_cover_atomic_.AddUint32(&GoCover_0_666161666230303134643734.Count[1], 1);
	return filter.NewExpirationCheckFilter()
}

// DefaultDecorator creates a default decorator
// that doesn't do anything with the input, simply
// returns the input as output.
func (r *HandlerLibrary) DefaultDecorator() decoration.Decorator {_cover_atomic_.AddUint32(&GoCover_0_666161666230303134643734.Count[2], 1);
	return decorator.NewDecorator()
}

func (r *HandlerLibrary) DefaultEndorsement() endorsement.PluginFactory {_cover_atomic_.AddUint32(&GoCover_0_666161666230303134643734.Count[3], 1);
	return &builtin.DefaultEndorsementFactory{}
}

func (r *HandlerLibrary) DefaultValidation() validation.PluginFactory {_cover_atomic_.AddUint32(&GoCover_0_666161666230303134643734.Count[4], 1);
	return &DefaultValidationFactory{}
}

var GoCover_0_666161666230303134643734 = struct {
	Count     [5]uint32
	Pos       [3 * 5]uint32
	NumStmt   [5]uint16
} {
	Pos: [3 * 5]uint32{
		30, 32, 0x20034, // [0]
		36, 38, 0x20038, // [1]
		43, 45, 0x20042, // [2]
		47, 49, 0x20049, // [3]
		51, 53, 0x20047, // [4]
	},
	NumStmt: [5]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
		1, // 4
	},
}
var _ = _cover_atomic_.LoadUint32
