//line /home/cooper/go/src/github.com/hyperledger/fabric/common/capabilities/channel.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package capabilities; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric/msp"
	cb "github.com/hyperledger/fabric/protos/common"
)

const (
	channelTypeName = "Channel"

	// ChannelV1_1 is the capabilties string for standard new non-backwards compatible fabric v1.1 channel capabilities.
	ChannelV1_1 = "V1_1"

	// ChannelV1_3 is the capabilties string for standard new non-backwards compatible fabric v1.3 channel capabilities.
	ChannelV1_3 = "V1_3"
)

// ChannelProvider provides capabilities information for channel level config.
type ChannelProvider struct {
	*registry
	v11 bool
	v13 bool
}

// NewChannelProvider creates a channel capabilities provider.
func NewChannelProvider(capabilities map[string]*cb.Capability) *ChannelProvider {_cover_atomic_.AddUint32(&GoCover_2_333764323863383062363335.Count[0], 1);
	cp := &ChannelProvider{}
	cp.registry = newRegistry(cp, capabilities)
	_, cp.v11 = capabilities[ChannelV1_1]
	_, cp.v13 = capabilities[ChannelV1_3]
	return cp
}

// Type returns a descriptive string for logging purposes.
func (cp *ChannelProvider) Type() string {_cover_atomic_.AddUint32(&GoCover_2_333764323863383062363335.Count[1], 1);
	return channelTypeName
}

// HasCapability returns true if the capability is supported by this binary.
func (cp *ChannelProvider) HasCapability(capability string) bool {_cover_atomic_.AddUint32(&GoCover_2_333764323863383062363335.Count[2], 1);
	switch capability {
	// Add new capability names here
	case ChannelV1_3:_cover_atomic_.AddUint32(&GoCover_2_333764323863383062363335.Count[3], 1);
		return true
	case ChannelV1_1:_cover_atomic_.AddUint32(&GoCover_2_333764323863383062363335.Count[4], 1);
		return true
	default:_cover_atomic_.AddUint32(&GoCover_2_333764323863383062363335.Count[5], 1);
		return false
	}
}

// MSPVersion returns the level of MSP support required by this channel.
func (cp *ChannelProvider) MSPVersion() msp.MSPVersion {_cover_atomic_.AddUint32(&GoCover_2_333764323863383062363335.Count[6], 1);
	switch {
	case cp.v13:_cover_atomic_.AddUint32(&GoCover_2_333764323863383062363335.Count[7], 1);
		return msp.MSPv1_3
	case cp.v11:_cover_atomic_.AddUint32(&GoCover_2_333764323863383062363335.Count[8], 1);
		return msp.MSPv1_1
	default:_cover_atomic_.AddUint32(&GoCover_2_333764323863383062363335.Count[9], 1);
		return msp.MSPv1_0
	}
}

var GoCover_2_333764323863383062363335 = struct {
	Count     [10]uint32
	Pos       [3 * 10]uint32
	NumStmt   [10]uint16
} {
	Pos: [3 * 10]uint32{
		32, 38, 0x20052, // [0]
		41, 43, 0x2002a, // [1]
		46, 47, 0x140042, // [2]
		49, 50, 0xe0013, // [3]
		51, 52, 0xe0013, // [4]
		53, 54, 0xf000a, // [5]
		59, 60, 0x90038, // [6]
		61, 62, 0x15000e, // [7]
		63, 64, 0x15000e, // [8]
		65, 66, 0x15000a, // [9]
	},
	NumStmt: [10]uint16{
		5, // 0
		1, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
	},
}
var _ = _cover_atomic_.LoadUint32
