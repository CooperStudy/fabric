//line /home/cooper/go/src/github.com/hyperledger/fabric/core/handlers/decoration/decorator/decorator.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package decorator; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric/core/handlers/decoration"
	"github.com/hyperledger/fabric/protos/peer"
)

// NewDecorator creates a new decorator
func NewDecorator() decoration.Decorator {_cover_atomic_.AddUint32(&GoCover_0_636464653633316165656261.Count[0], 1);
	return &decorator{}
}

type decorator struct {
}

// Decorate decorates a chaincode input by changing it
func (d *decorator) Decorate(proposal *peer.Proposal, input *peer.ChaincodeInput) *peer.ChaincodeInput {_cover_atomic_.AddUint32(&GoCover_0_636464653633316165656261.Count[1], 1);
	return input
}

var GoCover_0_636464653633316165656261 = struct {
	Count     [2]uint32
	Pos       [3 * 2]uint32
	NumStmt   [2]uint16
} {
	Pos: [3 * 2]uint32{
		15, 17, 0x2002a, // [0]
		23, 25, 0x20068, // [1]
	},
	NumStmt: [2]uint16{
		1, // 0
		1, // 1
	},
}
var _ = _cover_atomic_.LoadUint32
