//line /home/cooper/go/src/github.com/hyperledger/fabric/peer/version/version.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package version; import _cover_atomic_ "sync/atomic"

import (
	"fmt"
	"runtime"

	"github.com/hyperledger/fabric/common/metadata"
	"github.com/spf13/cobra"
)

// Program name
const ProgramName = "peer"

// Cmd returns the Cobra Command for Version
func Cmd() *cobra.Command {_cover_atomic_.AddUint32(&GoCover_0_613136383133343165323562.Count[0], 1);
	return cobraCommand
}

var cobraCommand = &cobra.Command{
	Use:   "version",
	Short: "Print fabric peer version.",
	Long:  `Print current version of the fabric peer server.`,
	RunE: func(cmd *cobra.Command, args []string) error {_cover_atomic_.AddUint32(&GoCover_0_613136383133343165323562.Count[1], 1);
		if len(args) != 0 {_cover_atomic_.AddUint32(&GoCover_0_613136383133343165323562.Count[3], 1);
			return fmt.Errorf("trailing args detected")
		}
		// Parsing of the command line is done so silence cmd usage
		_cover_atomic_.AddUint32(&GoCover_0_613136383133343165323562.Count[2], 1);cmd.SilenceUsage = true
		fmt.Print(GetInfo())
		return nil
	},
}

// GetInfo returns version information for the peer
func GetInfo() string {_cover_atomic_.AddUint32(&GoCover_0_613136383133343165323562.Count[4], 1);
	if metadata.Version == "" {_cover_atomic_.AddUint32(&GoCover_0_613136383133343165323562.Count[6], 1);
		metadata.Version = "development build"
	}

	_cover_atomic_.AddUint32(&GoCover_0_613136383133343165323562.Count[5], 1);ccinfo := fmt.Sprintf(" Base Image Version: %s\n"+
		"  Base Docker Namespace: %s\n"+
		"  Base Docker Label: %s\n"+
		"  Docker Namespace: %s\n",
		metadata.BaseVersion, metadata.BaseDockerNamespace,
		metadata.BaseDockerLabel, metadata.DockerNamespace)

	return fmt.Sprintf("%s:\n Version: %s\n Commit SHA: %s\n Go version: %s\n"+
		" OS/Arch: %s\n"+
		" Chaincode:\n %s\n",
		ProgramName, metadata.Version, metadata.CommitSHA, runtime.Version(),
		fmt.Sprintf("%s/%s", runtime.GOOS, runtime.GOARCH), ccinfo)
}

var GoCover_0_613136383133343165323562 = struct {
	Count     [7]uint32
	Pos       [3 * 7]uint32
	NumStmt   [7]uint16
} {
	Pos: [3 * 7]uint32{
		21, 23, 0x2001b, // [0]
		29, 30, 0x150036, // [1]
		34, 36, 0xd0003, // [2]
		30, 32, 0x40015, // [3]
		41, 42, 0x1c0017, // [4]
		46, 57, 0x3e0002, // [5]
		42, 44, 0x3001c, // [6]
	},
	NumStmt: [7]uint16{
		1, // 0
		1, // 1
		3, // 2
		1, // 3
		1, // 4
		2, // 5
		1, // 6
	},
}
var _ = _cover_atomic_.LoadUint32
