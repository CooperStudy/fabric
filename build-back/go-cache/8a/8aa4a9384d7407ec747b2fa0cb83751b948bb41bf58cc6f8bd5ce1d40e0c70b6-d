//line /home/cooper/go/src/github.com/hyperledger/fabric/common/channelconfig/consortiums.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package channelconfig; import _cover_atomic_ "sync/atomic"

import (
	cb "github.com/hyperledger/fabric/protos/common"
)

const (
	// ConsortiumsGroupKey is the group name for the consortiums config
	ConsortiumsGroupKey = "Consortiums"
)

// ConsortiumsConfig holds the consoritums configuration information
type ConsortiumsConfig struct {
	consortiums map[string]Consortium
}

// NewConsortiumsConfig creates a new instance of the consoritums config
func NewConsortiumsConfig(consortiumsGroup *cb.ConfigGroup, mspConfig *MSPConfigHandler) (*ConsortiumsConfig, error) {_cover_atomic_.AddUint32(&GoCover_8_373339383034363064316135.Count[0], 1);
	cc := &ConsortiumsConfig{
		consortiums: make(map[string]Consortium),
	}

	for consortiumName, consortiumGroup := range consortiumsGroup.Groups {_cover_atomic_.AddUint32(&GoCover_8_373339383034363064316135.Count[2], 1);
		var err error
		if cc.consortiums[consortiumName], err = NewConsortiumConfig(consortiumGroup, mspConfig); err != nil {_cover_atomic_.AddUint32(&GoCover_8_373339383034363064316135.Count[3], 1);
			return nil, err
		}
	}
	_cover_atomic_.AddUint32(&GoCover_8_373339383034363064316135.Count[1], 1);return cc, nil
}

// Consortiums returns a map of the current consortiums
func (cc *ConsortiumsConfig) Consortiums() map[string]Consortium {_cover_atomic_.AddUint32(&GoCover_8_373339383034363064316135.Count[4], 1);
	return cc.consortiums
}

var GoCover_8_373339383034363064316135 = struct {
	Count     [5]uint32
	Pos       [3 * 5]uint32
	NumStmt   [5]uint16
} {
	Pos: [3 * 5]uint32{
		24, 29, 0x470076, // [0]
		35, 35, 0x100002, // [1]
		29, 31, 0x680047, // [2]
		31, 33, 0x40068, // [3]
		39, 41, 0x20042, // [4]
	},
	NumStmt: [5]uint16{
		2, // 0
		1, // 1
		2, // 2
		1, // 3
		1, // 4
	},
}
var _ = _cover_atomic_.LoadUint32
