//line /home/cooper/go/src/github.com/hyperledger/fabric/core/chaincode/active_transactions.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package chaincode; import _cover_atomic_ "sync/atomic"

import "sync"

func NewTxKey(channelID, txID string) string {_cover_atomic_.AddUint32(&GoCover_0_323839383963343337363361.Count[0], 1); return channelID + txID }

type ActiveTransactions struct {
	mutex sync.Mutex
	ids   map[string]struct{}
}

func NewActiveTransactions() *ActiveTransactions {_cover_atomic_.AddUint32(&GoCover_0_323839383963343337363361.Count[1], 1);
	return &ActiveTransactions{
		ids: map[string]struct{}{},
	}
}

func (a *ActiveTransactions) Add(channelID, txID string) bool {_cover_atomic_.AddUint32(&GoCover_0_323839383963343337363361.Count[2], 1);
	key := NewTxKey(channelID, txID)
	a.mutex.Lock()
	defer a.mutex.Unlock()
	if _, ok := a.ids[key]; ok {_cover_atomic_.AddUint32(&GoCover_0_323839383963343337363361.Count[4], 1);
		return false
	}

	_cover_atomic_.AddUint32(&GoCover_0_323839383963343337363361.Count[3], 1);a.ids[key] = struct{}{}
	return true
}

func (a *ActiveTransactions) Remove(channelID, txID string) {_cover_atomic_.AddUint32(&GoCover_0_323839383963343337363361.Count[5], 1);
	key := NewTxKey(channelID, txID)
	a.mutex.Lock()
	delete(a.ids, key)
	a.mutex.Unlock()
}

var GoCover_0_323839383963343337363361 = struct {
	Count     [6]uint32
	Pos       [3 * 6]uint32
	NumStmt   [6]uint16
} {
	Pos: [3 * 6]uint32{
		11, 11, 0x49002e, // [0]
		18, 22, 0x20032, // [1]
		24, 28, 0x1d003f, // [2]
		32, 33, 0xd0002, // [3]
		28, 30, 0x3001d, // [4]
		36, 41, 0x2003d, // [5]
	},
	NumStmt: [6]uint16{
		1, // 0
		1, // 1
		4, // 2
		2, // 3
		1, // 4
		4, // 5
	},
}
var _ = _cover_atomic_.LoadUint32
