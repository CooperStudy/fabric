//line /home/cooper/go/src/github.com/hyperledger/fabric/core/handlers/decoration/decoration.go:1
/*
Copyright IBM Corp, SecureKey Technologies Inc. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package decoration; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric/protos/peer"
)

// Decorator decorates a chaincode input
type Decorator interface {
	// Decorate decorates a chaincode input by changing it
	Decorate(proposal *peer.Proposal, input *peer.ChaincodeInput) *peer.ChaincodeInput
}

// Apply decorators in the order provided
func Apply(proposal *peer.Proposal, input *peer.ChaincodeInput,
	decorators ...Decorator) *peer.ChaincodeInput {_cover_atomic_.AddUint32(&GoCover_0_613562613030323239326363.Count[0], 1);
	for _, decorator := range decorators {_cover_atomic_.AddUint32(&GoCover_0_613562613030323239326363.Count[2], 1);
		input = decorator.Decorate(proposal, input)
	}

	_cover_atomic_.AddUint32(&GoCover_0_613562613030323239326363.Count[1], 1);return input
}

var GoCover_0_613562613030323239326363 = struct {
	Count     [3]uint32
	Pos       [3 * 3]uint32
	NumStmt   [3]uint16
} {
	Pos: [3 * 3]uint32{
		21, 22, 0x270030, // [0]
		26, 26, 0xe0002, // [1]
		22, 24, 0x30027, // [2]
	},
	NumStmt: [3]uint16{
		1, // 0
		1, // 1
		1, // 2
	},
}
var _ = _cover_atomic_.LoadUint32
