//line /home/cooper/go/src/github.com/hyperledger/fabric/core/common/privdata/util.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package privdata; import _cover_atomic_ "sync/atomic"

import (
	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/common/cauthdsl"
	"github.com/hyperledger/fabric/common/policies"
	"github.com/hyperledger/fabric/msp"
	"github.com/hyperledger/fabric/protos/common"
	"github.com/pkg/errors"
)

func getPolicy(collectionPolicyConfig *common.CollectionPolicyConfig, deserializer msp.IdentityDeserializer) (policies.Policy, error) {_cover_atomic_.AddUint32(&GoCover_4_666632313434393663303335.Count[0], 1);
	if collectionPolicyConfig == nil {_cover_atomic_.AddUint32(&GoCover_4_666632313434393663303335.Count[5], 1);
		return nil, errors.New("Collection policy config is nil")
	}
	_cover_atomic_.AddUint32(&GoCover_4_666632313434393663303335.Count[1], 1);accessPolicyEnvelope := collectionPolicyConfig.GetSignaturePolicy()
	if accessPolicyEnvelope == nil {_cover_atomic_.AddUint32(&GoCover_4_666632313434393663303335.Count[6], 1);
		return nil, errors.New("Collection config access policy is nil")
	}
	// create access policy from the envelope
	_cover_atomic_.AddUint32(&GoCover_4_666632313434393663303335.Count[2], 1);npp := cauthdsl.NewPolicyProvider(deserializer)
	polBytes, err := proto.Marshal(accessPolicyEnvelope)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_4_666632313434393663303335.Count[7], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_4_666632313434393663303335.Count[3], 1);accessPolicy, _, err := npp.NewPolicy(polBytes)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_4_666632313434393663303335.Count[8], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_4_666632313434393663303335.Count[4], 1);return accessPolicy, nil
}

var GoCover_4_666632313434393663303335 = struct {
	Count     [9]uint32
	Pos       [3 * 9]uint32
	NumStmt   [9]uint16
} {
	Pos: [3 * 9]uint32{
		18, 19, 0x230087, // [0]
		22, 23, 0x210002, // [1]
		27, 29, 0x100002, // [2]
		32, 33, 0x100002, // [3]
		36, 36, 0x1a0002, // [4]
		19, 21, 0x30023, // [5]
		23, 25, 0x30021, // [6]
		29, 31, 0x30010, // [7]
		33, 35, 0x30010, // [8]
	},
	NumStmt: [9]uint16{
		1, // 0
		2, // 1
		3, // 2
		2, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
		1, // 8
	},
}
var _ = _cover_atomic_.LoadUint32
