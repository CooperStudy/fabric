//line /home/cooper/go/src/github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/pvtstatepurgemgmt/pvtdata_key_helper.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package pvtstatepurgemgmt; import _cover_atomic_ "sync/atomic"

func (pvtdataKeys *PvtdataKeys) addAll(toAdd *PvtdataKeys) {_cover_atomic_.AddUint32(&GoCover_4_326462396539336232343931.Count[0], 1);
	for ns, colls := range toAdd.Map {_cover_atomic_.AddUint32(&GoCover_4_326462396539336232343931.Count[1], 1);
		for coll, keysAndHashes := range colls.Map {_cover_atomic_.AddUint32(&GoCover_4_326462396539336232343931.Count[2], 1);
			for _, k := range keysAndHashes.List {_cover_atomic_.AddUint32(&GoCover_4_326462396539336232343931.Count[3], 1);
				pvtdataKeys.add(ns, coll, k.Key, k.Hash)
			}
		}
	}
}

func (pvtdataKeys *PvtdataKeys) add(ns string, coll string, key string, keyhash []byte) {_cover_atomic_.AddUint32(&GoCover_4_326462396539336232343931.Count[4], 1);
	colls := pvtdataKeys.getOrCreateCollections(ns)
	keysAndHashes := colls.getOrCreateKeysAndHashes(coll)
	keysAndHashes.List = append(keysAndHashes.List, &KeyAndHash{Key: key, Hash: keyhash})
}

func (pvtdataKeys *PvtdataKeys) getOrCreateCollections(ns string) *Collections {_cover_atomic_.AddUint32(&GoCover_4_326462396539336232343931.Count[5], 1);
	colls, ok := pvtdataKeys.Map[ns]
	if !ok {_cover_atomic_.AddUint32(&GoCover_4_326462396539336232343931.Count[7], 1);
		colls = newCollections()
		pvtdataKeys.Map[ns] = colls
	}
	_cover_atomic_.AddUint32(&GoCover_4_326462396539336232343931.Count[6], 1);return colls
}

func (colls *Collections) getOrCreateKeysAndHashes(coll string) *KeysAndHashes {_cover_atomic_.AddUint32(&GoCover_4_326462396539336232343931.Count[8], 1);
	keysAndHashes, ok := colls.Map[coll]
	if !ok {_cover_atomic_.AddUint32(&GoCover_4_326462396539336232343931.Count[10], 1);
		keysAndHashes = &KeysAndHashes{}
		colls.Map[coll] = keysAndHashes
	}
	_cover_atomic_.AddUint32(&GoCover_4_326462396539336232343931.Count[9], 1);return keysAndHashes
}

func newPvtdataKeys() *PvtdataKeys {_cover_atomic_.AddUint32(&GoCover_4_326462396539336232343931.Count[11], 1);
	return &PvtdataKeys{Map: make(map[string]*Collections)}
}

func newCollections() *Collections {_cover_atomic_.AddUint32(&GoCover_4_326462396539336232343931.Count[12], 1);
	return &Collections{Map: make(map[string]*KeysAndHashes)}
}

var GoCover_4_326462396539336232343931 = struct {
	Count     [13]uint32
	Pos       [3 * 13]uint32
	NumStmt   [13]uint16
} {
	Pos: [3 * 13]uint32{
		9, 10, 0x23003c, // [0]
		10, 11, 0x2e0023, // [1]
		11, 12, 0x29002e, // [2]
		12, 14, 0x50029, // [3]
		19, 23, 0x20059, // [4]
		25, 27, 0x90050, // [5]
		31, 31, 0xe0002, // [6]
		27, 30, 0x30009, // [7]
		34, 36, 0x90050, // [8]
		40, 40, 0x160002, // [9]
		36, 39, 0x30009, // [10]
		43, 45, 0x20024, // [11]
		47, 49, 0x20024, // [12]
	},
	NumStmt: [13]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
		3, // 4
		2, // 5
		1, // 6
		2, // 7
		2, // 8
		1, // 9
		2, // 10
		1, // 11
		1, // 12
	},
}
var _ = _cover_atomic_.LoadUint32
