//line /home/cooper/go/src/github.com/hyperledger/fabric/common/grpcmetrics/metrics.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package grpcmetrics; import _cover_atomic_ "sync/atomic"

import "github.com/hyperledger/fabric/common/metrics"

var (
	unaryRequestDuration = metrics.HistogramOpts{
		Namespace:    "grpc",
		Subsystem:    "server",
		Name:         "unary_request_duration",
		Help:         "The time to complete a unary request.",
		LabelNames:   []string{"service", "method", "code"},
		StatsdFormat: "%{#fqname}.%{service}.%{method}.%{code}",
	}
	unaryRequestsReceived = metrics.CounterOpts{
		Namespace:    "grpc",
		Subsystem:    "server",
		Name:         "unary_requests_received",
		Help:         "The number of unary requests received.",
		LabelNames:   []string{"service", "method"},
		StatsdFormat: "%{#fqname}.%{service}.%{method}",
	}
	unaryRequestsCompleted = metrics.CounterOpts{
		Namespace:    "grpc",
		Subsystem:    "server",
		Name:         "unary_requests_completed",
		Help:         "The number of unary requests completed.",
		LabelNames:   []string{"service", "method", "code"},
		StatsdFormat: "%{#fqname}.%{service}.%{method}.%{code}",
	}

	streamRequestDuration = metrics.HistogramOpts{
		Namespace:    "grpc",
		Subsystem:    "server",
		Name:         "stream_request_duration",
		Help:         "The time to complete a stream request.",
		LabelNames:   []string{"service", "method", "code"},
		StatsdFormat: "%{#fqname}.%{service}.%{method}.%{code}",
	}
	streamRequestsReceived = metrics.CounterOpts{
		Namespace:    "grpc",
		Subsystem:    "server",
		Name:         "stream_requests_received",
		Help:         "The number of stream requests received.",
		LabelNames:   []string{"service", "method"},
		StatsdFormat: "%{#fqname}.%{service}.%{method}",
	}
	streamRequestsCompleted = metrics.CounterOpts{
		Namespace:    "grpc",
		Subsystem:    "server",
		Name:         "stream_requests_completed",
		Help:         "The number of stream requests completed.",
		LabelNames:   []string{"service", "method", "code"},
		StatsdFormat: "%{#fqname}.%{service}.%{method}.%{code}",
	}
	streamMessagesReceived = metrics.CounterOpts{
		Namespace:    "grpc",
		Subsystem:    "server",
		Name:         "stream_messages_received",
		Help:         "The number of stream messages received.",
		LabelNames:   []string{"service", "method"},
		StatsdFormat: "%{#fqname}.%{service}.%{method}",
	}
	streamMessagesSent = metrics.CounterOpts{
		Namespace:    "grpc",
		Subsystem:    "server",
		Name:         "stream_messages_sent",
		Help:         "The number of stream messages sent.",
		LabelNames:   []string{"service", "method"},
		StatsdFormat: "%{#fqname}.%{service}.%{method}",
	}
)

func NewUnaryMetrics(p metrics.Provider) *UnaryMetrics {_cover_atomic_.AddUint32(&GoCover_1_383537633839366330636536.Count[0], 1);
	return &UnaryMetrics{
		RequestDuration:   p.NewHistogram(unaryRequestDuration),
		RequestsReceived:  p.NewCounter(unaryRequestsReceived),
		RequestsCompleted: p.NewCounter(unaryRequestsCompleted),
	}
}

func NewStreamMetrics(p metrics.Provider) *StreamMetrics {_cover_atomic_.AddUint32(&GoCover_1_383537633839366330636536.Count[1], 1);
	return &StreamMetrics{
		RequestDuration:   p.NewHistogram(streamRequestDuration),
		RequestsReceived:  p.NewCounter(streamRequestsReceived),
		RequestsCompleted: p.NewCounter(streamRequestsCompleted),
		MessagesSent:      p.NewCounter(streamMessagesSent),
		MessagesReceived:  p.NewCounter(streamMessagesReceived),
	}
}

var GoCover_1_383537633839366330636536 = struct {
	Count     [2]uint32
	Pos       [3 * 2]uint32
	NumStmt   [2]uint16
} {
	Pos: [3 * 2]uint32{
		79, 85, 0x20038, // [0]
		87, 95, 0x2003a, // [1]
	},
	NumStmt: [2]uint16{
		1, // 0
		1, // 1
	},
}
var _ = _cover_atomic_.LoadUint32
