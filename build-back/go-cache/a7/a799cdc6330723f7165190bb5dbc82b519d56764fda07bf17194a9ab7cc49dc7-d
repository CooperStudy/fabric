//line /home/cooper/go/src/github.com/hyperledger/fabric/core/chaincode/platforms/ccmetadata/targzmetadataprovider.go:1
/*
# Copyright State Street Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
*/
package ccmetadata; import _cover_atomic_ "sync/atomic"

import (
	"archive/tar"
	"bytes"
	"compress/gzip"
	"io"
	"strings"

	"github.com/pkg/errors"
)

//The targz metadata provider is reference for other providers (such as what CAR would
//implement). Currently it treats only statedb metadata but will be generalized in future
//to allow for arbitrary metadata to be packaged with the chaincode.
const (
	ccPackageStatedbDir = "META-INF/statedb/"
)

//TargzMetadataProvider provides Metadata from chaincode packaged in Targz format
//(go, java and node platforms)
type TargzMetadataProvider struct {
	Code []byte
}

func (tgzProv *TargzMetadataProvider) getCode() ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_653463396433393233376434.Count[0], 1);
	if tgzProv.Code == nil {_cover_atomic_.AddUint32(&GoCover_1_653463396433393233376434.Count[2], 1);
		return nil, errors.New("nil code package")
	}

	_cover_atomic_.AddUint32(&GoCover_1_653463396433393233376434.Count[1], 1);return tgzProv.Code, nil
}

// GetMetadataAsTarEntries extracts metata data from ChaincodeDeploymentSpec
func (tgzProv *TargzMetadataProvider) GetMetadataAsTarEntries() ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_653463396433393233376434.Count[3], 1);
	code, err := tgzProv.getCode()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_653463396433393233376434.Count[8], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_1_653463396433393233376434.Count[4], 1);is := bytes.NewReader(code)
	gr, err := gzip.NewReader(is)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_653463396433393233376434.Count[9], 1);
		logger.Errorf("Failure opening codepackage gzip stream: %s", err)
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_1_653463396433393233376434.Count[5], 1);statedbTarBuffer := bytes.NewBuffer(nil)
	tw := tar.NewWriter(statedbTarBuffer)

	tr := tar.NewReader(gr)

	// For each file in the code package tar,
	// add it to the statedb artifact tar if it has "statedb" in the path
	for {_cover_atomic_.AddUint32(&GoCover_1_653463396433393233376434.Count[10], 1);
		header, err := tr.Next()
		if err == io.EOF {_cover_atomic_.AddUint32(&GoCover_1_653463396433393233376434.Count[16], 1);
			// We only get here if there are no more entries to scan
			break
		}
		_cover_atomic_.AddUint32(&GoCover_1_653463396433393233376434.Count[11], 1);if err != nil {_cover_atomic_.AddUint32(&GoCover_1_653463396433393233376434.Count[17], 1);
			return nil, err
		}

		_cover_atomic_.AddUint32(&GoCover_1_653463396433393233376434.Count[12], 1);if !strings.HasPrefix(header.Name, ccPackageStatedbDir) {_cover_atomic_.AddUint32(&GoCover_1_653463396433393233376434.Count[18], 1);
			continue
		}

		_cover_atomic_.AddUint32(&GoCover_1_653463396433393233376434.Count[13], 1);if err = tw.WriteHeader(header); err != nil {_cover_atomic_.AddUint32(&GoCover_1_653463396433393233376434.Count[19], 1);
			logger.Error("Error adding header to statedb tar:", err, header.Name)
			return nil, err
		}
		_cover_atomic_.AddUint32(&GoCover_1_653463396433393233376434.Count[14], 1);if _, err := io.Copy(tw, tr); err != nil {_cover_atomic_.AddUint32(&GoCover_1_653463396433393233376434.Count[20], 1);
			logger.Error("Error copying file to statedb tar:", err, header.Name)
			return nil, err
		}
		_cover_atomic_.AddUint32(&GoCover_1_653463396433393233376434.Count[15], 1);logger.Debug("Wrote file to statedb tar:", header.Name)
	}

	_cover_atomic_.AddUint32(&GoCover_1_653463396433393233376434.Count[6], 1);if err = tw.Close(); err != nil {_cover_atomic_.AddUint32(&GoCover_1_653463396433393233376434.Count[21], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_1_653463396433393233376434.Count[7], 1);logger.Debug("Created metadata tar")

	return statedbTarBuffer.Bytes(), nil
}

var GoCover_1_653463396433393233376434 = struct {
	Count     [22]uint32
	Pos       [3 * 22]uint32
	NumStmt   [22]uint16
} {
	Pos: [3 * 22]uint32{
		31, 32, 0x190041, // [0]
		36, 36, 0x1a0002, // [1]
		32, 34, 0x30019, // [2]
		40, 42, 0x100051, // [3]
		46, 48, 0x100002, // [4]
		53, 60, 0x60002, // [5]
		85, 85, 0x220002, // [6]
		89, 91, 0x260002, // [7]
		42, 44, 0x30010, // [8]
		48, 51, 0x30010, // [9]
		60, 62, 0x140006, // [10]
		66, 66, 0x110003, // [11]
		70, 70, 0x3b0003, // [12]
		74, 74, 0x2f0003, // [13]
		78, 78, 0x2c0003, // [14]
		82, 82, 0x3a0003, // [15]
		62, 64, 0x90014, // [16]
		66, 68, 0x40011, // [17]
		70, 71, 0xc003b, // [18]
		74, 77, 0x4002f, // [19]
		78, 81, 0x4002c, // [20]
		85, 87, 0x30022, // [21]
	},
	NumStmt: [22]uint16{
		1, // 0
		1, // 1
		1, // 2
		2, // 3
		3, // 4
		4, // 5
		1, // 6
		2, // 7
		1, // 8
		2, // 9
		2, // 10
		1, // 11
		1, // 12
		1, // 13
		1, // 14
		1, // 15
		1, // 16
		1, // 17
		1, // 18
		2, // 19
		2, // 20
		1, // 21
	},
}
var _ = _cover_atomic_.LoadUint32
