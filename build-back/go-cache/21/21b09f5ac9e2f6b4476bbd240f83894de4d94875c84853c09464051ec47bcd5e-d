//line /home/cooper/go/src/github.com/hyperledger/fabric/peer/channel/fetch.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package channel; import _cover_atomic_ "sync/atomic"

import (
	"fmt"
	"io/ioutil"
	"strconv"
	"strings"

	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/peer/common"
	cb "github.com/hyperledger/fabric/protos/common"
	"github.com/hyperledger/fabric/protos/utils"
	"github.com/spf13/cobra"
)

func fetchCmd(cf *ChannelCmdFactory) *cobra.Command {_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[0], 1);
	fetchCmd := &cobra.Command{
		Use:   "fetch <newest|oldest|config|(number)> [outputfile]",
		Short: "Fetch a block",
		Long:  "Fetch a specified block, writing it to a file.",
		RunE: func(cmd *cobra.Command, args []string) error {_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[2], 1);
			return fetch(cmd, args, cf)
		},
	}
	_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[1], 1);flagList := []string{
		"channelID",
	}
	attachFlags(fetchCmd, flagList)

	return fetchCmd
}

func fetch(cmd *cobra.Command, args []string, cf *ChannelCmdFactory) error {_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[3], 1);
	if len(args) == 0 {_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[13], 1);
		return fmt.Errorf("fetch target required, oldest, newest, config, or a number")
	}
	_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[4], 1);if len(args) > 2 {_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[14], 1);
		return fmt.Errorf("trailing args detected")
	}
	// Parsing of the command line is done so silence cmd usage
	_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[5], 1);cmd.SilenceUsage = true

	// default to fetching from orderer
	ordererRequired := OrdererRequired
	peerDeliverRequired := PeerDeliverNotRequired
	if len(strings.Split(common.OrderingEndpoint, ":")) != 2 {_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[15], 1);
		// if no orderer endpoint supplied, connect to peer's deliver service
		ordererRequired = OrdererNotRequired
		peerDeliverRequired = PeerDeliverRequired
	}
	_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[6], 1);var err error
	if cf == nil {_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[16], 1);
		cf, err = InitCmdFactory(EndorserNotRequired, peerDeliverRequired, ordererRequired)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[17], 1);
			return err
		}
	}

	_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[7], 1);var block *cb.Block

	switch args[0] {
	case "oldest":_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[18], 1);
		block, err = cf.DeliverClient.GetOldestBlock()
	case "newest":_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[19], 1);
		block, err = cf.DeliverClient.GetNewestBlock()
	case "config":_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[20], 1);
		iBlock, err2 := cf.DeliverClient.GetNewestBlock()
		if err2 != nil {_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[25], 1);
			return err2
		}
		_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[21], 1);lc, err2 := utils.GetLastConfigIndexFromBlock(iBlock)
		if err2 != nil {_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[26], 1);
			return err2
		}
		_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[22], 1);block, err = cf.DeliverClient.GetSpecifiedBlock(lc)
	default:_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[23], 1);
		num, err2 := strconv.Atoi(args[0])
		if err2 != nil {_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[27], 1);
			return fmt.Errorf("fetch target illegal: %s", args[0])
		}
		_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[24], 1);block, err = cf.DeliverClient.GetSpecifiedBlock(uint64(num))
	}

	_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[8], 1);if err != nil {_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[28], 1);
		return err
	}

	_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[9], 1);b, err := proto.Marshal(block)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[29], 1);
		return err
	}

	_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[10], 1);var file string
	if len(args) == 1 {_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[30], 1);
		file = channelID + "_" + args[0] + ".block"
	} else{ _cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[31], 1);{
		file = args[1]
	}}

	_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[11], 1);if err = ioutil.WriteFile(file, b, 0644); err != nil {_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[32], 1);
		return err
	}

	_cover_atomic_.AddUint32(&GoCover_2_613931643833636437303432.Count[12], 1);return nil
}

var GoCover_2_613931643833636437303432 = struct {
	Count     [33]uint32
	Pos       [3 * 33]uint32
	NumStmt   [33]uint16
} {
	Pos: [3 * 33]uint32{
		22, 27, 0x370035, // [0]
		31, 36, 0x110002, // [1]
		27, 29, 0x40037, // [2]
		39, 40, 0x14004c, // [3]
		43, 43, 0x130002, // [4]
		47, 52, 0x3b0002, // [5]
		57, 58, 0xf0002, // [6]
		65, 67, 0x110002, // [7]
		90, 90, 0x100002, // [8]
		94, 95, 0x100002, // [9]
		99, 100, 0x140002, // [10]
		106, 106, 0x370002, // [11]
		110, 110, 0xc0002, // [12]
		40, 42, 0x30014, // [13]
		43, 45, 0x30013, // [14]
		52, 56, 0x3003b, // [15]
		58, 60, 0x11000f, // [16]
		60, 62, 0x40011, // [17]
		68, 69, 0x310010, // [18]
		70, 71, 0x310010, // [19]
		72, 74, 0x120010, // [20]
		77, 78, 0x120003, // [21]
		81, 81, 0x360003, // [22]
		82, 84, 0x12000a, // [23]
		87, 87, 0x3f0003, // [24]
		74, 76, 0x40012, // [25]
		78, 80, 0x40012, // [26]
		84, 86, 0x40012, // [27]
		90, 92, 0x30010, // [28]
		95, 97, 0x30010, // [29]
		100, 102, 0x30014, // [30]
		102, 104, 0x30008, // [31]
		106, 108, 0x30037, // [32]
	},
	NumStmt: [33]uint16{
		1, // 0
		3, // 1
		1, // 2
		1, // 3
		1, // 4
		4, // 5
		2, // 6
		2, // 7
		1, // 8
		2, // 9
		2, // 10
		1, // 11
		1, // 12
		1, // 13
		1, // 14
		2, // 15
		2, // 16
		1, // 17
		1, // 18
		1, // 19
		2, // 20
		2, // 21
		1, // 22
		2, // 23
		1, // 24
		1, // 25
		1, // 26
		1, // 27
		1, // 28
		1, // 29
		1, // 30
		1, // 31
		1, // 32
	},
}
var _ = _cover_atomic_.LoadUint32
