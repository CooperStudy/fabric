//line /home/cooper/go/src/github.com/hyperledger/fabric/orderer/common/server/onboarding.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package server; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric/common/crypto"
	"github.com/hyperledger/fabric/common/flogging"
	"github.com/hyperledger/fabric/common/ledger/blockledger"
	"github.com/hyperledger/fabric/core/comm"
	"github.com/hyperledger/fabric/orderer/common/cluster"
	"github.com/hyperledger/fabric/orderer/common/localconfig"
	"github.com/hyperledger/fabric/orderer/consensus/etcdraft"
	"github.com/hyperledger/fabric/protos/common"
	"github.com/hyperledger/fabric/protos/utils"
)

type replicationInitiator struct {
	logger         *flogging.FabricLogger
	secOpts        *comm.SecureOptions
	conf           *localconfig.TopLevel
	bootstrapBlock *common.Block
	lf             cluster.LedgerFactory
	signer         crypto.LocalSigner
}

func (ri *replicationInitiator) replicateIfNeeded() {_cover_atomic_.AddUint32(&GoCover_1_333331623039636261656262.Count[0], 1);
	if ri.bootstrapBlock.Header.Number == 0 {_cover_atomic_.AddUint32(&GoCover_1_333331623039636261656262.Count[6], 1);
		ri.logger.Debug("Booted with a genesis block, replication isn't an option")
		return
	}

	_cover_atomic_.AddUint32(&GoCover_1_333331623039636261656262.Count[1], 1);consenterCert := etcdraft.ConsenterCertificate(ri.secOpts.Certificate)
	systemChannelName, err := utils.GetChainIDFromBlock(ri.bootstrapBlock)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_333331623039636261656262.Count[7], 1);
		ri.logger.Panicf("Failed extracting system channel name from bootstrap block: %v", err)
	}
	_cover_atomic_.AddUint32(&GoCover_1_333331623039636261656262.Count[2], 1);pullerConfig := cluster.PullerConfigFromTopLevelConfig(systemChannelName, ri.conf, ri.secOpts.Key, ri.secOpts.Certificate, ri.signer)
	puller, err := cluster.BlockPullerFromConfigBlock(pullerConfig, ri.bootstrapBlock)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_333331623039636261656262.Count[8], 1);
		ri.logger.Panicf("Failed creating puller config from bootstrap block: %v", err)
	}

	_cover_atomic_.AddUint32(&GoCover_1_333331623039636261656262.Count[3], 1);pullerLogger := flogging.MustGetLogger("orderer.common.cluster")

	replicator := &cluster.Replicator{
		LedgerFactory:    ri.lf,
		SystemChannel:    systemChannelName,
		BootBlock:        ri.bootstrapBlock,
		Logger:           pullerLogger,
		AmIPartOfChannel: consenterCert.IsConsenterOfChannel,
		Puller:           puller,
		ChannelLister: &cluster.ChainInspector{
			Logger:          pullerLogger,
			Puller:          puller,
			LastConfigBlock: ri.bootstrapBlock,
		},
	}

	replicationNeeded, err := replicator.IsReplicationNeeded()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_333331623039636261656262.Count[9], 1);
		ri.logger.Panicf("Failed determining whether replication is needed: %v", err)
	}

	_cover_atomic_.AddUint32(&GoCover_1_333331623039636261656262.Count[4], 1);if !replicationNeeded {_cover_atomic_.AddUint32(&GoCover_1_333331623039636261656262.Count[10], 1);
		ri.logger.Info("Replication isn't needed")
		return
	}

	_cover_atomic_.AddUint32(&GoCover_1_333331623039636261656262.Count[5], 1);ri.logger.Info("Will now replicate chains")
	replicator.ReplicateChains()
}

type ledgerFactory struct {
	blockledger.Factory
}

func (lf *ledgerFactory) GetOrCreate(chainID string) (cluster.LedgerWriter, error) {_cover_atomic_.AddUint32(&GoCover_1_333331623039636261656262.Count[11], 1);
	return lf.Factory.GetOrCreate(chainID)
}

var GoCover_1_333331623039636261656262 = struct {
	Count     [12]uint32
	Pos       [3 * 12]uint32
	NumStmt   [12]uint16
} {
	Pos: [3 * 12]uint32{
		30, 31, 0x2a0035, // [0]
		36, 38, 0x100002, // [1]
		41, 43, 0x100002, // [2]
		47, 64, 0x100002, // [3]
		68, 68, 0x180002, // [4]
		73, 74, 0x1e0002, // [5]
		31, 34, 0x3002a, // [6]
		38, 40, 0x30010, // [7]
		43, 45, 0x30010, // [8]
		64, 66, 0x30010, // [9]
		68, 71, 0x30018, // [10]
		81, 83, 0x20054, // [11]
	},
	NumStmt: [12]uint16{
		1, // 0
		3, // 1
		3, // 2
		4, // 3
		1, // 4
		2, // 5
		2, // 6
		1, // 7
		1, // 8
		1, // 9
		2, // 10
		1, // 11
	},
}
var _ = _cover_atomic_.LoadUint32
