//line /home/cooper/go/src/github.com/hyperledger/fabric/core/peer/configtx_util.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package peer; import _cover_atomic_ "sync/atomic"

import (
	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/common/channelconfig"
	"github.com/hyperledger/fabric/core/ledger"
	"github.com/hyperledger/fabric/protos/common"
)

// computeFullConfig computes the full resource configuration given the current resource bundle and the transaction (that contains the delta)
func computeFullConfig(currentConfigBundle *channelconfig.Bundle, channelConfTx *common.Envelope) (*common.Config, error) {_cover_atomic_.AddUint32(&GoCover_2_323265356137393664323638.Count[0], 1);
	fullChannelConfigEnv, err := currentConfigBundle.ConfigtxValidator().ProposeConfigUpdate(channelConfTx)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_2_323265356137393664323638.Count[2], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_2_323265356137393664323638.Count[1], 1);return fullChannelConfigEnv.Config, nil
}

// TODO preferably make the serialize/deserialize deterministic
func serialize(resConfig *common.Config) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_2_323265356137393664323638.Count[3], 1);
	return proto.Marshal(resConfig)
}

func deserialize(serializedConf []byte) (*common.Config, error) {_cover_atomic_.AddUint32(&GoCover_2_323265356137393664323638.Count[4], 1);
	conf := &common.Config{}
	if err := proto.Unmarshal(serializedConf, conf); err != nil {_cover_atomic_.AddUint32(&GoCover_2_323265356137393664323638.Count[6], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_2_323265356137393664323638.Count[5], 1);return conf, nil
}

// retrievePersistedChannelConfig retrieves the persisted channel config from statedb
func retrievePersistedChannelConfig(ledger ledger.PeerLedger) (*common.Config, error) {_cover_atomic_.AddUint32(&GoCover_2_323265356137393664323638.Count[7], 1);
	qe, err := ledger.NewQueryExecutor()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_2_323265356137393664323638.Count[9], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_2_323265356137393664323638.Count[8], 1);defer qe.Done()
	return retrievePersistedConf(qe, channelConfigKey)
}

var GoCover_2_323265356137393664323638 = struct {
	Count     [10]uint32
	Pos       [3 * 10]uint32
	NumStmt   [10]uint16
} {
	Pos: [3 * 10]uint32{
		17, 19, 0x10007b, // [0]
		22, 22, 0x290002, // [1]
		19, 21, 0x30010, // [2]
		26, 28, 0x2003a, // [3]
		30, 32, 0x3e0041, // [4]
		35, 35, 0x120002, // [5]
		32, 34, 0x3003e, // [6]
		39, 41, 0x100057, // [7]
		44, 45, 0x340002, // [8]
		41, 43, 0x30010, // [9]
	},
	NumStmt: [10]uint16{
		2, // 0
		1, // 1
		1, // 2
		1, // 3
		2, // 4
		1, // 5
		1, // 6
		2, // 7
		2, // 8
		1, // 9
	},
}
var _ = _cover_atomic_.LoadUint32
