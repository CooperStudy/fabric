//line /home/cooper/go/src/github.com/hyperledger/fabric/core/handlers/auth/auth.go:1
/*
Copyright IBM Corp, SecureKey Technologies Inc. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package auth; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric/protos/peer"
)

// Filter defines an authentication filter that intercepts
// ProcessProposal methods
type Filter interface {
	peer.EndorserServer
	// Init initializes the Filter with the next EndorserServer
	Init(next peer.EndorserServer)
}

// ChainFilters chains the given auth filters in the order provided.
// the last filter always forwards to the endorser
func ChainFilters(endorser peer.EndorserServer, filters ...Filter) peer.EndorserServer {_cover_atomic_.AddUint32(&GoCover_0_393932636133306438303166.Count[0], 1);
	if len(filters) == 0 {_cover_atomic_.AddUint32(&GoCover_0_393932636133306438303166.Count[3], 1);
		return endorser
	}

	// Each filter forwards to the next
	_cover_atomic_.AddUint32(&GoCover_0_393932636133306438303166.Count[1], 1);for i := 0; i < len(filters)-1; i++ {_cover_atomic_.AddUint32(&GoCover_0_393932636133306438303166.Count[4], 1);
		filters[i].Init(filters[i+1])
	}

	// Last filter forwards to the endorser
	_cover_atomic_.AddUint32(&GoCover_0_393932636133306438303166.Count[2], 1);filters[len(filters)-1].Init(endorser)

	return filters[0]
}

var GoCover_0_393932636133306438303166 = struct {
	Count     [5]uint32
	Pos       [3 * 5]uint32
	NumStmt   [5]uint16
} {
	Pos: [3 * 5]uint32{
		23, 24, 0x170058, // [0]
		29, 29, 0x260002, // [1]
		34, 36, 0x130002, // [2]
		24, 26, 0x30017, // [3]
		29, 31, 0x30026, // [4]
	},
	NumStmt: [5]uint16{
		1, // 0
		1, // 1
		2, // 2
		1, // 3
		1, // 4
	},
}
var _ = _cover_atomic_.LoadUint32
