//line /home/cooper/go/src/github.com/hyperledger/fabric/common/mocks/config/application.go:1
/*
Copyright IBM Corp. 2017 All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package config; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric/common/channelconfig"
)

type MockApplication struct {
	CapabilitiesRv channelconfig.ApplicationCapabilities
	Acls           map[string]string
}

func (m *MockApplication) Organizations() map[string]channelconfig.ApplicationOrg {_cover_atomic_.AddUint32(&GoCover_0_376432346462643230373733.Count[0], 1);
	return nil
}

func (m *MockApplication) Capabilities() channelconfig.ApplicationCapabilities {_cover_atomic_.AddUint32(&GoCover_0_376432346462643230373733.Count[1], 1);
	return m.CapabilitiesRv
}

func (m *MockApplication) PolicyRefForAPI(apiName string) string {_cover_atomic_.AddUint32(&GoCover_0_376432346462643230373733.Count[2], 1);
	if m.Acls == nil {_cover_atomic_.AddUint32(&GoCover_0_376432346462643230373733.Count[4], 1);
		return ""
	}
	_cover_atomic_.AddUint32(&GoCover_0_376432346462643230373733.Count[3], 1);return m.Acls[apiName]
}

// Returns the mock which itself is a provider
func (m *MockApplication) APIPolicyMapper() channelconfig.PolicyMapper {_cover_atomic_.AddUint32(&GoCover_0_376432346462643230373733.Count[5], 1);
	return m
}

type MockApplicationCapabilities struct {
	SupportedRv                  error
	ForbidDuplicateTXIdInBlockRv bool
	ACLsRv                       bool
	PrivateChannelDataRv         bool
	CollectionUpgradeRv          bool
	V1_1ValidationRv             bool
	V1_2ValidationRv             bool
	MetadataLifecycleRv          bool
	KeyLevelEndorsementRv        bool
	V1_3ValidationRv             bool
	FabTokenRv                   bool
}

func (mac *MockApplicationCapabilities) Supported() error {_cover_atomic_.AddUint32(&GoCover_0_376432346462643230373733.Count[6], 1);
	return mac.SupportedRv
}

func (mac *MockApplicationCapabilities) ForbidDuplicateTXIdInBlock() bool {_cover_atomic_.AddUint32(&GoCover_0_376432346462643230373733.Count[7], 1);
	return mac.ForbidDuplicateTXIdInBlockRv
}

func (mac *MockApplicationCapabilities) ACLs() bool {_cover_atomic_.AddUint32(&GoCover_0_376432346462643230373733.Count[8], 1);
	return mac.ACLsRv
}

func (mac *MockApplicationCapabilities) PrivateChannelData() bool {_cover_atomic_.AddUint32(&GoCover_0_376432346462643230373733.Count[9], 1);
	return mac.PrivateChannelDataRv
}

func (mac *MockApplicationCapabilities) CollectionUpgrade() bool {_cover_atomic_.AddUint32(&GoCover_0_376432346462643230373733.Count[10], 1);
	return mac.CollectionUpgradeRv
}

func (mac *MockApplicationCapabilities) V1_1Validation() bool {_cover_atomic_.AddUint32(&GoCover_0_376432346462643230373733.Count[11], 1);
	return mac.V1_1ValidationRv
}

func (mac *MockApplicationCapabilities) V1_2Validation() bool {_cover_atomic_.AddUint32(&GoCover_0_376432346462643230373733.Count[12], 1);
	return mac.V1_2ValidationRv
}

func (mac *MockApplicationCapabilities) MetadataLifecycle() bool {_cover_atomic_.AddUint32(&GoCover_0_376432346462643230373733.Count[13], 1);
	return mac.MetadataLifecycleRv
}

func (mac *MockApplicationCapabilities) KeyLevelEndorsement() bool {_cover_atomic_.AddUint32(&GoCover_0_376432346462643230373733.Count[14], 1);
	return mac.KeyLevelEndorsementRv
}

func (mac *MockApplicationCapabilities) V1_3Validation() bool {_cover_atomic_.AddUint32(&GoCover_0_376432346462643230373733.Count[15], 1);
	return mac.V1_3ValidationRv
}

func (mac *MockApplicationCapabilities) FabToken() bool {_cover_atomic_.AddUint32(&GoCover_0_376432346462643230373733.Count[16], 1);
	return mac.FabTokenRv
}

var GoCover_0_376432346462643230373733 = struct {
	Count     [17]uint32
	Pos       [3 * 17]uint32
	NumStmt   [17]uint16
} {
	Pos: [3 * 17]uint32{
		18, 20, 0x20053, // [0]
		22, 24, 0x20050, // [1]
		26, 27, 0x130042, // [2]
		30, 30, 0x180002, // [3]
		27, 29, 0x30013, // [4]
		34, 36, 0x20048, // [5]
		52, 54, 0x2003b, // [6]
		56, 58, 0x2004b, // [7]
		60, 62, 0x20035, // [8]
		64, 66, 0x20043, // [9]
		68, 70, 0x20042, // [10]
		72, 74, 0x2003f, // [11]
		76, 78, 0x2003f, // [12]
		80, 82, 0x20042, // [13]
		84, 86, 0x20044, // [14]
		88, 90, 0x2003f, // [15]
		92, 94, 0x20039, // [16]
	},
	NumStmt: [17]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
		1, // 10
		1, // 11
		1, // 12
		1, // 13
		1, // 14
		1, // 15
		1, // 16
	},
}
var _ = _cover_atomic_.LoadUint32
