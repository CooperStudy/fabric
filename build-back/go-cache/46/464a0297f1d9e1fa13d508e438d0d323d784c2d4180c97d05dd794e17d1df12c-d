//line /home/cooper/go/src/github.com/hyperledger/fabric/peer/clilogging/revertlevels.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package clilogging; import _cover_atomic_ "sync/atomic"

import (
	"context"

	"github.com/hyperledger/fabric/protos/peer"
	"github.com/spf13/cobra"
)

func revertLevelsCmd(cf *LoggingCmdFactory) *cobra.Command {_cover_atomic_.AddUint32(&GoCover_4_303930383430333338303032.Count[0], 1);
	var loggingRevertLevelsCmd = &cobra.Command{
		Use:   "revertlevels",
		Short: "Reverts the logging spec to the peer's spec at startup.",
		Long:  `Reverts the logging spec to the peer's spec at startup.`,
		RunE: func(cmd *cobra.Command, args []string) error {_cover_atomic_.AddUint32(&GoCover_4_303930383430333338303032.Count[2], 1);
			return revertLevels(cf, cmd, args)
		},
	}
	_cover_atomic_.AddUint32(&GoCover_4_303930383430333338303032.Count[1], 1);return loggingRevertLevelsCmd
}

func revertLevels(cf *LoggingCmdFactory, cmd *cobra.Command, args []string) (err error) {_cover_atomic_.AddUint32(&GoCover_4_303930383430333338303032.Count[3], 1);
	err = checkLoggingCmdParams(cmd, args)
	if err == nil {_cover_atomic_.AddUint32(&GoCover_4_303930383430333338303032.Count[5], 1);
		// Parsing of the command line is done so silence cmd usage
		cmd.SilenceUsage = true

		if cf == nil {_cover_atomic_.AddUint32(&GoCover_4_303930383430333338303032.Count[8], 1);
			cf, err = InitCmdFactory()
			if err != nil {_cover_atomic_.AddUint32(&GoCover_4_303930383430333338303032.Count[9], 1);
				return err
			}
		}
		_cover_atomic_.AddUint32(&GoCover_4_303930383430333338303032.Count[6], 1);env := cf.wrapWithEnvelope(&peer.AdminOperation{})
		_, err = cf.AdminClient.RevertLogLevels(context.Background(), env)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_4_303930383430333338303032.Count[10], 1);
			return err
		}
		_cover_atomic_.AddUint32(&GoCover_4_303930383430333338303032.Count[7], 1);logger.Info("Logging spec reverted to the peer's spec at startup.")
	}
	_cover_atomic_.AddUint32(&GoCover_4_303930383430333338303032.Count[4], 1);return err
}

var GoCover_4_303930383430333338303032 = struct {
	Count     [11]uint32
	Pos       [3 * 11]uint32
	NumStmt   [11]uint16
} {
	Pos: [3 * 11]uint32{
		16, 21, 0x37003c, // [0]
		25, 25, 0x1f0002, // [1]
		21, 23, 0x40037, // [2]
		28, 30, 0x100059, // [3]
		47, 47, 0xc0002, // [4]
		30, 34, 0x100010, // [5]
		40, 42, 0x110003, // [6]
		45, 45, 0x460003, // [7]
		34, 36, 0x120010, // [8]
		36, 38, 0x50012, // [9]
		42, 44, 0x40011, // [10]
	},
	NumStmt: [11]uint16{
		1, // 0
		1, // 1
		1, // 2
		2, // 3
		1, // 4
		2, // 5
		3, // 6
		1, // 7
		2, // 8
		1, // 9
		1, // 10
	},
}
var _ = _cover_atomic_.LoadUint32
