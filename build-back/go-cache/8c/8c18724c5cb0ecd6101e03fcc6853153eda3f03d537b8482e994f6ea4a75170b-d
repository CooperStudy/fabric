//line /home/cooper/go/src/github.com/hyperledger/fabric/core/ledger/pvtdatapolicy/btlpolicy.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package pvtdatapolicy; import _cover_atomic_ "sync/atomic"

import (
	"math"
	"sync"

	"github.com/hyperledger/fabric/core/common/privdata"
	"github.com/hyperledger/fabric/protos/common"
)

var defaultBTL uint64 = math.MaxUint64

// BTLPolicy BlockToLive policy for the pvt data
type BTLPolicy interface {
	// GetBTL returns BlockToLive for a given namespace and collection
	GetBTL(ns string, coll string) (uint64, error)
	// GetExpiringBlock returns the block number by which the pvtdata for given namespace,collection, and committingBlock should expire
	GetExpiringBlock(namesapce string, collection string, committingBlock uint64) (uint64, error)
}

// LSCCBasedBTLPolicy implements interface BTLPolicy.
// This implementation loads the BTL policy from lscc namespace which is populated
// with the collection configuration during chaincode initialization
type LSCCBasedBTLPolicy struct {
	collInfoProvider collectionInfoProvider
	cache            map[btlkey]uint64
	lock             sync.Mutex
}

type btlkey struct {
	ns   string
	coll string
}

// ConstructBTLPolicy constructs an instance of LSCCBasedBTLPolicy
func ConstructBTLPolicy(collInfoProvider collectionInfoProvider) BTLPolicy {_cover_atomic_.AddUint32(&GoCover_0_393536656435306264396262.Count[0], 1);
	return &LSCCBasedBTLPolicy{
		collInfoProvider: collInfoProvider,
		cache:            make(map[btlkey]uint64),
	}
}

// GetBTL implements corresponding function in interface `BTLPolicyMgr`
func (p *LSCCBasedBTLPolicy) GetBTL(namesapce string, collection string) (uint64, error) {_cover_atomic_.AddUint32(&GoCover_0_393536656435306264396262.Count[1], 1);
	var btl uint64
	var ok bool
	key := btlkey{namesapce, collection}
	p.lock.Lock()
	defer p.lock.Unlock()
	btl, ok = p.cache[key]
	if !ok {_cover_atomic_.AddUint32(&GoCover_0_393536656435306264396262.Count[3], 1);
		collConfig, err := p.collInfoProvider.CollectionInfo(namesapce, collection)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_0_393536656435306264396262.Count[7], 1);
			return 0, err
		}
		_cover_atomic_.AddUint32(&GoCover_0_393536656435306264396262.Count[4], 1);if collConfig == nil {_cover_atomic_.AddUint32(&GoCover_0_393536656435306264396262.Count[8], 1);
			return 0, privdata.NoSuchCollectionError{Namespace: namesapce, Collection: collection}
		}
		_cover_atomic_.AddUint32(&GoCover_0_393536656435306264396262.Count[5], 1);btlConfigured := collConfig.BlockToLive
		if btlConfigured > 0 {_cover_atomic_.AddUint32(&GoCover_0_393536656435306264396262.Count[9], 1);
			btl = uint64(btlConfigured)
		} else{ _cover_atomic_.AddUint32(&GoCover_0_393536656435306264396262.Count[10], 1);{
			btl = defaultBTL
		}}
		_cover_atomic_.AddUint32(&GoCover_0_393536656435306264396262.Count[6], 1);p.cache[key] = btl
	}
	_cover_atomic_.AddUint32(&GoCover_0_393536656435306264396262.Count[2], 1);return btl, nil
}

// GetExpiringBlock implements function from the interface `BTLPolicy`
func (p *LSCCBasedBTLPolicy) GetExpiringBlock(namesapce string, collection string, committingBlock uint64) (uint64, error) {_cover_atomic_.AddUint32(&GoCover_0_393536656435306264396262.Count[11], 1);
	btl, err := p.GetBTL(namesapce, collection)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_393536656435306264396262.Count[14], 1);
		return 0, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_393536656435306264396262.Count[12], 1);expiryBlk := committingBlock + btl + uint64(1)
	if expiryBlk <= committingBlock {_cover_atomic_.AddUint32(&GoCover_0_393536656435306264396262.Count[15], 1); // committingBlk + btl overflows uint64-max
		expiryBlk = math.MaxUint64
	}
	_cover_atomic_.AddUint32(&GoCover_0_393536656435306264396262.Count[13], 1);return expiryBlk, nil
}

type collectionInfoProvider interface {
	CollectionInfo(chaincodeName, collectionName string) (*common.StaticCollectionConfig, error)
}

//go:generate counterfeiter -o mock/coll_info_provider.go -fake-name CollectionInfoProvider . collectionInfoProvider

var GoCover_0_393536656435306264396262 = struct {
	Count     [16]uint32
	Pos       [3 * 16]uint32
	NumStmt   [16]uint16
} {
	Pos: [3 * 16]uint32{
		42, 47, 0x2004c, // [0]
		50, 57, 0x9005a, // [1]
		73, 73, 0x110002, // [2]
		57, 59, 0x110009, // [3]
		62, 62, 0x180003, // [4]
		65, 66, 0x180003, // [5]
		71, 71, 0x150003, // [6]
		59, 61, 0x40011, // [7]
		62, 64, 0x40018, // [8]
		66, 68, 0x40018, // [9]
		68, 70, 0x40009, // [10]
		77, 79, 0x10007c, // [11]
		82, 83, 0x220002, // [12]
		86, 86, 0x170002, // [13]
		79, 81, 0x30010, // [14]
		83, 85, 0x30022, // [15]
	},
	NumStmt: [16]uint16{
		1, // 0
		7, // 1
		1, // 2
		2, // 3
		1, // 4
		2, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
		1, // 10
		2, // 11
		2, // 12
		1, // 13
		1, // 14
		1, // 15
	},
}
var _ = _cover_atomic_.LoadUint32
