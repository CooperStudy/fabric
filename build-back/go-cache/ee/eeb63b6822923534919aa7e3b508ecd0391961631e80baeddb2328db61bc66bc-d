//line /home/cooper/go/src/github.com/hyperledger/fabric/core/chaincode/platforms/node/platform.go:1
/*
# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
*/

package node; import _cover_atomic_ "sync/atomic"

import (
	"archive/tar"
	"bytes"
	"compress/gzip"
	"errors"
	"fmt"
	"net/url"
	"os"
	"path/filepath"
	"regexp"
	"strings"

	"github.com/hyperledger/fabric/common/flogging"
	"github.com/hyperledger/fabric/core/chaincode/platforms"
	"github.com/hyperledger/fabric/core/chaincode/platforms/ccmetadata"
	"github.com/hyperledger/fabric/core/chaincode/platforms/util"
	cutil "github.com/hyperledger/fabric/core/container/util"
	pb "github.com/hyperledger/fabric/protos/peer"
)

var logger = flogging.MustGetLogger("chaincode.platform.node")

// Platform for chaincodes written in Go
type Platform struct {
}

// Returns whether the given file or directory exists or not
func pathExists(path string) (bool, error) {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[0], 1);
	_, err := os.Stat(path)
	if err == nil {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[3], 1);
		return true, nil
	}
	_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[1], 1);if os.IsNotExist(err) {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[4], 1);
		return false, nil
	}
	_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[2], 1);return true, err
}

// Name returns the name of this platform
func (nodePlatform *Platform) Name() string {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[5], 1);
	return pb.ChaincodeSpec_NODE.String()
}

// ValidateSpec validates Go chaincodes
func (nodePlatform *Platform) ValidatePath(rawPath string) error {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[6], 1);
	path, err := url.Parse(rawPath)
	if err != nil || path == nil {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[9], 1);
		return fmt.Errorf("invalid path: %s", err)
	}

	//Treat empty scheme as a local filesystem path
	_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[7], 1);if path.Scheme == "" {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[10], 1);
		pathToCheck, err := filepath.Abs(rawPath)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[13], 1);
			return fmt.Errorf("error obtaining absolute path of the chaincode: %s", err)
		}

		_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[11], 1);exists, err := pathExists(pathToCheck)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[14], 1);
			return fmt.Errorf("error validating chaincode path: %s", err)
		}
		_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[12], 1);if !exists {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[15], 1);
			return fmt.Errorf("path to chaincode does not exist: %s", rawPath)
		}
	}
	_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[8], 1);return nil
}

func (nodePlatform *Platform) ValidateCodePackage(code []byte) error {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[16], 1);

	if len(code) == 0 {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[21], 1);
		// Nothing to validate if no CodePackage was included
		return nil
	}

	// FAB-2122: Scan the provided tarball to ensure it only contains source-code under
	// the src folder.
	//
	// It should be noted that we cannot catch every threat with these techniques.  Therefore,
	// the container itself needs to be the last line of defense and be configured to be
	// resilient in enforcing constraints. However, we should still do our best to keep as much
	// garbage out of the system as possible.
	_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[17], 1);re := regexp.MustCompile(`^(/)?(src|META-INF)/.*`)
	is := bytes.NewReader(code)
	gr, err := gzip.NewReader(is)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[22], 1);
		return fmt.Errorf("failure opening codepackage gzip stream: %s", err)
	}
	_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[18], 1);tr := tar.NewReader(gr)

	var foundPackageJson = false
	for {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[23], 1);
		header, err := tr.Next()
		if err != nil {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[27], 1);
			// We only get here if there are no more entries to scan
			break
		}

		// --------------------------------------------------------------------------------------
		// Check name for conforming path
		// --------------------------------------------------------------------------------------
		_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[24], 1);if !re.MatchString(header.Name) {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[28], 1);
			return fmt.Errorf("illegal file detected in payload: \"%s\"", header.Name)
		}
		_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[25], 1);if header.Name == "src/package.json" {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[29], 1);
			foundPackageJson = true
		}
		// --------------------------------------------------------------------------------------
		// Check that file mode makes sense
		// --------------------------------------------------------------------------------------
		// Acceptable flags:
		//      ISREG      == 0100000
		//      -rw-rw-rw- == 0666
		//
		// Anything else is suspect in this context and will be rejected
		// --------------------------------------------------------------------------------------
		_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[26], 1);if header.Mode&^0100666 != 0 {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[30], 1);
			return fmt.Errorf("illegal file mode detected for file %s: %o", header.Name, header.Mode)
		}
	}
	_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[19], 1);if !foundPackageJson {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[31], 1);
		return fmt.Errorf("no package.json found at the root of the chaincode package")
	}

	_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[20], 1);return nil
}

// Generates a deployment payload by putting source files in src/$file entries in .tar.gz format
func (nodePlatform *Platform) GetDeploymentPayload(path string) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[32], 1);

	var err error

	// --------------------------------------------------------------------------------------
	// Write out our tar package
	// --------------------------------------------------------------------------------------
	payload := bytes.NewBuffer(nil)
	gw := gzip.NewWriter(payload)
	tw := tar.NewWriter(gw)

	folder := path
	if folder == "" {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[37], 1);
		return nil, errors.New("ChaincodeSpec's path cannot be empty")
	}

	// trim trailing slash if it exists
	_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[33], 1);if folder[len(folder)-1] == '/' {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[38], 1);
		folder = folder[:len(folder)-1]
	}

	_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[34], 1);logger.Debugf("Packaging node.js project from path %s", folder)

	if err = cutil.WriteFolderToTarPackage(tw, folder, []string{"node_modules"}, nil, nil); err != nil {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[39], 1);

		logger.Errorf("Error writing folder to tar package %s", err)
		return nil, fmt.Errorf("Error writing Chaincode package contents: %s", err)
	}

	// Write the tar file out
	_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[35], 1);if err := tw.Close(); err != nil {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[40], 1);
		return nil, fmt.Errorf("Error writing Chaincode package contents: %s", err)
	}

	_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[36], 1);tw.Close()
	gw.Close()

	return payload.Bytes(), nil
}

func (nodePlatform *Platform) GenerateDockerfile() (string, error) {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[41], 1);

	var buf []string

	buf = append(buf, "FROM "+cutil.GetDockerfileFromConfig("chaincode.node.runtime"))
	buf = append(buf, "ADD binpackage.tar /usr/local/src")

	dockerFileContents := strings.Join(buf, "\n")

	return dockerFileContents, nil
}

func (nodePlatform *Platform) GenerateDockerBuild(path string, code []byte, tw *tar.Writer) error {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[42], 1);

	codepackage := bytes.NewReader(code)
	binpackage := bytes.NewBuffer(nil)
	err := util.DockerBuild(util.DockerBuildOptions{
		Cmd:          fmt.Sprint("cp -R /chaincode/input/src/. /chaincode/output && cd /chaincode/output && npm install --production"),
		InputStream:  codepackage,
		OutputStream: binpackage,
	})
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[44], 1);
		return err
	}

	_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[43], 1);return cutil.WriteBytesToPackage("binpackage.tar", binpackage.Bytes(), tw)
}

//GetMetadataProvider fetches metadata provider given deployment spec
func (nodePlatform *Platform) GetMetadataProvider(code []byte) platforms.MetadataProvider {_cover_atomic_.AddUint32(&GoCover_0_303039656166386233353938.Count[45], 1);
	return &ccmetadata.TargzMetadataProvider{Code: code}
}

var GoCover_0_303039656166386233353938 = struct {
	Count     [46]uint32
	Pos       [3 * 46]uint32
	NumStmt   [46]uint16
} {
	Pos: [3 * 46]uint32{
		36, 38, 0x10002c, // [0]
		41, 41, 0x180002, // [1]
		44, 44, 0x120002, // [2]
		38, 40, 0x30010, // [3]
		41, 43, 0x30018, // [4]
		48, 50, 0x2002d, // [5]
		53, 55, 0x1f0042, // [6]
		60, 60, 0x170002, // [7]
		74, 74, 0xc0002, // [8]
		55, 57, 0x3001f, // [9]
		60, 62, 0x110017, // [10]
		66, 67, 0x110003, // [11]
		70, 70, 0xe0003, // [12]
		62, 64, 0x40011, // [13]
		67, 69, 0x40011, // [14]
		70, 72, 0x4000e, // [15]
		77, 79, 0x140046, // [16]
		91, 94, 0x100002, // [17]
		97, 100, 0x60002, // [18]
		129, 129, 0x170002, // [19]
		133, 133, 0xc0002, // [20]
		79, 82, 0x30014, // [21]
		94, 96, 0x30010, // [22]
		100, 102, 0x110006, // [23]
		110, 110, 0x230003, // [24]
		113, 113, 0x280003, // [25]
		125, 125, 0x200003, // [26]
		102, 104, 0x90011, // [27]
		110, 112, 0x40023, // [28]
		113, 115, 0x40028, // [29]
		125, 127, 0x40020, // [30]
		129, 131, 0x30017, // [31]
		137, 149, 0x120051, // [32]
		154, 154, 0x220002, // [33]
		158, 160, 0x650002, // [34]
		167, 167, 0x230002, // [35]
		171, 174, 0x1d0002, // [36]
		149, 151, 0x30012, // [37]
		154, 156, 0x30022, // [38]
		160, 164, 0x30065, // [39]
		167, 169, 0x30023, // [40]
		177, 187, 0x20044, // [41]
		189, 198, 0x100063, // [42]
		202, 202, 0x4c0002, // [43]
		198, 200, 0x30010, // [44]
		206, 208, 0x2005b, // [45]
	},
	NumStmt: [46]uint16{
		2, // 0
		1, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
		2, // 6
		1, // 7
		1, // 8
		1, // 9
		2, // 10
		2, // 11
		1, // 12
		1, // 13
		1, // 14
		1, // 15
		1, // 16
		4, // 17
		3, // 18
		1, // 19
		1, // 20
		1, // 21
		1, // 22
		2, // 23
		1, // 24
		1, // 25
		1, // 26
		1, // 27
		1, // 28
		1, // 29
		1, // 30
		1, // 31
		6, // 32
		1, // 33
		2, // 34
		1, // 35
		3, // 36
		1, // 37
		1, // 38
		2, // 39
		1, // 40
		5, // 41
		4, // 42
		1, // 43
		1, // 44
		1, // 45
	},
}
var _ = _cover_atomic_.LoadUint32
