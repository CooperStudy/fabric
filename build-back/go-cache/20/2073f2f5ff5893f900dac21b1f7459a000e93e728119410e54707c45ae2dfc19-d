//line /home/cooper/go/src/github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/privacyenabledstate/optimization.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package privacyenabledstate; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric/common/ledger/util/leveldbhelper"
)

type metadataHint struct {
	cache      map[string]bool
	bookkeeper *leveldbhelper.DBHandle
}

func newMetadataHint(bookkeeper *leveldbhelper.DBHandle) *metadataHint {_cover_atomic_.AddUint32(&GoCover_2_626362383230316436633863.Count[0], 1);
	cache := map[string]bool{}
	itr := bookkeeper.GetIterator(nil, nil)
	defer itr.Release()
	for itr.Next() {_cover_atomic_.AddUint32(&GoCover_2_626362383230316436633863.Count[2], 1);
		namespace := string(itr.Key())
		cache[namespace] = true
	}
	_cover_atomic_.AddUint32(&GoCover_2_626362383230316436633863.Count[1], 1);return &metadataHint{cache, bookkeeper}
}

func (h *metadataHint) metadataEverUsedFor(namespace string) bool {_cover_atomic_.AddUint32(&GoCover_2_626362383230316436633863.Count[3], 1);
	return h.cache[namespace]
}

func (h *metadataHint) setMetadataUsedFlag(updates *UpdateBatch) {_cover_atomic_.AddUint32(&GoCover_2_626362383230316436633863.Count[4], 1);
	batch := leveldbhelper.NewUpdateBatch()
	for ns := range filterNamespacesThatHasMetadata(updates) {_cover_atomic_.AddUint32(&GoCover_2_626362383230316436633863.Count[6], 1);
		if h.cache[ns] {_cover_atomic_.AddUint32(&GoCover_2_626362383230316436633863.Count[8], 1);
			continue
		}
		_cover_atomic_.AddUint32(&GoCover_2_626362383230316436633863.Count[7], 1);h.cache[ns] = true
		batch.Put([]byte(ns), []byte{})
	}
	_cover_atomic_.AddUint32(&GoCover_2_626362383230316436633863.Count[5], 1);h.bookkeeper.WriteBatch(batch, true)
}

func filterNamespacesThatHasMetadata(updates *UpdateBatch) map[string]bool {_cover_atomic_.AddUint32(&GoCover_2_626362383230316436633863.Count[9], 1);
	namespaces := map[string]bool{}
	pubUpdates, hashUpdates := updates.PubUpdates, updates.HashUpdates
	// add ns for public data
	for _, ns := range pubUpdates.GetUpdatedNamespaces() {_cover_atomic_.AddUint32(&GoCover_2_626362383230316436633863.Count[12], 1);
		for _, vv := range updates.PubUpdates.GetUpdates(ns) {_cover_atomic_.AddUint32(&GoCover_2_626362383230316436633863.Count[13], 1);
			if vv.Metadata == nil {_cover_atomic_.AddUint32(&GoCover_2_626362383230316436633863.Count[15], 1);
				continue
			}
			_cover_atomic_.AddUint32(&GoCover_2_626362383230316436633863.Count[14], 1);namespaces[ns] = true
		}
	}
	// add ns for private hashes
	_cover_atomic_.AddUint32(&GoCover_2_626362383230316436633863.Count[10], 1);for ns, nsBatch := range hashUpdates.UpdateMap {_cover_atomic_.AddUint32(&GoCover_2_626362383230316436633863.Count[16], 1);
		for _, coll := range nsBatch.GetCollectionNames() {_cover_atomic_.AddUint32(&GoCover_2_626362383230316436633863.Count[17], 1);
			for _, vv := range nsBatch.GetUpdates(coll) {_cover_atomic_.AddUint32(&GoCover_2_626362383230316436633863.Count[18], 1);
				if vv.Metadata == nil {_cover_atomic_.AddUint32(&GoCover_2_626362383230316436633863.Count[20], 1);
					continue
				}
				_cover_atomic_.AddUint32(&GoCover_2_626362383230316436633863.Count[19], 1);namespaces[ns] = true
			}
		}
	}
	_cover_atomic_.AddUint32(&GoCover_2_626362383230316436633863.Count[11], 1);return namespaces
}

var GoCover_2_626362383230316436633863 = struct {
	Count     [21]uint32
	Pos       [3 * 21]uint32
	NumStmt   [21]uint16
} {
	Pos: [3 * 21]uint32{
		18, 22, 0x110048, // [0]
		26, 26, 0x290002, // [1]
		22, 25, 0x30011, // [2]
		29, 31, 0x20043, // [3]
		33, 35, 0x3b0042, // [4]
		42, 42, 0x260002, // [5]
		35, 36, 0x12003b, // [6]
		39, 40, 0x220003, // [7]
		36, 37, 0xc0012, // [8]
		45, 49, 0x37004c, // [9]
		58, 58, 0x310002, // [10]
		68, 68, 0x130002, // [11]
		49, 50, 0x380037, // [12]
		50, 51, 0x1a0038, // [13]
		54, 54, 0x190004, // [14]
		51, 52, 0xd001a, // [15]
		58, 59, 0x350031, // [16]
		59, 60, 0x300035, // [17]
		60, 61, 0x1b0030, // [18]
		64, 64, 0x1a0005, // [19]
		61, 62, 0xe001b, // [20]
	},
	NumStmt: [21]uint16{
		4, // 0
		1, // 1
		2, // 2
		1, // 3
		2, // 4
		1, // 5
		1, // 6
		2, // 7
		1, // 8
		3, // 9
		1, // 10
		1, // 11
		1, // 12
		1, // 13
		1, // 14
		1, // 15
		1, // 16
		1, // 17
		1, // 18
		1, // 19
		1, // 20
	},
}
var _ = _cover_atomic_.LoadUint32
