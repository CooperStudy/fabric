//line /home/cooper/go/src/github.com/hyperledger/fabric/common/flogging/zap.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package flogging; import _cover_atomic_ "sync/atomic"

import (
	"fmt"
	"strings"

	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
	"go.uber.org/zap/zapgrpc"
)

// NewZapLogger creates a zap logger around a new zap.Core. The core will use
// the provided encoder and sinks and a level enabler that is associated with
// the provided logger name. The logger that is returned will be named the same
// as the logger.
func NewZapLogger(core zapcore.Core, options ...zap.Option) *zap.Logger {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[0], 1);
	return zap.New(
		core,
		append([]zap.Option{
			zap.AddCaller(),
			zap.AddStacktrace(zapcore.ErrorLevel),
		}, options...)...,
	)
}

// NewGRPCLogger creates a grpc.Logger that delegates to a zap.Logger.
func NewGRPCLogger(l *zap.Logger) *zapgrpc.Logger {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[1], 1);
	l = l.WithOptions(
		zap.AddCaller(),
		zap.AddCallerSkip(3),
	)
	return zapgrpc.NewLogger(l, zapgrpc.WithDebug())
}

// NewFabricLogger creates a logger that delegates to the zap.SugaredLogger.
func NewFabricLogger(l *zap.Logger, options ...zap.Option) *FabricLogger {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[2], 1);
	return &FabricLogger{
		s: l.WithOptions(append(options, zap.AddCallerSkip(1))...).Sugar(),
	}
}

// A FabricLogger is an adapter around a zap.SugaredLogger that provides
// structured logging capabilities while preserving much of the legacy logging
// behavior.
//
// The most significant difference between the FabricLogger and the
// zap.SugaredLogger is that methods without a formatting suffix (f or w) build
// the log entry message with fmt.Sprintln instead of fmt.Sprint. Without this
// change, arguments are not separated by spaces.
type FabricLogger struct{ s *zap.SugaredLogger }

func (f *FabricLogger) DPanic(args ...interface{})                    {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[3], 1); f.s.DPanicf(formatArgs(args)) }
func (f *FabricLogger) DPanicf(template string, args ...interface{})  {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[4], 1); f.s.DPanicf(template, args...) }
func (f *FabricLogger) DPanicw(msg string, kvPairs ...interface{})    {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[5], 1); f.s.DPanicw(msg, kvPairs...) }
func (f *FabricLogger) Debug(args ...interface{})                     {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[6], 1); f.s.Debugf(formatArgs(args)) }
func (f *FabricLogger) Debugf(template string, args ...interface{})   {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[7], 1); f.s.Debugf(template, args...) }
func (f *FabricLogger) Debugw(msg string, kvPairs ...interface{})     {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[8], 1); f.s.Debugw(msg, kvPairs...) }
func (f *FabricLogger) Error(args ...interface{})                     {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[9], 1); f.s.Errorf(formatArgs(args)) }
func (f *FabricLogger) Errorf(template string, args ...interface{})   {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[10], 1); f.s.Errorf(template, args...) }
func (f *FabricLogger) Errorw(msg string, kvPairs ...interface{})     {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[11], 1); f.s.Errorw(msg, kvPairs...) }
func (f *FabricLogger) Fatal(args ...interface{})                     {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[12], 1); f.s.Fatalf(formatArgs(args)) }
func (f *FabricLogger) Fatalf(template string, args ...interface{})   {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[13], 1); f.s.Fatalf(template, args...) }
func (f *FabricLogger) Fatalw(msg string, kvPairs ...interface{})     {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[14], 1); f.s.Fatalw(msg, kvPairs...) }
func (f *FabricLogger) Info(args ...interface{})                      {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[15], 1); f.s.Infof(formatArgs(args)) }
func (f *FabricLogger) Infof(template string, args ...interface{})    {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[16], 1); f.s.Infof(template, args...) }
func (f *FabricLogger) Infow(msg string, kvPairs ...interface{})      {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[17], 1); f.s.Infow(msg, kvPairs...) }
func (f *FabricLogger) Panic(args ...interface{})                     {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[18], 1); f.s.Panicf(formatArgs(args)) }
func (f *FabricLogger) Panicf(template string, args ...interface{})   {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[19], 1); f.s.Panicf(template, args...) }
func (f *FabricLogger) Panicw(msg string, kvPairs ...interface{})     {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[20], 1); f.s.Panicw(msg, kvPairs...) }
func (f *FabricLogger) Warn(args ...interface{})                      {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[21], 1); f.s.Warnf(formatArgs(args)) }
func (f *FabricLogger) Warnf(template string, args ...interface{})    {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[22], 1); f.s.Warnf(template, args...) }
func (f *FabricLogger) Warnw(msg string, kvPairs ...interface{})      {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[23], 1); f.s.Warnw(msg, kvPairs...) }
func (f *FabricLogger) Warning(args ...interface{})                   {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[24], 1); f.s.Warnf(formatArgs(args)) }
func (f *FabricLogger) Warningf(template string, args ...interface{}) {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[25], 1); f.s.Warnf(template, args...) }

// for backwards compatibility
func (f *FabricLogger) Critical(args ...interface{})                   {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[26], 1); f.s.Errorf(formatArgs(args)) }
func (f *FabricLogger) Criticalf(template string, args ...interface{}) {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[27], 1); f.s.Errorf(template, args...) }
func (f *FabricLogger) Notice(args ...interface{})                     {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[28], 1); f.s.Infof(formatArgs(args)) }
func (f *FabricLogger) Noticef(template string, args ...interface{})   {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[29], 1); f.s.Infof(template, args...) }

func (f *FabricLogger) Named(name string) *FabricLogger {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[30], 1); return &FabricLogger{s: f.s.Named(name)} }
func (f *FabricLogger) Sync() error                     {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[31], 1); return f.s.Sync() }
func (f *FabricLogger) Zap() *zap.Logger                {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[32], 1); return f.s.Desugar() }

func (f *FabricLogger) IsEnabledFor(level zapcore.Level) bool {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[33], 1);
	return f.s.Desugar().Core().Enabled(level)
}

func (f *FabricLogger) With(args ...interface{}) *FabricLogger {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[34], 1);
	return &FabricLogger{s: f.s.With(args...)}
}

func (f *FabricLogger) WithOptions(opts ...zap.Option) *FabricLogger {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[35], 1);
	l := f.s.Desugar().WithOptions(opts...)
	return &FabricLogger{s: l.Sugar()}
}

func formatArgs(args []interface{}) string {_cover_atomic_.AddUint32(&GoCover_6_643766633362313436336635.Count[36], 1); return strings.TrimSuffix(fmt.Sprintln(args...), "\n") }

var GoCover_6_643766633362313436336635 = struct {
	Count     [37]uint32
	Pos       [3 * 37]uint32
	NumStmt   [37]uint16
} {
	Pos: [3 * 37]uint32{
		22, 30, 0x20049, // [0]
		33, 39, 0x20033, // [1]
		42, 46, 0x2004a, // [2]
		58, 58, 0x680047, // [3]
		59, 59, 0x690047, // [4]
		60, 60, 0x670047, // [5]
		61, 61, 0x670047, // [6]
		62, 62, 0x680047, // [7]
		63, 63, 0x660047, // [8]
		64, 64, 0x670047, // [9]
		65, 65, 0x680047, // [10]
		66, 66, 0x660047, // [11]
		67, 67, 0x670047, // [12]
		68, 68, 0x680047, // [13]
		69, 69, 0x660047, // [14]
		70, 70, 0x660047, // [15]
		71, 71, 0x670047, // [16]
		72, 72, 0x650047, // [17]
		73, 73, 0x670047, // [18]
		74, 74, 0x680047, // [19]
		75, 75, 0x660047, // [20]
		76, 76, 0x660047, // [21]
		77, 77, 0x670047, // [22]
		78, 78, 0x650047, // [23]
		79, 79, 0x660047, // [24]
		80, 80, 0x670047, // [25]
		83, 83, 0x680048, // [26]
		84, 84, 0x690048, // [27]
		85, 85, 0x670048, // [28]
		86, 86, 0x680048, // [29]
		88, 88, 0x650039, // [30]
		89, 89, 0x4e0039, // [31]
		90, 90, 0x510039, // [32]
		92, 94, 0x2003f, // [33]
		96, 98, 0x20040, // [34]
		100, 103, 0x20046, // [35]
		105, 105, 0x66002c, // [36]
	},
	NumStmt: [37]uint16{
		1, // 0
		2, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
		1, // 10
		1, // 11
		1, // 12
		1, // 13
		1, // 14
		1, // 15
		1, // 16
		1, // 17
		1, // 18
		1, // 19
		1, // 20
		1, // 21
		1, // 22
		1, // 23
		1, // 24
		1, // 25
		1, // 26
		1, // 27
		1, // 28
		1, // 29
		1, // 30
		1, // 31
		1, // 32
		1, // 33
		1, // 34
		2, // 35
		1, // 36
	},
}
var _ = _cover_atomic_.LoadUint32
