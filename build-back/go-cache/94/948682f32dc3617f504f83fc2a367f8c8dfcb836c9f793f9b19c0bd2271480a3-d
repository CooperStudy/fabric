//line /home/cooper/go/src/github.com/hyperledger/fabric/core/scc/sccproviderimpl.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package scc; import _cover_atomic_ "sync/atomic"

import (
	"fmt"

	"github.com/hyperledger/fabric/common/channelconfig"
	"github.com/hyperledger/fabric/common/policies"
	"github.com/hyperledger/fabric/core/ledger"
	"github.com/hyperledger/fabric/core/peer"
)

// NewProvider creates a new Provider instance
func NewProvider(pOps peer.Operations, pSup peer.Support, r Registrar) *Provider {_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[0], 1);
	return &Provider{
		Peer:        pOps,
		PeerSupport: pSup,
		Registrar:   r,
	}
}

// Provider implements sysccprovider.SystemChaincodeProvider
type Provider struct {
	Peer        peer.Operations
	PeerSupport peer.Support
	Registrar   Registrar
	SysCCs      []SelfDescribingSysCC
}

// RegisterSysCC registers a system chaincode with the syscc provider.
func (p *Provider) RegisterSysCC(scc SelfDescribingSysCC) {_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[1], 1);
	p.SysCCs = append(p.SysCCs, scc)
	_, err := p.registerSysCC(scc)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[2], 1);
		sysccLogger.Panicf("Could not register system chaincode: %s", err)
	}
}

// IsSysCC returns true if the supplied chaincode is a system chaincode
func (p *Provider) IsSysCC(name string) bool {_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[3], 1);
	for _, sysCC := range p.SysCCs {_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[6], 1);
		if sysCC.Name() == name {_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[7], 1);
			return true
		}
	}
	_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[4], 1);if isDeprecatedSysCC(name) {_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[8], 1);
		return true
	}
	_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[5], 1);return false
}

// IsSysCCAndNotInvokableCC2CC returns true if the chaincode
// is a system chaincode and *CANNOT* be invoked through
// a cc2cc invocation
func (p *Provider) IsSysCCAndNotInvokableCC2CC(name string) bool {_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[9], 1);
	for _, sysCC := range p.SysCCs {_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[12], 1);
		if sysCC.Name() == name {_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[13], 1);
			return !sysCC.InvokableCC2CC()
		}
	}

	_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[10], 1);if isDeprecatedSysCC(name) {_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[14], 1);
		return true
	}

	_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[11], 1);return false
}

// GetQueryExecutorForLedger returns a query executor for the specified channel
func (p *Provider) GetQueryExecutorForLedger(cid string) (ledger.QueryExecutor, error) {_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[15], 1);
	l := p.Peer.GetLedger(cid)
	if l == nil {_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[17], 1);
		return nil, fmt.Errorf("Could not retrieve ledger for channel %s", cid)
	}

	_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[16], 1);return l.NewQueryExecutor()
}

// IsSysCCAndNotInvokableExternal returns true if the chaincode
// is a system chaincode and *CANNOT* be invoked through
// a proposal to this peer
func (p *Provider) IsSysCCAndNotInvokableExternal(name string) bool {_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[18], 1);
	for _, sysCC := range p.SysCCs {_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[21], 1);
		if sysCC.Name() == name {_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[22], 1);
			return !sysCC.InvokableExternal()
		}
	}

	_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[19], 1);if isDeprecatedSysCC(name) {_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[23], 1);
		return true
	}

	_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[20], 1);return false
}

// GetApplicationConfig returns the configtxapplication.SharedConfig for the channel
// and whether the Application config exists
func (p *Provider) GetApplicationConfig(cid string) (channelconfig.Application, bool) {_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[24], 1);
	return p.PeerSupport.GetApplicationConfig(cid)
}

// Returns the policy manager associated to the passed channel
// and whether the policy manager exists
func (p *Provider) PolicyManager(channelID string) (policies.Manager, bool) {_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[25], 1);
	m := p.Peer.GetPolicyManager(channelID)
	return m, (m != nil)
}

func isDeprecatedSysCC(name string) bool {_cover_atomic_.AddUint32(&GoCover_3_613163393733346361646563.Count[26], 1);
	return name == "vscc" || name == "escc"
}

var GoCover_3_613163393733346361646563 = struct {
	Count     [27]uint32
	Pos       [3 * 27]uint32
	NumStmt   [27]uint16
} {
	Pos: [3 * 27]uint32{
		19, 25, 0x20052, // [0]
		36, 39, 0x10003b, // [1]
		39, 41, 0x30010, // [2]
		45, 46, 0x21002e, // [3]
		51, 51, 0x1d0002, // [4]
		54, 54, 0xe0002, // [5]
		46, 47, 0x1b0021, // [6]
		47, 49, 0x4001b, // [7]
		51, 53, 0x3001d, // [8]
		60, 61, 0x210042, // [9]
		67, 67, 0x1d0002, // [10]
		71, 71, 0xe0002, // [11]
		61, 62, 0x1b0021, // [12]
		62, 64, 0x4001b, // [13]
		67, 69, 0x3001d, // [14]
		75, 77, 0xe0058, // [15]
		81, 81, 0x1d0002, // [16]
		77, 79, 0x3000e, // [17]
		87, 88, 0x210045, // [18]
		94, 94, 0x1d0002, // [19]
		98, 98, 0xe0002, // [20]
		88, 89, 0x1b0021, // [21]
		89, 91, 0x4001b, // [22]
		94, 96, 0x3001d, // [23]
		103, 105, 0x20057, // [24]
		109, 112, 0x2004d, // [25]
		114, 116, 0x2002a, // [26]
	},
	NumStmt: [27]uint16{
		1, // 0
		3, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
		1, // 10
		1, // 11
		1, // 12
		1, // 13
		1, // 14
		2, // 15
		1, // 16
		1, // 17
		1, // 18
		1, // 19
		1, // 20
		1, // 21
		1, // 22
		1, // 23
		1, // 24
		2, // 25
		1, // 26
	},
}
var _ = _cover_atomic_.LoadUint32
