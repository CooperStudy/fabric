//line /home/cooper/go/src/github.com/hyperledger/fabric/orderer/common/msgprocessor/filter.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package msgprocessor; import _cover_atomic_ "sync/atomic"

import (
	"errors"

	ab "github.com/hyperledger/fabric/protos/common"
)

// ErrEmptyMessage is returned by the empty message filter on rejection.
var ErrEmptyMessage = errors.New("Message was empty")

// Rule defines a filter function which accepts, rejects, or forwards (to the next rule) an Envelope
type Rule interface {
	// Apply applies the rule to the given Envelope, either successfully or returns error
	Apply(message *ab.Envelope) error
}

// EmptyRejectRule rejects empty messages
var EmptyRejectRule = Rule(emptyRejectRule{})

type emptyRejectRule struct{}

func (a emptyRejectRule) Apply(message *ab.Envelope) error {_cover_atomic_.AddUint32(&GoCover_1_646330373837303238396264.Count[0], 1);
	if message.Payload == nil {_cover_atomic_.AddUint32(&GoCover_1_646330373837303238396264.Count[2], 1);
		return ErrEmptyMessage
	}
	_cover_atomic_.AddUint32(&GoCover_1_646330373837303238396264.Count[1], 1);return nil
}

// AcceptRule always returns Accept as a result for Apply
var AcceptRule = Rule(acceptRule{})

type acceptRule struct{}

func (a acceptRule) Apply(message *ab.Envelope) error {_cover_atomic_.AddUint32(&GoCover_1_646330373837303238396264.Count[3], 1);
	return nil
}

// RuleSet is used to apply a collection of rules
type RuleSet struct {
	rules []Rule
}

// NewRuleSet creates a new RuleSet with the given ordered list of Rules
func NewRuleSet(rules []Rule) *RuleSet {_cover_atomic_.AddUint32(&GoCover_1_646330373837303238396264.Count[4], 1);
	return &RuleSet{
		rules: rules,
	}
}

// Apply applies the rules given for this set in order, returning nil on valid or err on invalid
func (rs *RuleSet) Apply(message *ab.Envelope) error {_cover_atomic_.AddUint32(&GoCover_1_646330373837303238396264.Count[5], 1);
	for _, rule := range rs.rules {_cover_atomic_.AddUint32(&GoCover_1_646330373837303238396264.Count[7], 1);
		err := rule.Apply(message)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_1_646330373837303238396264.Count[8], 1);
			return err
		}
	}
	_cover_atomic_.AddUint32(&GoCover_1_646330373837303238396264.Count[6], 1);return nil
}

var GoCover_1_646330373837303238396264 = struct {
	Count     [9]uint32
	Pos       [3 * 9]uint32
	NumStmt   [9]uint16
} {
	Pos: [3 * 9]uint32{
		29, 30, 0x1c003c, // [0]
		33, 33, 0xc0002, // [1]
		30, 32, 0x3001c, // [2]
		41, 43, 0x20037, // [3]
		51, 55, 0x20028, // [4]
		58, 59, 0x200036, // [5]
		65, 65, 0xc0002, // [6]
		59, 61, 0x110020, // [7]
		61, 63, 0x40011, // [8]
	},
	NumStmt: [9]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
		2, // 7
		1, // 8
	},
}
var _ = _cover_atomic_.LoadUint32
