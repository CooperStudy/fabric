//line /home/cooper/go/src/github.com/hyperledger/fabric/common/tools/cryptogen/csp/csp.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/
package csp; import _cover_atomic_ "sync/atomic"

import (
	"crypto"
	"crypto/ecdsa"
	"crypto/x509"
	"encoding/pem"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"

	"github.com/hyperledger/fabric/bccsp"
	"github.com/hyperledger/fabric/bccsp/factory"
	"github.com/hyperledger/fabric/bccsp/signer"
	"github.com/pkg/errors"
)

// LoadPrivateKey loads a private key from file in keystorePath
func LoadPrivateKey(keystorePath string) (bccsp.Key, crypto.Signer, error) {_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[0], 1);
	var err error
	var priv bccsp.Key
	var s crypto.Signer

	opts := &factory.FactoryOpts{
		ProviderName: "SW",
		SwOpts: &factory.SwOpts{
			HashFamily: "SHA2",
			SecLevel:   256,

			FileKeystore: &factory.FileKeystoreOpts{
				KeyStorePath: keystorePath,
			},
		},
	}

	csp, err := factory.GetBCCSPFromOpts(opts)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[4], 1);
		return nil, nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[1], 1);walkFunc := func(path string, info os.FileInfo, err error) error {_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[5], 1);
		if strings.HasSuffix(path, "_sk") {_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[7], 1);
			rawKey, err := ioutil.ReadFile(path)
			if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[12], 1);
				return err
			}

			_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[8], 1);block, _ := pem.Decode(rawKey)
			if block == nil {_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[13], 1);
				return errors.Errorf("%s: wrong PEM encoding", path)
			}
			_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[9], 1);priv, err = csp.KeyImport(block.Bytes, &bccsp.ECDSAPrivateKeyImportOpts{Temporary: true})
			if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[14], 1);
				return err
			}

			_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[10], 1);s, err = signer.New(csp, priv)
			if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[15], 1);
				return err
			}

			_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[11], 1);return nil
		}
		_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[6], 1);return nil
	}

	_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[2], 1);err = filepath.Walk(keystorePath, walkFunc)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[16], 1);
		return nil, nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[3], 1);return priv, s, err
}

// GeneratePrivateKey creates a private key and stores it in keystorePath
func GeneratePrivateKey(keystorePath string) (bccsp.Key,
	crypto.Signer, error) {_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[17], 1);

	var err error
	var priv bccsp.Key
	var s crypto.Signer

	opts := &factory.FactoryOpts{
		ProviderName: "SW",
		SwOpts: &factory.SwOpts{
			HashFamily: "SHA2",
			SecLevel:   256,

			FileKeystore: &factory.FileKeystoreOpts{
				KeyStorePath: keystorePath,
			},
		},
	}
	csp, err := factory.GetBCCSPFromOpts(opts)
	if err == nil {_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[19], 1);
		// generate a key
		priv, err = csp.KeyGen(&bccsp.ECDSAP256KeyGenOpts{Temporary: false})
		if err == nil {_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[20], 1);
			// create a crypto.Signer
			s, err = signer.New(csp, priv)
		}
	}
	_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[18], 1);return priv, s, err
}

func GetECPublicKey(priv bccsp.Key) (*ecdsa.PublicKey, error) {_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[21], 1);

	// get the public key
	pubKey, err := priv.PublicKey()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[25], 1);
		return nil, err
	}
	// marshal to bytes
	_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[22], 1);pubKeyBytes, err := pubKey.Bytes()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[26], 1);
		return nil, err
	}
	// unmarshal using pkix
	_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[23], 1);ecPubKey, err := x509.ParsePKIXPublicKey(pubKeyBytes)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[27], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_333263613035613834613935.Count[24], 1);return ecPubKey.(*ecdsa.PublicKey), nil
}

var GoCover_0_333263613035613834613935 = struct {
	Count     [28]uint32
	Pos       [3 * 28]uint32
	NumStmt   [28]uint16
} {
	Pos: [3 * 28]uint32{
		25, 43, 0x10004c, // [0]
		47, 47, 0x430002, // [1]
		73, 74, 0x100002, // [2]
		78, 78, 0x150002, // [3]
		43, 45, 0x30010, // [4]
		47, 48, 0x250043, // [5]
		70, 70, 0xd0003, // [6]
		48, 50, 0x120025, // [7]
		54, 55, 0x140004, // [8]
		58, 59, 0x120004, // [9]
		63, 64, 0x120004, // [10]
		68, 68, 0xe0004, // [11]
		50, 52, 0x50012, // [12]
		55, 57, 0x50014, // [13]
		59, 61, 0x50012, // [14]
		64, 66, 0x50012, // [15]
		74, 76, 0x30010, // [16]
		83, 101, 0x100018, // [17]
		109, 109, 0x150002, // [18]
		101, 104, 0x110010, // [19]
		104, 107, 0x40011, // [20]
		112, 116, 0x10003f, // [21]
		120, 121, 0x100002, // [22]
		125, 126, 0x100002, // [23]
		129, 129, 0x290002, // [24]
		116, 118, 0x30010, // [25]
		121, 123, 0x30010, // [26]
		126, 128, 0x30010, // [27]
	},
	NumStmt: [28]uint16{
		6, // 0
		1, // 1
		2, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
		2, // 7
		2, // 8
		2, // 9
		2, // 10
		1, // 11
		1, // 12
		1, // 13
		1, // 14
		1, // 15
		1, // 16
		6, // 17
		1, // 18
		2, // 19
		1, // 20
		2, // 21
		2, // 22
		2, // 23
		1, // 24
		1, // 25
		1, // 26
		1, // 27
	},
}
var _ = _cover_atomic_.LoadUint32
