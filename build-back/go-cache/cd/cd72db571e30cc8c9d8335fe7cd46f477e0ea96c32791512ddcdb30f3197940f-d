//line /home/cooper/go/src/github.com/hyperledger/fabric/peer/channel/signconfigtx.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package channel; import _cover_atomic_ "sync/atomic"

import (
	"io/ioutil"

	"github.com/hyperledger/fabric/protos/utils"
	"github.com/spf13/cobra"
)

func signconfigtxCmd(cf *ChannelCmdFactory) *cobra.Command {_cover_atomic_.AddUint32(&GoCover_6_613931643833636437303432.Count[0], 1);
	signconfigtxCmd := &cobra.Command{
		Use:   "signconfigtx",
		Short: "Signs a configtx update.",
		Long:  "Signs the supplied configtx update file in place on the filesystem. Requires '-f'.",
		RunE: func(cmd *cobra.Command, args []string) error {_cover_atomic_.AddUint32(&GoCover_6_613931643833636437303432.Count[2], 1);
			return sign(cmd, args, cf)
		},
	}
	_cover_atomic_.AddUint32(&GoCover_6_613931643833636437303432.Count[1], 1);flagList := []string{
		"file",
	}
	attachFlags(signconfigtxCmd, flagList)

	return signconfigtxCmd
}

func sign(cmd *cobra.Command, args []string, cf *ChannelCmdFactory) error {_cover_atomic_.AddUint32(&GoCover_6_613931643833636437303432.Count[3], 1);
	if channelTxFile == "" {_cover_atomic_.AddUint32(&GoCover_6_613931643833636437303432.Count[9], 1);
		return InvalidCreateTx("No configtx file name supplied")
	}
	// Parsing of the command line is done so silence cmd usage
	_cover_atomic_.AddUint32(&GoCover_6_613931643833636437303432.Count[4], 1);cmd.SilenceUsage = true

	var err error
	if cf == nil {_cover_atomic_.AddUint32(&GoCover_6_613931643833636437303432.Count[10], 1);
		cf, err = InitCmdFactory(EndorserNotRequired, PeerDeliverNotRequired, OrdererNotRequired)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_6_613931643833636437303432.Count[11], 1);
			return err
		}
	}

	_cover_atomic_.AddUint32(&GoCover_6_613931643833636437303432.Count[5], 1);fileData, err := ioutil.ReadFile(channelTxFile)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_6_613931643833636437303432.Count[12], 1);
		return ConfigTxFileNotFound(err.Error())
	}

	_cover_atomic_.AddUint32(&GoCover_6_613931643833636437303432.Count[6], 1);ctxEnv, err := utils.UnmarshalEnvelope(fileData)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_6_613931643833636437303432.Count[13], 1);
		return err
	}

	_cover_atomic_.AddUint32(&GoCover_6_613931643833636437303432.Count[7], 1);sCtxEnv, err := sanityCheckAndSignConfigTx(ctxEnv)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_6_613931643833636437303432.Count[14], 1);
		return err
	}

	_cover_atomic_.AddUint32(&GoCover_6_613931643833636437303432.Count[8], 1);sCtxEnvData := utils.MarshalOrPanic(sCtxEnv)

	return ioutil.WriteFile(channelTxFile, sCtxEnvData, 0660)
}

var GoCover_6_613931643833636437303432 = struct {
	Count     [15]uint32
	Pos       [3 * 15]uint32
	NumStmt   [15]uint16
} {
	Pos: [3 * 15]uint32{
		16, 21, 0x37003c, // [0]
		25, 30, 0x180002, // [1]
		21, 23, 0x40037, // [2]
		33, 34, 0x19004b, // [3]
		38, 41, 0xf0002, // [4]
		48, 49, 0x100002, // [5]
		53, 54, 0x100002, // [6]
		58, 59, 0x100002, // [7]
		63, 65, 0x3b0002, // [8]
		34, 36, 0x30019, // [9]
		41, 43, 0x11000f, // [10]
		43, 45, 0x40011, // [11]
		49, 51, 0x30010, // [12]
		54, 56, 0x30010, // [13]
		59, 61, 0x30010, // [14]
	},
	NumStmt: [15]uint16{
		1, // 0
		3, // 1
		1, // 2
		1, // 3
		3, // 4
		2, // 5
		2, // 6
		2, // 7
		2, // 8
		1, // 9
		2, // 10
		1, // 11
		1, // 12
		1, // 13
		1, // 14
	},
}
var _ = _cover_atomic_.LoadUint32
