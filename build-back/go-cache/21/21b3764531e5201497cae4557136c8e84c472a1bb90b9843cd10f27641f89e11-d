//line /home/cooper/go/src/github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/statedb/statecouchdb/version_cache.go:1
/*
Copyright IBM Corp. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0
*/

package statecouchdb; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/version"
)

type versions map[string]nsVersions
type revisions map[string]nsRevisions
type nsRevisions map[string]string
type nsVersions map[string]*version.Height

// versionsCache contains maps of versions and revisions.
// Used as a local cache during bulk processing of a block.
// versions - contains the committed versions and used for state validation of readsets
// revisions - contains the committed revisions and used during commit phase for couchdb bulk updates
type versionsCache struct {
	vers versions
	revs revisions
}

func newVersionCache() *versionsCache {_cover_atomic_.AddUint32(&GoCover_6_613461656536306435636636.Count[0], 1);
	return &versionsCache{make(versions), make(revisions)}
}

func (c *versionsCache) getVersion(ns, key string) (*version.Height, bool) {_cover_atomic_.AddUint32(&GoCover_6_613461656536306435636636.Count[1], 1);
	ver, ok := c.vers[ns][key]
	if ok {_cover_atomic_.AddUint32(&GoCover_6_613461656536306435636636.Count[3], 1);
		return ver, true
	}
	_cover_atomic_.AddUint32(&GoCover_6_613461656536306435636636.Count[2], 1);return nil, false
}

// setVerAndRev sets the given version and couch revision into cache for given ns/key
// This function is invoked during bulk loading of versions for read-set validation.
// The revisions are not required for the validation but they are used during committing
// the write-sets to the couch. We load revisions as a bonus along with the versions during
// the bulkload in anticipation, because, in a typical workload, it is expected to be a good overlap
// between the read-set and the write-set. During the commit, we load missing revisions for
// any additional writes in the write-sets corresponding to which there were no reads in the read-sets
func (c *versionsCache) setVerAndRev(ns, key string, ver *version.Height, rev string) {_cover_atomic_.AddUint32(&GoCover_6_613461656536306435636636.Count[4], 1);
	_, ok := c.vers[ns]
	if !ok {_cover_atomic_.AddUint32(&GoCover_6_613461656536306435636636.Count[6], 1);
		c.vers[ns] = make(nsVersions)
		c.revs[ns] = make(nsRevisions)
	}
	_cover_atomic_.AddUint32(&GoCover_6_613461656536306435636636.Count[5], 1);c.vers[ns][key] = ver
	c.revs[ns][key] = rev
}

var GoCover_6_613461656536306435636636 = struct {
	Count     [7]uint32
	Pos       [3 * 7]uint32
	NumStmt   [7]uint16
} {
	Pos: [3 * 7]uint32{
		26, 28, 0x20027, // [0]
		30, 32, 0x8004c, // [1]
		35, 35, 0x130002, // [2]
		32, 34, 0x30008, // [3]
		45, 47, 0x90057, // [4]
		51, 52, 0x170002, // [5]
		47, 50, 0x30009, // [6]
	},
	NumStmt: [7]uint16{
		1, // 0
		2, // 1
		1, // 2
		1, // 3
		2, // 4
		2, // 5
		2, // 6
	},
}
var _ = _cover_atomic_.LoadUint32
