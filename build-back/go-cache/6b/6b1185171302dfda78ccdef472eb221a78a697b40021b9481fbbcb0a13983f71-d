//line /home/cooper/go/src/github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/storageutil/metadata.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package storageutil; import _cover_atomic_ "sync/atomic"

import (
	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/protos/ledger/rwset/kvrwset"
)

// SerializeMetadata serializes metadata entries for stroing in statedb
func SerializeMetadata(metadataEntries []*kvrwset.KVMetadataEntry) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_0_326564303935323462663564.Count[0], 1);
	metadata := &kvrwset.KVMetadataWrite{Entries: metadataEntries}
	return proto.Marshal(metadata)
}

// DeserializeMetadata deserializes metadata bytes from statedb
func DeserializeMetadata(metadataBytes []byte) (map[string][]byte, error) {_cover_atomic_.AddUint32(&GoCover_0_326564303935323462663564.Count[1], 1);
	if metadataBytes == nil {_cover_atomic_.AddUint32(&GoCover_0_326564303935323462663564.Count[5], 1);
		return nil, nil
	}
	_cover_atomic_.AddUint32(&GoCover_0_326564303935323462663564.Count[2], 1);metadata := &kvrwset.KVMetadataWrite{}
	if err := proto.Unmarshal(metadataBytes, metadata); err != nil {_cover_atomic_.AddUint32(&GoCover_0_326564303935323462663564.Count[6], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_326564303935323462663564.Count[3], 1);m := make(map[string][]byte, len(metadata.Entries))
	for _, metadataEntry := range metadata.Entries {_cover_atomic_.AddUint32(&GoCover_0_326564303935323462663564.Count[7], 1);
		m[metadataEntry.Name] = metadataEntry.Value
	}
	_cover_atomic_.AddUint32(&GoCover_0_326564303935323462663564.Count[4], 1);return m, nil
}

var GoCover_0_326564303935323462663564 = struct {
	Count     [8]uint32
	Pos       [3 * 8]uint32
	NumStmt   [8]uint16
} {
	Pos: [3 * 8]uint32{
		15, 18, 0x20054, // [0]
		21, 22, 0x1a004b, // [1]
		25, 26, 0x410002, // [2]
		29, 30, 0x310002, // [3]
		33, 33, 0xf0002, // [4]
		22, 24, 0x3001a, // [5]
		26, 28, 0x30041, // [6]
		30, 32, 0x30031, // [7]
	},
	NumStmt: [8]uint16{
		2, // 0
		1, // 1
		2, // 2
		2, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
	},
}
var _ = _cover_atomic_.LoadUint32
