//line /home/cooper/go/src/github.com/hyperledger/fabric/examples/chaincode/go/example04/chaincode.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package example04; import _cover_atomic_ "sync/atomic"

import (
	"fmt"
	"strconv"

	"github.com/hyperledger/fabric/core/chaincode/shim"
	pb "github.com/hyperledger/fabric/protos/peer"
)

// This chaincode is a test for chaincode invoking another chaincode - invokes chaincode_example02

// SimpleChaincode example simple Chaincode implementation
type SimpleChaincode struct{}

func toChaincodeArgs(args ...string) [][]byte {_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[0], 1);
	bargs := make([][]byte, len(args))
	for i, arg := range args {_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[2], 1);
		bargs[i] = []byte(arg)
	}
	_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[1], 1);return bargs
}

// Init takes two arguments, a string and int. These are stored in the key/value pair in the state
func (t *SimpleChaincode) Init(stub shim.ChaincodeStubInterface) pb.Response {_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[3], 1);
	var event string // Indicates whether event has happened. Initially 0
	var eventVal int // State of event
	var err error
	_, args := stub.GetFunctionAndParameters()
	if len(args) != 2 {_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[7], 1);
		return shim.Error("Incorrect number of arguments. Expecting 2")
	}

	// Initialize the chaincode
	_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[4], 1);event = args[0]
	eventVal, err = strconv.Atoi(args[1])
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[8], 1);
		return shim.Error("Expecting integer value for event status")
	}
	_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[5], 1);fmt.Printf("eventVal = %d\n", eventVal)

	err = stub.PutState(event, []byte(strconv.Itoa(eventVal)))
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[9], 1);
		return shim.Error(err.Error())
	}

	_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[6], 1);return shim.Success(nil)
}

// Invoke invokes another chaincode - chaincode_example02, upon receipt of an event and changes event state
func (t *SimpleChaincode) invoke(stub shim.ChaincodeStubInterface, args []string) pb.Response {_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[10], 1);
	var event string // Event entity
	var eventVal int // State of event
	var err error

	if len(args) != 3 && len(args) != 4 {_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[17], 1);
		return shim.Error("Incorrect number of arguments. Expecting 3 or 4")
	}

	_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[11], 1);chainCodeToCall := args[0]
	event = args[1]
	eventVal, err = strconv.Atoi(args[2])
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[18], 1);
		return shim.Error("Expected integer value for event state change")
	}
	_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[12], 1);channelID := ""
	if len(args) == 4 {_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[19], 1);
		channelID = args[3]
	}

	_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[13], 1);if eventVal != 1 {_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[20], 1);
		fmt.Printf("Unexpected event. Doing nothing\n")
		return shim.Success(nil)
	}

	_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[14], 1);f := "invoke"
	invokeArgs := toChaincodeArgs(f, "a", "b", "10")
	response := stub.InvokeChaincode(chainCodeToCall, invokeArgs, channelID)
	if response.Status != shim.OK {_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[21], 1);
		errStr := fmt.Sprintf("Failed to invoke chaincode. Got error: %s", string(response.Payload))
		fmt.Printf(errStr)
		return shim.Error(errStr)
	}

	_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[15], 1);fmt.Printf("Invoke chaincode successful. Got response %s", string(response.Payload))

	// Write the event state back to the ledger
	err = stub.PutState(event, []byte(strconv.Itoa(eventVal)))
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[22], 1);
		return shim.Error(err.Error())
	}

	_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[16], 1);return response
}

func (t *SimpleChaincode) query(stub shim.ChaincodeStubInterface, args []string) pb.Response {_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[23], 1);
	var event string // Event entity
	var err error

	if len(args) < 1 {_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[28], 1);
		return shim.Error("Incorrect number of arguments. Expecting entity to query")
	}

	_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[24], 1);event = args[0]
	var jsonResp string

	// Get the state from the ledger
	eventValbytes, err := stub.GetState(event)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[29], 1);
		jsonResp = "{\"Error\":\"Failed to get state for " + event + "\"}"
		return shim.Error(jsonResp)
	}

	_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[25], 1);if eventValbytes == nil {_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[30], 1);
		jsonResp = "{\"Error\":\"Nil value for " + event + "\"}"
		return shim.Error(jsonResp)
	}

	_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[26], 1);if len(args) > 3 {_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[31], 1);
		chainCodeToCall := args[1]
		queryKey := args[2]
		channel := args[3]
		f := "query"
		invokeArgs := toChaincodeArgs(f, queryKey)
		response := stub.InvokeChaincode(chainCodeToCall, invokeArgs, channel)
		if response.Status != shim.OK {_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[33], 1);
			errStr := fmt.Sprintf("Failed to invoke chaincode. Got error: %s", err.Error())
			fmt.Printf(errStr)
			return shim.Error(errStr)
		}
		_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[32], 1);jsonResp = string(response.Payload)
	} else{ _cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[34], 1);{
		jsonResp = "{\"Name\":\"" + event + "\",\"Amount\":\"" + string(eventValbytes) + "\"}"
	}}
	_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[27], 1);fmt.Printf("Query Response: %s\n", jsonResp)

	return shim.Success([]byte(jsonResp))
}

// Invoke is called by fabric to execute a transaction
func (t *SimpleChaincode) Invoke(stub shim.ChaincodeStubInterface) pb.Response {_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[35], 1);
	function, args := stub.GetFunctionAndParameters()
	if function == "invoke" {_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[37], 1);
		return t.invoke(stub, args)
	} else{ _cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[38], 1);if function == "query" {_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[39], 1);
		return t.query(stub, args)
	}}

	_cover_atomic_.AddUint32(&GoCover_0_383564653031303539643039.Count[36], 1);return shim.Error("Invalid invoke function name. Expecting \"invoke\" \"query\"")
}

var GoCover_0_383564653031303539643039 = struct {
	Count     [40]uint32
	Pos       [3 * 40]uint32
	NumStmt   [40]uint16
} {
	Pos: [3 * 40]uint32{
		22, 24, 0x1b002f, // [0]
		27, 27, 0xe0002, // [1]
		24, 26, 0x3001b, // [2]
		31, 36, 0x14004e, // [3]
		41, 43, 0x100002, // [4]
		46, 49, 0x100002, // [5]
		53, 53, 0x1a0002, // [6]
		36, 38, 0x30014, // [7]
		43, 45, 0x30010, // [8]
		49, 51, 0x30010, // [9]
		57, 62, 0x26005f, // [10]
		66, 69, 0x100002, // [11]
		72, 73, 0x140002, // [12]
		77, 77, 0x130002, // [13]
		82, 85, 0x200002, // [14]
		91, 95, 0x100002, // [15]
		99, 99, 0x110002, // [16]
		62, 64, 0x30026, // [17]
		69, 71, 0x30010, // [18]
		73, 75, 0x30014, // [19]
		77, 80, 0x30013, // [20]
		85, 89, 0x30020, // [21]
		95, 97, 0x30010, // [22]
		102, 106, 0x13005e, // [23]
		110, 115, 0x100002, // [24]
		120, 120, 0x1a0002, // [25]
		125, 125, 0x130002, // [26]
		141, 143, 0x270002, // [27]
		106, 108, 0x30013, // [28]
		115, 118, 0x30010, // [29]
		120, 123, 0x3001a, // [30]
		125, 132, 0x210013, // [31]
		137, 137, 0x260003, // [32]
		132, 136, 0x40021, // [33]
		138, 140, 0x30008, // [34]
		147, 149, 0x1a0050, // [35]
		155, 155, 0x530002, // [36]
		149, 151, 0x3001a, // [37]
		151, 151, 0x200008, // [38]
		151, 153, 0x30020, // [39]
	},
	NumStmt: [40]uint16{
		2, // 0
		1, // 1
		1, // 2
		5, // 3
		3, // 4
		3, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
		4, // 10
		4, // 11
		2, // 12
		1, // 13
		4, // 14
		3, // 15
		1, // 16
		1, // 17
		1, // 18
		1, // 19
		2, // 20
		3, // 21
		1, // 22
		3, // 23
		4, // 24
		1, // 25
		1, // 26
		2, // 27
		1, // 28
		2, // 29
		2, // 30
		7, // 31
		1, // 32
		3, // 33
		1, // 34
		2, // 35
		1, // 36
		1, // 37
		1, // 38
		1, // 39
	},
}
var _ = _cover_atomic_.LoadUint32
