//line /home/cooper/go/src/github.com/hyperledger/fabric/peer/chaincode/query.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package chaincode; import _cover_atomic_ "sync/atomic"

import (
	"errors"
	"fmt"

	"github.com/spf13/cobra"
)

var chaincodeQueryCmd *cobra.Command

// queryCmd returns the cobra command for Chaincode Query
func queryCmd(cf *ChaincodeCmdFactory) *cobra.Command {_cover_atomic_.AddUint32(&GoCover_7_316135646539653831366338.Count[0], 1);
	chaincodeQueryCmd = &cobra.Command{
		Use:       "query",
		Short:     fmt.Sprintf("Query using the specified %s.", chainFuncName),
		Long:      fmt.Sprintf("Get endorsed result of %s function call and print it. It won't generate transaction.", chainFuncName),
		ValidArgs: []string{"1"},
		RunE: func(cmd *cobra.Command, args []string) error {_cover_atomic_.AddUint32(&GoCover_7_316135646539653831366338.Count[2], 1);
			return chaincodeQuery(cmd, cf)
		},
	}
	_cover_atomic_.AddUint32(&GoCover_7_316135646539653831366338.Count[1], 1);flagList := []string{
		"ctor",
		"name",
		"channelID",
		"peerAddresses",
		"tlsRootCertFiles",
		"connectionProfile",
	}
	attachFlags(chaincodeQueryCmd, flagList)

	chaincodeQueryCmd.Flags().BoolVarP(&chaincodeQueryRaw, "raw", "r", false,
		"If true, output the query value as raw bytes, otherwise format as a printable string")
	chaincodeQueryCmd.Flags().BoolVarP(&chaincodeQueryHex, "hex", "x", false,
		"If true, output the query value byte array in hexadecimal. Incompatible with --raw")

	return chaincodeQueryCmd
}

func chaincodeQuery(cmd *cobra.Command, cf *ChaincodeCmdFactory) error {_cover_atomic_.AddUint32(&GoCover_7_316135646539653831366338.Count[3], 1);
	if channelID == "" {_cover_atomic_.AddUint32(&GoCover_7_316135646539653831366338.Count[6], 1);
		return errors.New("The required parameter 'channelID' is empty. Rerun the command with -C flag")
	}
	// Parsing of the command line is done so silence cmd usage
	_cover_atomic_.AddUint32(&GoCover_7_316135646539653831366338.Count[4], 1);cmd.SilenceUsage = true

	var err error
	if cf == nil {_cover_atomic_.AddUint32(&GoCover_7_316135646539653831366338.Count[7], 1);
		cf, err = InitCmdFactory(cmd.Name(), true, false)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_7_316135646539653831366338.Count[8], 1);
			return err
		}
	}

	_cover_atomic_.AddUint32(&GoCover_7_316135646539653831366338.Count[5], 1);return chaincodeInvokeOrQuery(cmd, false, cf)
}

var GoCover_7_316135646539653831366338 = struct {
	Count     [9]uint32
	Pos       [3 * 9]uint32
	NumStmt   [9]uint16
} {
	Pos: [3 * 9]uint32{
		19, 25, 0x370037, // [0]
		29, 44, 0x1a0002, // [1]
		25, 27, 0x40037, // [2]
		47, 48, 0x150048, // [3]
		52, 55, 0xf0002, // [4]
		62, 62, 0x2f0002, // [5]
		48, 50, 0x30015, // [6]
		55, 57, 0x11000f, // [7]
		57, 59, 0x40011, // [8]
	},
	NumStmt: [9]uint16{
		1, // 0
		5, // 1
		1, // 2
		1, // 3
		3, // 4
		1, // 5
		1, // 6
		2, // 7
		1, // 8
	},
}
var _ = _cover_atomic_.LoadUint32
