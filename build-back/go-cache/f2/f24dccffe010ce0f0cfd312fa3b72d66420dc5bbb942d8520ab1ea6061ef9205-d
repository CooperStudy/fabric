//line /home/cooper/go/src/github.com/hyperledger/fabric/peer/channel/getinfo.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package channel; import _cover_atomic_ "sync/atomic"

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/core/scc/qscc"
	"github.com/hyperledger/fabric/peer/common"
	cb "github.com/hyperledger/fabric/protos/common"
	pb "github.com/hyperledger/fabric/protos/peer"
	"github.com/hyperledger/fabric/protos/utils"
	"github.com/pkg/errors"
	"github.com/spf13/cobra"
)

func getinfoCmd(cf *ChannelCmdFactory) *cobra.Command {_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[0], 1);
	getinfoCmd := &cobra.Command{
		Use:   "getinfo",
		Short: "get blockchain information of a specified channel.",
		Long:  "get blockchain information of a specified channel. Requires '-c'.",
		RunE: func(cmd *cobra.Command, args []string) error {_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[2], 1);
			return getinfo(cmd, cf)
		},
	}
	_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[1], 1);flagList := []string{
		"channelID",
	}
	attachFlags(getinfoCmd, flagList)

	return getinfoCmd
}
func (cc *endorserClient) getBlockChainInfo() (*cb.BlockchainInfo, error) {_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[3], 1);
	var err error

	invocation := &pb.ChaincodeInvocationSpec{
		ChaincodeSpec: &pb.ChaincodeSpec{
			Type:        pb.ChaincodeSpec_Type(pb.ChaincodeSpec_Type_value["GOLANG"]),
			ChaincodeId: &pb.ChaincodeID{Name: "qscc"},
			Input:       &pb.ChaincodeInput{Args: [][]byte{[]byte(qscc.GetChainInfo), []byte(channelID)}},
		},
	}

	var prop *pb.Proposal
	c, _ := cc.cf.Signer.Serialize()
	prop, _, err = utils.CreateProposalFromCIS(cb.HeaderType_ENDORSER_TRANSACTION, "", invocation, c)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[9], 1);
		return nil, errors.WithMessage(err, "cannot create proposal")
	}

	_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[4], 1);var signedProp *pb.SignedProposal
	signedProp, err = utils.GetSignedProposal(prop, cc.cf.Signer)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[10], 1);
		return nil, errors.WithMessage(err, "cannot create signed proposal")
	}

	_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[5], 1);proposalResp, err := cc.cf.EndorserClient.ProcessProposal(context.Background(), signedProp)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[11], 1);
		return nil, errors.WithMessage(err, "failed sending proposal")
	}

	_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[6], 1);if proposalResp.Response == nil || proposalResp.Response.Status != 200 {_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[12], 1);
		return nil, errors.Errorf("received bad response, status %d: %s", proposalResp.Response.Status, proposalResp.Response.Message)
	}

	_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[7], 1);blockChainInfo := &cb.BlockchainInfo{}
	err = proto.Unmarshal(proposalResp.Response.Payload, blockChainInfo)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[13], 1);
		return nil, errors.Wrap(err, "cannot read qscc response")
	}

	_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[8], 1);return blockChainInfo, nil

}

func getinfo(cmd *cobra.Command, cf *ChannelCmdFactory) error {_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[14], 1);
	//the global chainID filled by the "-c" command
	if channelID == common.UndefinedParamValue {_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[19], 1);
		return errors.New("Must supply channel ID")
	}
	// Parsing of the command line is done so silence cmd usage
	_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[15], 1);cmd.SilenceUsage = true

	var err error
	if cf == nil {_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[20], 1);
		cf, err = InitCmdFactory(EndorserRequired, PeerDeliverNotRequired, OrdererNotRequired)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[21], 1);
			return err
		}
	}

	_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[16], 1);client := &endorserClient{cf}

	blockChainInfo, err := client.getBlockChainInfo()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[22], 1);
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[17], 1);jsonBytes, err := json.Marshal(blockChainInfo)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[23], 1);
		return err
	}

	_cover_atomic_.AddUint32(&GoCover_3_613931643833636437303432.Count[18], 1);fmt.Printf("Blockchain info: %s\n", string(jsonBytes))

	return nil
}

var GoCover_3_613931643833636437303432 = struct {
	Count     [24]uint32
	Pos       [3 * 24]uint32
	NumStmt   [24]uint16
} {
	Pos: [3 * 24]uint32{
		24, 29, 0x370037, // [0]
		33, 38, 0x130002, // [1]
		29, 31, 0x40037, // [2]
		40, 54, 0x10004b, // [3]
		58, 60, 0x100002, // [4]
		64, 65, 0x100002, // [5]
		69, 69, 0x490002, // [6]
		73, 75, 0x100002, // [7]
		79, 79, 0x1c0002, // [8]
		54, 56, 0x30010, // [9]
		60, 62, 0x30010, // [10]
		65, 67, 0x30010, // [11]
		69, 71, 0x30049, // [12]
		75, 77, 0x30010, // [13]
		83, 85, 0x2d003f, // [14]
		89, 92, 0xf0002, // [15]
		99, 102, 0x100002, // [16]
		105, 106, 0x100002, // [17]
		110, 112, 0xc0002, // [18]
		85, 87, 0x3002d, // [19]
		92, 94, 0x11000f, // [20]
		94, 96, 0x40011, // [21]
		102, 104, 0x30010, // [22]
		106, 108, 0x30010, // [23]
	},
	NumStmt: [24]uint16{
		1, // 0
		3, // 1
		1, // 2
		6, // 3
		3, // 4
		2, // 5
		1, // 6
		3, // 7
		1, // 8
		1, // 9
		1, // 10
		1, // 11
		1, // 12
		1, // 13
		1, // 14
		3, // 15
		3, // 16
		2, // 17
		2, // 18
		1, // 19
		2, // 20
		1, // 21
		1, // 22
		1, // 23
	},
}
var _ = _cover_atomic_.LoadUint32
