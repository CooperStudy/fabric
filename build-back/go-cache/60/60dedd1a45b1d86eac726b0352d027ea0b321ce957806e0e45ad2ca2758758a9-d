//line /home/cooper/go/src/github.com/hyperledger/fabric/common/channelconfig/acls.go:1
/*
Copyright State Street Corp. 2018 All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package channelconfig; import _cover_atomic_ "sync/atomic"

import (
	pb "github.com/hyperledger/fabric/protos/peer"
)

// aclsProvider provides mappings for resource to policy names
type aclsProvider struct {
	aclPolicyRefs map[string]string
}

func (ag *aclsProvider) PolicyRefForAPI(aclName string) string {_cover_atomic_.AddUint32(&GoCover_0_373339383034363064316135.Count[0], 1);
	return ag.aclPolicyRefs[aclName]
}

// this translates policies to absolute paths if needed
func newAPIsProvider(acls map[string]*pb.APIResource) *aclsProvider {_cover_atomic_.AddUint32(&GoCover_0_373339383034363064316135.Count[1], 1);
	aclPolicyRefs := make(map[string]string)

	for key, acl := range acls {_cover_atomic_.AddUint32(&GoCover_0_373339383034363064316135.Count[3], 1);
		// If the policy is fully qualified, ie to /Channel/Application/Readers leave it alone
		// otherwise, make it fully qualified referring to /Channel/Application/policyName
		if '/' != acl.PolicyRef[0] {_cover_atomic_.AddUint32(&GoCover_0_373339383034363064316135.Count[4], 1);
			aclPolicyRefs[key] = "/" + ChannelGroupKey + "/" + ApplicationGroupKey + "/" + acl.PolicyRef
		} else{ _cover_atomic_.AddUint32(&GoCover_0_373339383034363064316135.Count[5], 1);{
			aclPolicyRefs[key] = acl.PolicyRef
		}}
	}

	_cover_atomic_.AddUint32(&GoCover_0_373339383034363064316135.Count[2], 1);return &aclsProvider{
		aclPolicyRefs: aclPolicyRefs,
	}
}

var GoCover_0_373339383034363064316135 = struct {
	Count     [6]uint32
	Pos       [3 * 6]uint32
	NumStmt   [6]uint16
} {
	Pos: [3 * 6]uint32{
		18, 20, 0x20040, // [0]
		23, 26, 0x1d0045, // [1]
		36, 38, 0x30002, // [2]
		26, 29, 0x1e001d, // [3]
		29, 31, 0x4001e, // [4]
		31, 33, 0x40009, // [5]
	},
	NumStmt: [6]uint16{
		1, // 0
		2, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
	},
}
var _ = _cover_atomic_.LoadUint32
