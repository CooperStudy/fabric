//line /home/cooper/go/src/github.com/hyperledger/fabric/common/metrics/prometheus/provider.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package prometheus; import _cover_atomic_ "sync/atomic"

import (
	kitmetrics "github.com/go-kit/kit/metrics"
	"github.com/go-kit/kit/metrics/prometheus"
	"github.com/hyperledger/fabric/common/metrics"
	prom "github.com/prometheus/client_golang/prometheus"
)

type Provider struct{}

func (p *Provider) NewCounter(o metrics.CounterOpts) metrics.Counter {_cover_atomic_.AddUint32(&GoCover_0_656634393630353962383231.Count[0], 1);
	return &Counter{
		Counter: prometheus.NewCounterFrom(
			prom.CounterOpts{
				Namespace: o.Namespace,
				Subsystem: o.Subsystem,
				Name:      o.Name,
				Help:      o.Help,
			},
			o.LabelNames,
		),
	}
}

func (p *Provider) NewGauge(o metrics.GaugeOpts) metrics.Gauge {_cover_atomic_.AddUint32(&GoCover_0_656634393630353962383231.Count[1], 1);
	return &Gauge{
		Gauge: prometheus.NewGaugeFrom(
			prom.GaugeOpts{
				Namespace: o.Namespace,
				Subsystem: o.Subsystem,
				Name:      o.Name,
				Help:      o.Help,
			},
			o.LabelNames,
		),
	}
}

func (p *Provider) NewHistogram(o metrics.HistogramOpts) metrics.Histogram {_cover_atomic_.AddUint32(&GoCover_0_656634393630353962383231.Count[2], 1);
	return &Histogram{
		Histogram: prometheus.NewHistogramFrom(
			prom.HistogramOpts{
				Namespace: o.Namespace,
				Subsystem: o.Subsystem,
				Name:      o.Name,
				Help:      o.Help,
				Buckets:   o.Buckets,
			},
			o.LabelNames,
		),
	}
}

type Counter struct{ kitmetrics.Counter }

func (c *Counter) With(labelValues ...string) metrics.Counter {_cover_atomic_.AddUint32(&GoCover_0_656634393630353962383231.Count[3], 1);
	return &Counter{Counter: c.Counter.With(labelValues...)}
}

type Gauge struct{ kitmetrics.Gauge }

func (g *Gauge) With(labelValues ...string) metrics.Gauge {_cover_atomic_.AddUint32(&GoCover_0_656634393630353962383231.Count[4], 1);
	return &Gauge{Gauge: g.Gauge.With(labelValues...)}
}

type Histogram struct{ kitmetrics.Histogram }

func (h *Histogram) With(labelValues ...string) metrics.Histogram {_cover_atomic_.AddUint32(&GoCover_0_656634393630353962383231.Count[5], 1);
	return &Histogram{Histogram: h.Histogram.With(labelValues...)}
}

var GoCover_0_656634393630353962383231 = struct {
	Count     [6]uint32
	Pos       [3 * 6]uint32
	NumStmt   [6]uint16
} {
	Pos: [3 * 6]uint32{
		18, 30, 0x20046, // [0]
		32, 44, 0x20040, // [1]
		46, 59, 0x2004c, // [2]
		63, 65, 0x2003f, // [3]
		69, 71, 0x2003b, // [4]
		75, 77, 0x20043, // [5]
	},
	NumStmt: [6]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
	},
}
var _ = _cover_atomic_.LoadUint32
