//line /home/cooper/go/src/github.com/hyperledger/fabric/core/ledger/util/txvalidationflags.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package util; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric/protos/peer"
)

// TxValidationFlags is array of transaction validation codes. It is used when committer validates block.
type TxValidationFlags []uint8

// NewTxValidationFlags Create new object-array of validation codes with target size.
// Default values: TxValidationCode_NOT_VALIDATED
func NewTxValidationFlags(size int) TxValidationFlags {_cover_atomic_.AddUint32(&GoCover_0_376463623436383239386665.Count[0], 1);
	return newTxValidationFlagsSetValue(size, peer.TxValidationCode_NOT_VALIDATED)
}

// NewTxValidationFlagsSetValue Creates new object-array of validation codes with target size
// and the supplied value
func NewTxValidationFlagsSetValue(size int, value peer.TxValidationCode) TxValidationFlags {_cover_atomic_.AddUint32(&GoCover_0_376463623436383239386665.Count[1], 1);
	return newTxValidationFlagsSetValue(size, value)
}

func newTxValidationFlagsSetValue(size int, value peer.TxValidationCode) TxValidationFlags {_cover_atomic_.AddUint32(&GoCover_0_376463623436383239386665.Count[2], 1);
	inst := make(TxValidationFlags, size)
	for i := range inst {_cover_atomic_.AddUint32(&GoCover_0_376463623436383239386665.Count[4], 1);
		inst[i] = uint8(value)
	}

	_cover_atomic_.AddUint32(&GoCover_0_376463623436383239386665.Count[3], 1);return inst
}

// SetFlag assigns validation code to specified transaction
func (obj TxValidationFlags) SetFlag(txIndex int, flag peer.TxValidationCode) {_cover_atomic_.AddUint32(&GoCover_0_376463623436383239386665.Count[5], 1);
	obj[txIndex] = uint8(flag)
}

// Flag returns validation code at specified transaction
func (obj TxValidationFlags) Flag(txIndex int) peer.TxValidationCode {_cover_atomic_.AddUint32(&GoCover_0_376463623436383239386665.Count[6], 1);
	return peer.TxValidationCode(obj[txIndex])
}

// IsValid checks if specified transaction is valid
func (obj TxValidationFlags) IsValid(txIndex int) bool {_cover_atomic_.AddUint32(&GoCover_0_376463623436383239386665.Count[7], 1);
	return obj.IsSetTo(txIndex, peer.TxValidationCode_VALID)
}

// IsInvalid checks if specified transaction is invalid
func (obj TxValidationFlags) IsInvalid(txIndex int) bool {_cover_atomic_.AddUint32(&GoCover_0_376463623436383239386665.Count[8], 1);
	return !obj.IsValid(txIndex)
}

// IsSetTo returns true if the specified transaction equals flag; false otherwise.
func (obj TxValidationFlags) IsSetTo(txIndex int, flag peer.TxValidationCode) bool {_cover_atomic_.AddUint32(&GoCover_0_376463623436383239386665.Count[9], 1);
	return obj.Flag(txIndex) == flag
}

var GoCover_0_376463623436383239386665 = struct {
	Count     [10]uint32
	Pos       [3 * 10]uint32
	NumStmt   [10]uint16
} {
	Pos: [3 * 10]uint32{
		18, 20, 0x20037, // [0]
		24, 26, 0x2005c, // [1]
		28, 30, 0x16005c, // [2]
		34, 34, 0xd0002, // [3]
		30, 32, 0x30016, // [4]
		38, 40, 0x2004f, // [5]
		43, 45, 0x20046, // [6]
		48, 50, 0x20038, // [7]
		53, 55, 0x2003a, // [8]
		58, 60, 0x20054, // [9]
	},
	NumStmt: [10]uint16{
		1, // 0
		1, // 1
		2, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
	},
}
var _ = _cover_atomic_.LoadUint32
