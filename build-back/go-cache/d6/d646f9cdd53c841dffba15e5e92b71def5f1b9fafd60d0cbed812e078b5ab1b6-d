//line /home/cooper/go/src/github.com/hyperledger/fabric/core/ledger/pvtdatastorage/v11.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package pvtdatastorage; import _cover_atomic_ "sync/atomic"

import (
	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/common/ledger/util/leveldbhelper"
	"github.com/hyperledger/fabric/core/ledger"
	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/version"
	"github.com/hyperledger/fabric/protos/ledger/rwset"
)

func v11Format(datakeyBytes []byte) bool {_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[0], 1);
	_, n := version.NewHeightFromBytes(datakeyBytes[1:])
	remainingBytes := datakeyBytes[n+1:]
	return len(remainingBytes) == 0
}

func v11DecodePK(key blkTranNumKey) (blockNum uint64, tranNum uint64) {_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[1], 1);
	height, _ := version.NewHeightFromBytes(key[1:])
	return height.BlockNum, height.TxNum
}

func v11DecodePvtRwSet(encodedBytes []byte) (*rwset.TxPvtReadWriteSet, error) {_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[2], 1);
	writeset := &rwset.TxPvtReadWriteSet{}
	return writeset, proto.Unmarshal(encodedBytes, writeset)
}

func v11RetrievePvtdata(itr *leveldbhelper.Iterator, filter ledger.PvtNsCollFilter) ([]*ledger.TxPvtData, error) {_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[3], 1);
	var blkPvtData []*ledger.TxPvtData
	txPvtData, err := v11DecodeKV(itr.Key(), itr.Value(), filter)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[6], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[4], 1);blkPvtData = append(blkPvtData, txPvtData)
	for itr.Next() {_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[7], 1);
		pvtDatum, err := v11DecodeKV(itr.Key(), itr.Value(), filter)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[9], 1);
			return nil, err
		}
		_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[8], 1);blkPvtData = append(blkPvtData, pvtDatum)
	}
	_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[5], 1);return blkPvtData, nil
}

func v11DecodeKV(k, v []byte, filter ledger.PvtNsCollFilter) (*ledger.TxPvtData, error) {_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[10], 1);
	bNum, tNum := v11DecodePK(k)
	var pvtWSet *rwset.TxPvtReadWriteSet
	var err error
	if pvtWSet, err = v11DecodePvtRwSet(v); err != nil {_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[12], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[11], 1);logger.Debugf("Retrieved V11 private data write set for block [%d] tran [%d]", bNum, tNum)
	filteredWSet := v11TrimPvtWSet(pvtWSet, filter)
	return &ledger.TxPvtData{SeqInBlock: tNum, WriteSet: filteredWSet}, nil
}

func v11TrimPvtWSet(pvtWSet *rwset.TxPvtReadWriteSet, filter ledger.PvtNsCollFilter) *rwset.TxPvtReadWriteSet {_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[13], 1);
	if filter == nil {_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[17], 1);
		return pvtWSet
	}

	_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[14], 1);var filteredNsRwSet []*rwset.NsPvtReadWriteSet
	for _, ns := range pvtWSet.NsPvtRwset {_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[18], 1);
		var filteredCollRwSet []*rwset.CollectionPvtReadWriteSet
		for _, coll := range ns.CollectionPvtRwset {_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[20], 1);
			if filter.Has(ns.Namespace, coll.CollectionName) {_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[21], 1);
				filteredCollRwSet = append(filteredCollRwSet, coll)
			}
		}
		_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[19], 1);if filteredCollRwSet != nil {_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[22], 1);
			filteredNsRwSet = append(filteredNsRwSet,
				&rwset.NsPvtReadWriteSet{
					Namespace:          ns.Namespace,
					CollectionPvtRwset: filteredCollRwSet,
				},
			)
		}
	}
	_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[15], 1);var filteredTxPvtRwSet *rwset.TxPvtReadWriteSet
	if filteredNsRwSet != nil {_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[23], 1);
		filteredTxPvtRwSet = &rwset.TxPvtReadWriteSet{
			DataModel:  pvtWSet.GetDataModel(),
			NsPvtRwset: filteredNsRwSet,
		}
	}
	_cover_atomic_.AddUint32(&GoCover_7_653833333066373334656466.Count[16], 1);return filteredTxPvtRwSet
}

var GoCover_7_653833333066373334656466 = struct {
	Count     [24]uint32
	Pos       [3 * 24]uint32
	NumStmt   [24]uint16
} {
	Pos: [3 * 24]uint32{
		17, 21, 0x2002a, // [0]
		23, 26, 0x20047, // [1]
		28, 31, 0x2004f, // [2]
		33, 36, 0x100072, // [3]
		39, 40, 0x110002, // [4]
		47, 47, 0x180002, // [5]
		36, 38, 0x30010, // [6]
		40, 42, 0x110011, // [7]
		45, 45, 0x2c0003, // [8]
		42, 44, 0x40011, // [9]
		50, 54, 0x350059, // [10]
		57, 59, 0x490002, // [11]
		54, 56, 0x30035, // [12]
		62, 63, 0x13006f, // [13]
		67, 68, 0x280002, // [14]
		84, 85, 0x1c0002, // [15]
		91, 91, 0x1b0002, // [16]
		63, 65, 0x30013, // [17]
		68, 70, 0x2e0028, // [18]
		75, 75, 0x1f0003, // [19]
		70, 71, 0x35002e, // [20]
		71, 73, 0x50035, // [21]
		75, 82, 0x4001f, // [22]
		85, 90, 0x3001c, // [23]
	},
	NumStmt: [24]uint16{
		3, // 0
		2, // 1
		2, // 2
		3, // 3
		2, // 4
		1, // 5
		1, // 6
		2, // 7
		1, // 8
		1, // 9
		4, // 10
		3, // 11
		1, // 12
		1, // 13
		2, // 14
		2, // 15
		1, // 16
		1, // 17
		2, // 18
		1, // 19
		1, // 20
		1, // 21
		1, // 22
		1, // 23
	},
}
var _ = _cover_atomic_.LoadUint32
