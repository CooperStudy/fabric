//line /home/cooper/go/src/github.com/hyperledger/fabric/core/container/util/dockerutil.go:1
/*
Copyright London Stock Exchange 2016 All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package util; import _cover_atomic_ "sync/atomic"

import (
	"runtime"
	"strings"

	docker "github.com/fsouza/go-dockerclient"
	"github.com/hyperledger/fabric/common/metadata"
	"github.com/hyperledger/fabric/core/config"
	"github.com/spf13/viper"
)

//NewDockerClient creates a docker client
func NewDockerClient() (client *docker.Client, err error) {_cover_atomic_.AddUint32(&GoCover_0_323534643032613065626263.Count[0], 1);
	endpoint := viper.GetString("vm.endpoint")
	tlsenabled := viper.GetBool("vm.docker.tls.enabled")
	if tlsenabled {_cover_atomic_.AddUint32(&GoCover_0_323534643032613065626263.Count[2], 1);
		cert := config.GetPath("vm.docker.tls.cert.file")
		key := config.GetPath("vm.docker.tls.key.file")
		ca := config.GetPath("vm.docker.tls.ca.file")
		client, err = docker.NewTLSClient(endpoint, cert, key, ca)
	} else{ _cover_atomic_.AddUint32(&GoCover_0_323534643032613065626263.Count[3], 1);{
		client, err = docker.NewClient(endpoint)
	}}
	_cover_atomic_.AddUint32(&GoCover_0_323534643032613065626263.Count[1], 1);return
}

func ParseDockerfileTemplate(template string) string {_cover_atomic_.AddUint32(&GoCover_0_323534643032613065626263.Count[4], 1);
	r := strings.NewReplacer(
		"$(ARCH)", runtime.GOARCH,
		"$(PROJECT_VERSION)", metadata.Version,
		"$(BASE_VERSION)", metadata.BaseVersion,
		"$(DOCKER_NS)", metadata.DockerNamespace,
		"$(BASE_DOCKER_NS)", metadata.BaseDockerNamespace)

	return r.Replace(template)
}

func GetDockerfileFromConfig(path string) string {_cover_atomic_.AddUint32(&GoCover_0_323534643032613065626263.Count[5], 1);
	return ParseDockerfileTemplate(viper.GetString(path))
}

var GoCover_0_323534643032613065626263 = struct {
	Count     [6]uint32
	Pos       [3 * 6]uint32
	NumStmt   [6]uint16
} {
	Pos: [3 * 6]uint32{
		20, 23, 0x10003b, // [0]
		31, 31, 0x80002, // [1]
		23, 28, 0x30010, // [2]
		28, 30, 0x30008, // [3]
		34, 43, 0x20036, // [4]
		45, 47, 0x20032, // [5]
	},
	NumStmt: [6]uint16{
		3, // 0
		1, // 1
		4, // 2
		1, // 3
		2, // 4
		1, // 5
	},
}
var _ = _cover_atomic_.LoadUint32
