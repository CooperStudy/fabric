//line /home/cooper/go/src/github.com/hyperledger/fabric/core/chaincode/transaction_context.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package chaincode; import _cover_atomic_ "sync/atomic"

import (
	"sync"

	commonledger "github.com/hyperledger/fabric/common/ledger"
	"github.com/hyperledger/fabric/core/common/privdata"
	"github.com/hyperledger/fabric/core/ledger"
	pb "github.com/hyperledger/fabric/protos/peer"
)

type TransactionContext struct {
	ChainID              string
	SignedProp           *pb.SignedProposal
	Proposal             *pb.Proposal
	ResponseNotifier     chan *pb.ChaincodeMessage
	TXSimulator          ledger.TxSimulator
	HistoryQueryExecutor ledger.HistoryQueryExecutor
	CollectionStore      privdata.CollectionStore
	IsInitTransaction    bool

	// tracks open iterators used for range queries
	queryMutex          sync.Mutex
	queryIteratorMap    map[string]commonledger.ResultsIterator
	pendingQueryResults map[string]*PendingQueryResult
	totalReturnCount    map[string]*int32

	// cache used to save the result of collection acl
	// as a transactionContext is created for every chaincode
	// invoke (even in case of chaincode-calling-chaincode,
	// we do not need to store the namespace in the map and
	// collection alone is sufficient.
	AllowedCollectionAccess map[string]bool
}

func (t *TransactionContext) InitializeQueryContext(queryID string, iter commonledger.ResultsIterator) {_cover_atomic_.AddUint32(&GoCover_11_323839383963343337363361.Count[0], 1);
	t.queryMutex.Lock()
	if t.queryIteratorMap == nil {_cover_atomic_.AddUint32(&GoCover_11_323839383963343337363361.Count[4], 1);
		t.queryIteratorMap = map[string]commonledger.ResultsIterator{}
	}
	_cover_atomic_.AddUint32(&GoCover_11_323839383963343337363361.Count[1], 1);if t.pendingQueryResults == nil {_cover_atomic_.AddUint32(&GoCover_11_323839383963343337363361.Count[5], 1);
		t.pendingQueryResults = map[string]*PendingQueryResult{}
	}
	_cover_atomic_.AddUint32(&GoCover_11_323839383963343337363361.Count[2], 1);if t.totalReturnCount == nil {_cover_atomic_.AddUint32(&GoCover_11_323839383963343337363361.Count[6], 1);
		t.totalReturnCount = map[string]*int32{}
	}
	_cover_atomic_.AddUint32(&GoCover_11_323839383963343337363361.Count[3], 1);t.queryIteratorMap[queryID] = iter
	t.pendingQueryResults[queryID] = &PendingQueryResult{}
	zeroValue := int32(0)
	t.totalReturnCount[queryID] = &zeroValue
	t.queryMutex.Unlock()
}

func (t *TransactionContext) GetQueryIterator(queryID string) commonledger.ResultsIterator {_cover_atomic_.AddUint32(&GoCover_11_323839383963343337363361.Count[7], 1);
	t.queryMutex.Lock()
	iter := t.queryIteratorMap[queryID]
	t.queryMutex.Unlock()
	return iter
}

func (t *TransactionContext) GetPendingQueryResult(queryID string) *PendingQueryResult {_cover_atomic_.AddUint32(&GoCover_11_323839383963343337363361.Count[8], 1);
	t.queryMutex.Lock()
	result := t.pendingQueryResults[queryID]
	t.queryMutex.Unlock()
	return result
}

func (t *TransactionContext) GetTotalReturnCount(queryID string) *int32 {_cover_atomic_.AddUint32(&GoCover_11_323839383963343337363361.Count[9], 1);
	t.queryMutex.Lock()
	result := t.totalReturnCount[queryID]
	t.queryMutex.Unlock()
	return result
}

func (t *TransactionContext) CleanupQueryContext(queryID string) {_cover_atomic_.AddUint32(&GoCover_11_323839383963343337363361.Count[10], 1);
	t.queryMutex.Lock()
	defer t.queryMutex.Unlock()
	iter := t.queryIteratorMap[queryID]
	if iter != nil {_cover_atomic_.AddUint32(&GoCover_11_323839383963343337363361.Count[12], 1);
		iter.Close()
	}
	_cover_atomic_.AddUint32(&GoCover_11_323839383963343337363361.Count[11], 1);delete(t.queryIteratorMap, queryID)
	delete(t.pendingQueryResults, queryID)
	delete(t.totalReturnCount, queryID)
}

func (t *TransactionContext) CleanupQueryContextWithBookmark(queryID string) string {_cover_atomic_.AddUint32(&GoCover_11_323839383963343337363361.Count[13], 1);
	t.queryMutex.Lock()
	defer t.queryMutex.Unlock()
	iter := t.queryIteratorMap[queryID]
	bookmark := ""
	if iter != nil {_cover_atomic_.AddUint32(&GoCover_11_323839383963343337363361.Count[15], 1);
		if queryResultIterator, ok := iter.(commonledger.QueryResultsIterator); ok {_cover_atomic_.AddUint32(&GoCover_11_323839383963343337363361.Count[16], 1);
			bookmark = queryResultIterator.GetBookmarkAndClose()
		}
	}
	_cover_atomic_.AddUint32(&GoCover_11_323839383963343337363361.Count[14], 1);delete(t.queryIteratorMap, queryID)
	delete(t.pendingQueryResults, queryID)
	delete(t.totalReturnCount, queryID)
	return bookmark
}

func (t *TransactionContext) CloseQueryIterators() {_cover_atomic_.AddUint32(&GoCover_11_323839383963343337363361.Count[17], 1);
	t.queryMutex.Lock()
	defer t.queryMutex.Unlock()
	for _, iter := range t.queryIteratorMap {_cover_atomic_.AddUint32(&GoCover_11_323839383963343337363361.Count[18], 1);
		iter.Close()
	}
}

var GoCover_11_323839383963343337363361 = struct {
	Count     [19]uint32
	Pos       [3 * 19]uint32
	NumStmt   [19]uint16
} {
	Pos: [3 * 19]uint32{
		42, 44, 0x1f0068, // [0]
		47, 47, 0x220002, // [1]
		50, 50, 0x1f0002, // [2]
		53, 57, 0x170002, // [3]
		44, 46, 0x3001f, // [4]
		47, 49, 0x30022, // [5]
		50, 52, 0x3001f, // [6]
		60, 65, 0x2005c, // [7]
		67, 72, 0x20058, // [8]
		74, 79, 0x20049, // [9]
		81, 85, 0x110042, // [10]
		88, 90, 0x250002, // [11]
		85, 87, 0x30011, // [12]
		93, 98, 0x110055, // [13]
		103, 106, 0x110002, // [14]
		98, 99, 0x4e0011, // [15]
		99, 101, 0x4004e, // [16]
		109, 112, 0x2a0034, // [17]
		112, 114, 0x3002a, // [18]
	},
	NumStmt: [19]uint16{
		2, // 0
		1, // 1
		1, // 2
		5, // 3
		1, // 4
		1, // 5
		1, // 6
		4, // 7
		4, // 8
		4, // 9
		4, // 10
		3, // 11
		1, // 12
		5, // 13
		4, // 14
		1, // 15
		1, // 16
		3, // 17
		1, // 18
	},
}
var _ = _cover_atomic_.LoadUint32
