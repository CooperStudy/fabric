//line /home/cooper/go/src/github.com/hyperledger/fabric/token/server/marshal.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package server; import _cover_atomic_ "sync/atomic"

import (
	"time"

	"github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/ptypes"
	"github.com/hyperledger/fabric/common/util"
	"github.com/hyperledger/fabric/protos/token"
	"github.com/pkg/errors"
)

// UnmarshalCommand unmarshal token.Command messages
func UnmarshalCommand(raw []byte) (*token.Command, error) {_cover_atomic_.AddUint32(&GoCover_4_626466633561326138353830.Count[0], 1);
	command := &token.Command{}
	err := proto.Unmarshal(raw, command)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_4_626466633561326138353830.Count[2], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_4_626466633561326138353830.Count[1], 1);return command, nil
}

type TimeFunc func() time.Time

// ResponseMarshaler produces token.SignedCommandResponse
type ResponseMarshaler struct {
	Signer  Signer
	Creator []byte
	Time    TimeFunc
}

func NewResponseMarshaler(signerID SignerIdentity) (*ResponseMarshaler, error) {_cover_atomic_.AddUint32(&GoCover_4_626466633561326138353830.Count[3], 1);
	creator, err := signerID.Serialize()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_4_626466633561326138353830.Count[5], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_4_626466633561326138353830.Count[4], 1);return &ResponseMarshaler{
		Signer:  signerID,
		Creator: creator,
		Time:    time.Now,
	}, nil
}

func (s *ResponseMarshaler) MarshalCommandResponse(command []byte, responsePayload interface{}) (*token.SignedCommandResponse, error) {_cover_atomic_.AddUint32(&GoCover_4_626466633561326138353830.Count[6], 1);
	cr, err := commandResponseFromPayload(responsePayload)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_4_626466633561326138353830.Count[9], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_4_626466633561326138353830.Count[7], 1);ts, err := ptypes.TimestampProto(s.Time())
	if err != nil {_cover_atomic_.AddUint32(&GoCover_4_626466633561326138353830.Count[10], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_4_626466633561326138353830.Count[8], 1);cr.Header = &token.CommandResponseHeader{
		Creator:     s.Creator,
		CommandHash: util.ComputeSHA256(command),
		Timestamp:   ts,
	}

	return s.createSignedCommandResponse(cr)
}

func (s *ResponseMarshaler) createSignedCommandResponse(cr *token.CommandResponse) (*token.SignedCommandResponse, error) {_cover_atomic_.AddUint32(&GoCover_4_626466633561326138353830.Count[11], 1);
	raw, err := proto.Marshal(cr)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_4_626466633561326138353830.Count[14], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_4_626466633561326138353830.Count[12], 1);signature, err := s.Signer.Sign(raw)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_4_626466633561326138353830.Count[15], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_4_626466633561326138353830.Count[13], 1);return &token.SignedCommandResponse{
		Response:  raw,
		Signature: signature,
	}, nil
}

func commandResponseFromPayload(payload interface{}) (*token.CommandResponse, error) {_cover_atomic_.AddUint32(&GoCover_4_626466633561326138353830.Count[16], 1);
	switch t := payload.(type) {
	case *token.CommandResponse_TokenTransaction:_cover_atomic_.AddUint32(&GoCover_4_626466633561326138353830.Count[17], 1);
		return &token.CommandResponse{Payload: t}, nil
	case *token.CommandResponse_Err:_cover_atomic_.AddUint32(&GoCover_4_626466633561326138353830.Count[18], 1);
		return &token.CommandResponse{Payload: t}, nil
	case *token.CommandResponse_UnspentTokens:_cover_atomic_.AddUint32(&GoCover_4_626466633561326138353830.Count[19], 1);
		return &token.CommandResponse{Payload: t}, nil
	default:_cover_atomic_.AddUint32(&GoCover_4_626466633561326138353830.Count[20], 1);
		return nil, errors.Errorf("command type not recognized: %T", t)
	}
}

var GoCover_4_626466633561326138353830 = struct {
	Count     [21]uint32
	Pos       [3 * 21]uint32
	NumStmt   [21]uint16
} {
	Pos: [3 * 21]uint32{
		20, 23, 0x10003b, // [0]
		27, 27, 0x150002, // [1]
		23, 25, 0x30010, // [2]
		39, 41, 0x100050, // [3]
		45, 49, 0x80002, // [4]
		41, 43, 0x30010, // [5]
		52, 54, 0x100087, // [6]
		58, 59, 0x100002, // [7]
		63, 69, 0x2a0002, // [8]
		54, 56, 0x30010, // [9]
		59, 61, 0x30010, // [10]
		72, 74, 0x10007a, // [11]
		78, 79, 0x100002, // [12]
		83, 86, 0x80002, // [13]
		74, 76, 0x30010, // [14]
		79, 81, 0x30010, // [15]
		89, 90, 0x1d0056, // [16]
		91, 92, 0x31002f, // [17]
		93, 94, 0x310022, // [18]
		95, 96, 0x31002c, // [19]
		97, 98, 0x42000a, // [20]
	},
	NumStmt: [21]uint16{
		3, // 0
		1, // 1
		1, // 2
		2, // 3
		1, // 4
		1, // 5
		2, // 6
		2, // 7
		2, // 8
		1, // 9
		1, // 10
		2, // 11
		2, // 12
		1, // 13
		1, // 14
		1, // 15
		1, // 16
		1, // 17
		1, // 18
		1, // 19
		1, // 20
	},
}
var _ = _cover_atomic_.LoadUint32
