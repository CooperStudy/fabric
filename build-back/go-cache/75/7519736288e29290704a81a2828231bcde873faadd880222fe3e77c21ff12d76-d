//line /home/cooper/go/src/github.com/hyperledger/fabric/token/client/config.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/
package client; import _cover_atomic_ "sync/atomic"

import "github.com/pkg/errors"

// ConnectionConfig contains data required to establish grpc connection to a peer or orderer
type ConnectionConfig struct {
	Address            string
	TlsRootCertFile    string
	ServerNameOverride string
}

// ClientConfig will be updated after the CR for token client config is merged, where the config data
// will be populated based on a config file.
type ClientConfig struct {
	ChannelId     string
	MspDir        string
	MspId         string
	TlsEnabled    bool
	OrdererCfg    ConnectionConfig
	CommitPeerCfg ConnectionConfig
	ProverPeerCfg ConnectionConfig
}

func ValidateClientConfig(config *ClientConfig) error {_cover_atomic_.AddUint32(&GoCover_1_386238643262613636363863.Count[0], 1);
	if config == nil {_cover_atomic_.AddUint32(&GoCover_1_386238643262613636363863.Count[7], 1);
		return errors.New("client config is nil")
	}
	_cover_atomic_.AddUint32(&GoCover_1_386238643262613636363863.Count[1], 1);if config.ChannelId == "" {_cover_atomic_.AddUint32(&GoCover_1_386238643262613636363863.Count[8], 1);
		return errors.New("missing channelId")
	}

	_cover_atomic_.AddUint32(&GoCover_1_386238643262613636363863.Count[2], 1);if config.OrdererCfg.Address == "" {_cover_atomic_.AddUint32(&GoCover_1_386238643262613636363863.Count[9], 1);
		return errors.New("missing orderer address")
	}

	_cover_atomic_.AddUint32(&GoCover_1_386238643262613636363863.Count[3], 1);if config.TlsEnabled && config.OrdererCfg.TlsRootCertFile == "" {_cover_atomic_.AddUint32(&GoCover_1_386238643262613636363863.Count[10], 1);
		return errors.New("missing orderer TlsRootCertFile")
	}

	_cover_atomic_.AddUint32(&GoCover_1_386238643262613636363863.Count[4], 1);if config.OrdererCfg.Address == "" {_cover_atomic_.AddUint32(&GoCover_1_386238643262613636363863.Count[11], 1);
		return errors.New("missing commit peer address")
	}

	_cover_atomic_.AddUint32(&GoCover_1_386238643262613636363863.Count[5], 1);if config.TlsEnabled && config.OrdererCfg.TlsRootCertFile == "" {_cover_atomic_.AddUint32(&GoCover_1_386238643262613636363863.Count[12], 1);
		return errors.New("missing commit peer TlsRootCertFile")
	}

	// TODO: add prover peer validation in a different CR
	_cover_atomic_.AddUint32(&GoCover_1_386238643262613636363863.Count[6], 1);return nil
}

var GoCover_1_386238643262613636363863 = struct {
	Count     [13]uint32
	Pos       [3 * 13]uint32
	NumStmt   [13]uint16
} {
	Pos: [3 * 13]uint32{
		29, 30, 0x130037, // [0]
		33, 33, 0x1c0002, // [1]
		37, 37, 0x250002, // [2]
		41, 41, 0x420002, // [3]
		45, 45, 0x250002, // [4]
		49, 49, 0x420002, // [5]
		54, 54, 0xc0002, // [6]
		30, 32, 0x30013, // [7]
		33, 35, 0x3001c, // [8]
		37, 39, 0x30025, // [9]
		41, 43, 0x30042, // [10]
		45, 47, 0x30025, // [11]
		49, 51, 0x30042, // [12]
	},
	NumStmt: [13]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
		1, // 10
		1, // 11
		1, // 12
	},
}
var _ = _cover_atomic_.LoadUint32
