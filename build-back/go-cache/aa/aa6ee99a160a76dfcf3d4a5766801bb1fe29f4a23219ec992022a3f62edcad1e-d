//line /home/cooper/go/src/github.com/hyperledger/fabric/peer/clilogging/common.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package clilogging; import _cover_atomic_ "sync/atomic"

import (
	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/common/crypto"
	"github.com/hyperledger/fabric/peer/common"
	common2 "github.com/hyperledger/fabric/protos/common"
	pb "github.com/hyperledger/fabric/protos/peer"
	"github.com/hyperledger/fabric/protos/utils"
	"github.com/pkg/errors"
	"github.com/spf13/cobra"
)

type envelopeWrapper func(msg proto.Message) *common2.Envelope

// LoggingCmdFactory holds the clients used by LoggingCmd
type LoggingCmdFactory struct {
	AdminClient      pb.AdminClient
	wrapWithEnvelope envelopeWrapper
}

// InitCmdFactory init the LoggingCmdFactory with default admin client
func InitCmdFactory() (*LoggingCmdFactory, error) {_cover_atomic_.AddUint32(&GoCover_0_303930383430333338303032.Count[0], 1);
	var err error
	var adminClient pb.AdminClient

	adminClient, err = common.GetAdminClient()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_303930383430333338303032.Count[4], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_0_303930383430333338303032.Count[1], 1);signer, err := common.GetDefaultSignerFnc()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_303930383430333338303032.Count[5], 1);
		return nil, errors.Errorf("failed obtaining default signer: %v", err)
	}

	_cover_atomic_.AddUint32(&GoCover_0_303930383430333338303032.Count[2], 1);localSigner := crypto.NewSignatureHeaderCreator(signer)
	wrapEnv := func(msg proto.Message) *common2.Envelope {_cover_atomic_.AddUint32(&GoCover_0_303930383430333338303032.Count[6], 1);
		env, err := utils.CreateSignedEnvelope(common2.HeaderType_PEER_ADMIN_OPERATION, "", localSigner, msg, 0, 0)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_0_303930383430333338303032.Count[8], 1);
			logger.Panicf("Failed signing: %v", err)
		}
		_cover_atomic_.AddUint32(&GoCover_0_303930383430333338303032.Count[7], 1);return env
	}

	_cover_atomic_.AddUint32(&GoCover_0_303930383430333338303032.Count[3], 1);return &LoggingCmdFactory{
		AdminClient:      adminClient,
		wrapWithEnvelope: wrapEnv,
	}, nil
}

func checkLoggingCmdParams(cmd *cobra.Command, args []string) error {_cover_atomic_.AddUint32(&GoCover_0_303930383430333338303032.Count[9], 1);
	var err error
	if cmd.Name() == "revertlevels" || cmd.Name() == "getlogspec" {_cover_atomic_.AddUint32(&GoCover_0_303930383430333338303032.Count[12], 1);
		if len(args) > 0 {_cover_atomic_.AddUint32(&GoCover_0_303930383430333338303032.Count[13], 1);
			err = errors.Errorf("more parameters than necessary were provided. Expected 0, received %d", len(args))
			return err
		}
	} else{ _cover_atomic_.AddUint32(&GoCover_0_303930383430333338303032.Count[14], 1);{
		// check that at least one parameter is passed in
		if len(args) == 0 {_cover_atomic_.AddUint32(&GoCover_0_303930383430333338303032.Count[15], 1);
			err = errors.New("no parameters provided")
			return err
		}
	}}

	_cover_atomic_.AddUint32(&GoCover_0_303930383430333338303032.Count[10], 1);if cmd.Name() == "setlevel" {_cover_atomic_.AddUint32(&GoCover_0_303930383430333338303032.Count[16], 1);
		// check that log level parameter is provided
		if len(args) == 1 {_cover_atomic_.AddUint32(&GoCover_0_303930383430333338303032.Count[17], 1);
			err = errors.New("no log level provided")
		} else{ _cover_atomic_.AddUint32(&GoCover_0_303930383430333338303032.Count[18], 1);{
			// check that log level is valid. if not, err is set
			err = common.CheckLogLevel(args[1])
		}}
	}

	_cover_atomic_.AddUint32(&GoCover_0_303930383430333338303032.Count[11], 1);return err
}

var GoCover_0_303930383430333338303032 = struct {
	Count     [19]uint32
	Pos       [3 * 19]uint32
	NumStmt   [19]uint16
} {
	Pos: [3 * 19]uint32{
		29, 34, 0x100033, // [0]
		38, 39, 0x100002, // [1]
		43, 44, 0x370002, // [2]
		52, 55, 0x80002, // [3]
		34, 36, 0x30010, // [4]
		39, 41, 0x30010, // [5]
		44, 46, 0x110037, // [6]
		49, 49, 0xd0003, // [7]
		46, 48, 0x40011, // [8]
		58, 60, 0x400045, // [9]
		73, 73, 0x1e0002, // [10]
		83, 83, 0xc0002, // [11]
		60, 61, 0x140040, // [12]
		61, 64, 0x40014, // [13]
		65, 67, 0x150008, // [14]
		67, 70, 0x40015, // [15]
		73, 75, 0x15001e, // [16]
		75, 77, 0x40015, // [17]
		77, 80, 0x40009, // [18]
	},
	NumStmt: [19]uint16{
		4, // 0
		2, // 1
		2, // 2
		1, // 3
		1, // 4
		1, // 5
		2, // 6
		1, // 7
		1, // 8
		2, // 9
		1, // 10
		1, // 11
		1, // 12
		2, // 13
		1, // 14
		2, // 15
		1, // 16
		1, // 17
		1, // 18
	},
}
var _ = _cover_atomic_.LoadUint32
