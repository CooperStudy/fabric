//line /home/cooper/go/src/github.com/hyperledger/fabric/bccsp/idemix/bridge/issuer.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/
package bridge; import _cover_atomic_ "sync/atomic"

import (
	"fmt"

	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric-amcl/amcl"
	"github.com/hyperledger/fabric/bccsp"
	"github.com/hyperledger/fabric/bccsp/idemix/handlers"
	cryptolib "github.com/hyperledger/fabric/idemix"
	"github.com/pkg/errors"
)

// IssuerPublicKey encapsulate an idemix issuer public key.
type IssuerPublicKey struct {
	PK *cryptolib.IssuerPublicKey
}

func (o *IssuerPublicKey) Bytes() ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[0], 1);
	return proto.Marshal(o.PK)
}

func (o *IssuerPublicKey) Hash() []byte {_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[1], 1);
	return o.PK.Hash
}

// IssuerPublicKey encapsulate an idemix issuer secret key.
type IssuerSecretKey struct {
	SK *cryptolib.IssuerKey
}

func (o *IssuerSecretKey) Bytes() ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[2], 1);
	return proto.Marshal(o.SK)
}

func (o *IssuerSecretKey) Public() handlers.IssuerPublicKey {_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[3], 1);
	return &IssuerPublicKey{o.SK.Ipk}
}

// Issuer encapsulates the idemix algorithms to generate issuer key-pairs
type Issuer struct {
	NewRand func() *amcl.RAND
}

// NewKey generates a new issuer key-pair
func (i *Issuer) NewKey(attributeNames []string) (res handlers.IssuerSecretKey, err error) {_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[4], 1);
	defer func() {_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[7], 1);
		if r := recover(); r != nil {_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[8], 1);
			res = nil
			err = errors.Errorf("failure [%s]", r)
		}
	}()

	_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[5], 1);sk, err := cryptolib.NewIssuerKey(attributeNames, i.NewRand())
	if err != nil {_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[9], 1);
		return
	}

	_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[6], 1);res = &IssuerSecretKey{SK: sk}

	return
}

func (*Issuer) NewPublicKeyFromBytes(raw []byte, attributes []string) (res handlers.IssuerPublicKey, err error) {_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[10], 1);
	defer func() {_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[16], 1);
		if r := recover(); r != nil {_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[17], 1);
			res = nil
			err = errors.Errorf("failure [%s]", r)
		}
	}()

	_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[11], 1);ipk := new(cryptolib.IssuerPublicKey)
	err = proto.Unmarshal(raw, ipk)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[18], 1);
		return nil, errors.WithStack(&bccsp.IdemixIssuerPublicKeyImporterError{
			Type:     bccsp.IdemixIssuerPublicKeyImporterUnmarshallingError,
			ErrorMsg: "failed to unmarshal issuer public key",
			Cause:    err})
	}

	_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[12], 1);err = ipk.SetHash()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[19], 1);
		return nil, errors.WithStack(&bccsp.IdemixIssuerPublicKeyImporterError{
			Type:     bccsp.IdemixIssuerPublicKeyImporterHashError,
			ErrorMsg: "setting the hash of the issuer public key failed",
			Cause:    err})
	}

	_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[13], 1);err = ipk.Check()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[20], 1);
		return nil, errors.WithStack(&bccsp.IdemixIssuerPublicKeyImporterError{
			Type:     bccsp.IdemixIssuerPublicKeyImporterValidationError,
			ErrorMsg: "invalid issuer public key",
			Cause:    err})
	}

	_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[14], 1);if len(attributes) != 0 {_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[21], 1);
		// Check the attributes
		if len(attributes) != len(ipk.AttributeNames) {_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[23], 1);
			return nil, errors.WithStack(&bccsp.IdemixIssuerPublicKeyImporterError{
				Type: bccsp.IdemixIssuerPublicKeyImporterNumAttributesError,
				ErrorMsg: fmt.Sprintf("invalid number of attributes, expected [%d], got [%d]",
					len(ipk.AttributeNames), len(attributes)),
			})
		}

		_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[22], 1);for i, attr := range attributes {_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[24], 1);
			if ipk.AttributeNames[i] != attr {_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[25], 1);
				return nil, errors.WithStack(&bccsp.IdemixIssuerPublicKeyImporterError{
					Type:     bccsp.IdemixIssuerPublicKeyImporterAttributeNameError,
					ErrorMsg: fmt.Sprintf("invalid attribute name at position [%d]", i),
				})
			}
		}
	}

	_cover_atomic_.AddUint32(&GoCover_2_373430303738666139356161.Count[15], 1);res = &IssuerPublicKey{PK: ipk}

	return
}

var GoCover_2_373430303738666139356161 = struct {
	Count     [26]uint32
	Pos       [3 * 26]uint32
	NumStmt   [26]uint16
} {
	Pos: [3 * 26]uint32{
		24, 26, 0x20033, // [0]
		28, 30, 0x20029, // [1]
		37, 39, 0x20033, // [2]
		41, 43, 0x2003d, // [3]
		51, 52, 0xf005c, // [4]
		59, 60, 0x100002, // [5]
		64, 66, 0x80002, // [6]
		52, 53, 0x1f000f, // [7]
		53, 56, 0x4001f, // [8]
		60, 62, 0x30010, // [9]
		69, 70, 0xf0071, // [10]
		77, 79, 0x100002, // [11]
		86, 87, 0x100002, // [12]
		94, 95, 0x100002, // [13]
		102, 102, 0x1a0002, // [14]
		122, 124, 0x80002, // [15]
		70, 71, 0x1f000f, // [16]
		71, 74, 0x4001f, // [17]
		79, 84, 0x30010, // [18]
		87, 92, 0x30010, // [19]
		95, 100, 0x30010, // [20]
		102, 104, 0x31001a, // [21]
		112, 112, 0x230003, // [22]
		104, 110, 0x40031, // [23]
		112, 113, 0x250023, // [24]
		113, 118, 0x50025, // [25]
	},
	NumStmt: [26]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
		1, // 4
		2, // 5
		2, // 6
		1, // 7
		2, // 8
		1, // 9
		1, // 10
		3, // 11
		2, // 12
		2, // 13
		1, // 14
		2, // 15
		1, // 16
		2, // 17
		1, // 18
		1, // 19
		1, // 20
		1, // 21
		1, // 22
		1, // 23
		1, // 24
		1, // 25
	},
}
var _ = _cover_atomic_.LoadUint32
