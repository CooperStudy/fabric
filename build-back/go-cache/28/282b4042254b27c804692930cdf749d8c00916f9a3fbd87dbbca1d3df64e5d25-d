//line /home/cooper/go/src/github.com/hyperledger/fabric/core/ledger/ledgermgmt/ledger_mgmt_test_exports.go:1
/*
Copyright IBM Corp. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0
*/

package ledgermgmt; import _cover_atomic_ "sync/atomic"

import (
	"fmt"
	"os"

	"github.com/hyperledger/fabric/common/metrics/disabled"
	"github.com/hyperledger/fabric/core/chaincode/platforms"
	"github.com/hyperledger/fabric/core/chaincode/platforms/golang"
	"github.com/hyperledger/fabric/core/ledger/ledgerconfig"
	"github.com/hyperledger/fabric/core/ledger/mock"
)

// InitializeTestEnv initializes ledgermgmt for tests
func InitializeTestEnv() {_cover_atomic_.AddUint32(&GoCover_1_303661326266333033313235.Count[0], 1);
	remove()
	InitializeTestEnvWithInitializer(nil)
}

// InitializeTestEnvWithInitializer initializes ledgermgmt for tests with the supplied Initializer
func InitializeTestEnvWithInitializer(initializer *Initializer) {_cover_atomic_.AddUint32(&GoCover_1_303661326266333033313235.Count[1], 1);
	remove()
	InitializeExistingTestEnvWithInitializer(initializer)
}

// InitializeExistingTestEnvWithInitializer initializes ledgermgmt for tests with existing ledgers
// This function does not remove the existing ledgers and is used in upgrade tests
// TODO ledgermgmt should be reworked to move the package scoped functions to a struct
func InitializeExistingTestEnvWithInitializer(initializer *Initializer) {_cover_atomic_.AddUint32(&GoCover_1_303661326266333033313235.Count[2], 1);
	if initializer == nil {_cover_atomic_.AddUint32(&GoCover_1_303661326266333033313235.Count[7], 1);
		initializer = &Initializer{}
	}
	_cover_atomic_.AddUint32(&GoCover_1_303661326266333033313235.Count[3], 1);if initializer.DeployedChaincodeInfoProvider == nil {_cover_atomic_.AddUint32(&GoCover_1_303661326266333033313235.Count[8], 1);
		initializer.DeployedChaincodeInfoProvider = &mock.DeployedChaincodeInfoProvider{}
	}
	_cover_atomic_.AddUint32(&GoCover_1_303661326266333033313235.Count[4], 1);if initializer.MetricsProvider == nil {_cover_atomic_.AddUint32(&GoCover_1_303661326266333033313235.Count[9], 1);
		initializer.MetricsProvider = &disabled.Provider{}
	}
	_cover_atomic_.AddUint32(&GoCover_1_303661326266333033313235.Count[5], 1);if initializer.PlatformRegistry == nil {_cover_atomic_.AddUint32(&GoCover_1_303661326266333033313235.Count[10], 1);
		initializer.PlatformRegistry = platforms.NewRegistry(&golang.Platform{})
	}
	_cover_atomic_.AddUint32(&GoCover_1_303661326266333033313235.Count[6], 1);initialize(initializer)
}

// CleanupTestEnv closes the ledgermagmt and removes the store directory
func CleanupTestEnv() {_cover_atomic_.AddUint32(&GoCover_1_303661326266333033313235.Count[11], 1);
	Close()
	remove()
}

func remove() {_cover_atomic_.AddUint32(&GoCover_1_303661326266333033313235.Count[12], 1);
	path := ledgerconfig.GetRootPath()
	fmt.Printf("removing dir = %s\n", path)
	err := os.RemoveAll(path)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_303661326266333033313235.Count[13], 1);
		logger.Errorf("Error: %s", err)
	}
}

var GoCover_1_303661326266333033313235 = struct {
	Count     [14]uint32
	Pos       [3 * 14]uint32
	NumStmt   [14]uint16
} {
	Pos: [3 * 14]uint32{
		20, 23, 0x2001a, // [0]
		26, 29, 0x20041, // [1]
		34, 35, 0x180049, // [2]
		38, 38, 0x360002, // [3]
		41, 41, 0x280002, // [4]
		44, 44, 0x290002, // [5]
		47, 47, 0x190002, // [6]
		35, 37, 0x30018, // [7]
		38, 40, 0x30036, // [8]
		41, 43, 0x30028, // [9]
		44, 46, 0x30029, // [10]
		51, 54, 0x20017, // [11]
		56, 60, 0x10000f, // [12]
		60, 62, 0x30010, // [13]
	},
	NumStmt: [14]uint16{
		2, // 0
		2, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
		1, // 10
		2, // 11
		4, // 12
		1, // 13
	},
}
var _ = _cover_atomic_.LoadUint32
