//line /home/cooper/go/src/github.com/hyperledger/fabric/core/comm/serverstatshandler.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package comm; import _cover_atomic_ "sync/atomic"

import (
	"context"

	"github.com/hyperledger/fabric/common/metrics"
	"google.golang.org/grpc/stats"
)

type ServerStatsHandler struct {
	OpenConnCounter   metrics.Counter
	ClosedConnCounter metrics.Counter
}

func (h *ServerStatsHandler) TagRPC(ctx context.Context, info *stats.RPCTagInfo) context.Context {_cover_atomic_.AddUint32(&GoCover_7_643230363037383562363632.Count[0], 1);
	return ctx
}

func (h *ServerStatsHandler) HandleRPC(ctx context.Context, s stats.RPCStats) {_cover_atomic_.AddUint32(&GoCover_7_643230363037383562363632.Count[1], 1);}

func (h *ServerStatsHandler) TagConn(ctx context.Context, info *stats.ConnTagInfo) context.Context {_cover_atomic_.AddUint32(&GoCover_7_643230363037383562363632.Count[2], 1);
	return ctx
}

func (h *ServerStatsHandler) HandleConn(ctx context.Context, s stats.ConnStats) {_cover_atomic_.AddUint32(&GoCover_7_643230363037383562363632.Count[3], 1);
	switch s.(type) {
	case *stats.ConnBegin:_cover_atomic_.AddUint32(&GoCover_7_643230363037383562363632.Count[4], 1);
		h.OpenConnCounter.Add(1)
	case *stats.ConnEnd:_cover_atomic_.AddUint32(&GoCover_7_643230363037383562363632.Count[5], 1);
		h.ClosedConnCounter.Add(1)
	}
}

var GoCover_7_643230363037383562363632 = struct {
	Count     [6]uint32
	Pos       [3 * 6]uint32
	NumStmt   [6]uint16
} {
	Pos: [3 * 6]uint32{
		21, 23, 0x20062, // [0]
		25, 25, 0x510050, // [1]
		27, 29, 0x20064, // [2]
		31, 32, 0x120051, // [3]
		33, 34, 0x1b0018, // [4]
		35, 36, 0x1d0016, // [5]
	},
	NumStmt: [6]uint16{
		1, // 0
		0, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
	},
}
var _ = _cover_atomic_.LoadUint32
