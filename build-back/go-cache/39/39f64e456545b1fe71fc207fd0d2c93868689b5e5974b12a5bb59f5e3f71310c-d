//line /home/cooper/go/src/github.com/hyperledger/fabric/bccsp/idemix/handlers/revocation.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/
package handlers; import _cover_atomic_ "sync/atomic"

import (
	"crypto/ecdsa"
	"crypto/elliptic"
	"crypto/sha256"
	"crypto/x509"
	"encoding/pem"
	"fmt"
	"reflect"

	"github.com/hyperledger/fabric/bccsp"
	"github.com/pkg/errors"
)

// revocationSecretKey contains the revocation secret key
// and implements the bccsp.Key interface
type revocationSecretKey struct {
	// sk is the idemix reference to the revocation key
	privKey *ecdsa.PrivateKey
	// exportable if true, sk can be exported via the Bytes function
	exportable bool
}

func NewRevocationSecretKey(sk *ecdsa.PrivateKey, exportable bool) *revocationSecretKey {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[0], 1);
	return &revocationSecretKey{privKey: sk, exportable: exportable}
}

// Bytes converts this key to its byte representation,
// if this operation is allowed.
func (k *revocationSecretKey) Bytes() ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[1], 1);
	if k.exportable {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[3], 1);
		return k.privKey.D.Bytes(), nil
	}

	_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[2], 1);return nil, errors.New("not exportable")
}

// SKI returns the subject key identifier of this key.
func (k *revocationSecretKey) SKI() []byte {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[4], 1);
	// Marshall the public key
	raw := elliptic.Marshal(k.privKey.Curve, k.privKey.PublicKey.X, k.privKey.PublicKey.Y)

	// Hash it
	hash := sha256.New()
	hash.Write(raw)
	return hash.Sum(nil)
}

// Symmetric returns true if this key is a symmetric key,
// false if this key is asymmetric
func (k *revocationSecretKey) Symmetric() bool {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[5], 1);
	return false
}

// Private returns true if this key is a private key,
// false otherwise.
func (k *revocationSecretKey) Private() bool {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[6], 1);
	return true
}

// PublicKey returns the corresponding public key part of an asymmetric public/private key pair.
// This method returns an error in symmetric key schemes.
func (k *revocationSecretKey) PublicKey() (bccsp.Key, error) {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[7], 1);
	return &revocationPublicKey{&k.privKey.PublicKey}, nil
}

type revocationPublicKey struct {
	pubKey *ecdsa.PublicKey
}

func NewRevocationPublicKey(pubKey *ecdsa.PublicKey) *revocationPublicKey {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[8], 1);
	return &revocationPublicKey{pubKey: pubKey}
}

// Bytes converts this key to its byte representation,
// if this operation is allowed.
func (k *revocationPublicKey) Bytes() (raw []byte, err error) {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[9], 1);
	raw, err = x509.MarshalPKIXPublicKey(k.pubKey)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[11], 1);
		return nil, fmt.Errorf("Failed marshalling key [%s]", err)
	}
	_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[10], 1);return
}

// SKI returns the subject key identifier of this key.
func (k *revocationPublicKey) SKI() []byte {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[12], 1);
	// Marshall the public key
	raw := elliptic.Marshal(k.pubKey.Curve, k.pubKey.X, k.pubKey.Y)

	// Hash it
	hash := sha256.New()
	hash.Write(raw)
	return hash.Sum(nil)
}

// Symmetric returns true if this key is a symmetric key,
// false if this key is asymmetric
func (k *revocationPublicKey) Symmetric() bool {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[13], 1);
	return false
}

// Private returns true if this key is a private key,
// false otherwise.
func (k *revocationPublicKey) Private() bool {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[14], 1);
	return false
}

// PublicKey returns the corresponding public key part of an asymmetric public/private key pair.
// This method returns an error in symmetric key schemes.
func (k *revocationPublicKey) PublicKey() (bccsp.Key, error) {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[15], 1);
	return k, nil
}

// RevocationKeyGen generates revocation secret keys.
type RevocationKeyGen struct {
	// exportable is a flag to allow an revocation secret key to be marked as exportable.
	// If a secret key is marked as exportable, its Bytes method will return the key's byte representation.
	Exportable bool
	// Revocation implements the underlying cryptographic algorithms
	Revocation Revocation
}

func (g *RevocationKeyGen) KeyGen(opts bccsp.KeyGenOpts) (bccsp.Key, error) {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[16], 1);
	// Create a new key pair
	key, err := g.Revocation.NewKey()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[18], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[17], 1);return &revocationSecretKey{exportable: g.Exportable, privKey: key}, nil
}

// RevocationPublicKeyImporter imports revocation public keys
type RevocationPublicKeyImporter struct {
}

func (i *RevocationPublicKeyImporter) KeyImport(raw interface{}, opts bccsp.KeyImportOpts) (k bccsp.Key, err error) {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[19], 1);
	der, ok := raw.([]byte)
	if !ok {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[25], 1);
		return nil, errors.New("invalid raw, expected byte array")
	}

	_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[20], 1);if len(der) == 0 {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[26], 1);
		return nil, errors.New("invalid raw, it must not be nil")
	}

	_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[21], 1);blockPub, _ := pem.Decode(raw.([]byte))
	if blockPub == nil {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[27], 1);
		return nil, errors.New("Failed to decode revocation ECDSA public key")
	}
	_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[22], 1);revocationPk, err := x509.ParsePKIXPublicKey(blockPub.Bytes)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[28], 1);
		return nil, errors.Wrap(err, "Failed to parse revocation ECDSA public key bytes")
	}
	_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[23], 1);ecdsaPublicKey, isECDSA := revocationPk.(*ecdsa.PublicKey)
	if !isECDSA {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[29], 1);
		return nil, errors.Errorf("key is of type %v, not of type ECDSA", reflect.TypeOf(revocationPk))
	}

	_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[24], 1);return &revocationPublicKey{ecdsaPublicKey}, nil
}

type CriSigner struct {
	Revocation Revocation
}

func (s *CriSigner) Sign(k bccsp.Key, digest []byte, opts bccsp.SignerOpts) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[30], 1);
	revocationSecretKey, ok := k.(*revocationSecretKey)
	if !ok {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[33], 1);
		return nil, errors.New("invalid key, expected *revocationSecretKey")
	}
	_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[31], 1);criOpts, ok := opts.(*bccsp.IdemixCRISignerOpts)
	if !ok {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[34], 1);
		return nil, errors.New("invalid options, expected *IdemixCRISignerOpts")
	}

	_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[32], 1);return s.Revocation.Sign(
		revocationSecretKey.privKey,
		criOpts.UnrevokedHandles,
		criOpts.Epoch,
		criOpts.RevocationAlgorithm,
	)
}

type CriVerifier struct {
	Revocation Revocation
}

func (v *CriVerifier) Verify(k bccsp.Key, signature, digest []byte, opts bccsp.SignerOpts) (bool, error) {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[35], 1);
	revocationPublicKey, ok := k.(*revocationPublicKey)
	if !ok {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[40], 1);
		return false, errors.New("invalid key, expected *revocationPublicKey")
	}
	_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[36], 1);criOpts, ok := opts.(*bccsp.IdemixCRISignerOpts)
	if !ok {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[41], 1);
		return false, errors.New("invalid options, expected *IdemixCRISignerOpts")
	}
	_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[37], 1);if len(signature) == 0 {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[42], 1);
		return false, errors.New("invalid signature, it must not be empty")
	}

	_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[38], 1);err := v.Revocation.Verify(
		revocationPublicKey.pubKey,
		signature,
		criOpts.Epoch,
		criOpts.RevocationAlgorithm,
	)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[43], 1);
		return false, err
	}

	_cover_atomic_.AddUint32(&GoCover_5_353738643438356165663564.Count[39], 1);return true, nil
}

var GoCover_5_353738643438356165663564 = struct {
	Count     [44]uint32
	Pos       [3 * 44]uint32
	NumStmt   [44]uint16
} {
	Pos: [3 * 44]uint32{
		30, 32, 0x20059, // [0]
		36, 37, 0x120037, // [1]
		41, 41, 0x2a0002, // [2]
		37, 39, 0x30012, // [3]
		45, 53, 0x2002c, // [4]
		57, 59, 0x20030, // [5]
		63, 65, 0x2002e, // [6]
		69, 71, 0x2003e, // [7]
		77, 79, 0x2004b, // [8]
		83, 85, 0x10003f, // [9]
		88, 88, 0x80002, // [10]
		85, 87, 0x30010, // [11]
		92, 100, 0x2002c, // [12]
		104, 106, 0x20030, // [13]
		110, 112, 0x2002e, // [14]
		116, 118, 0x2003e, // [15]
		129, 132, 0x10004d, // [16]
		136, 136, 0x4a0002, // [17]
		132, 134, 0x30010, // [18]
		143, 145, 0x90075, // [19]
		149, 149, 0x130002, // [20]
		153, 154, 0x150002, // [21]
		157, 158, 0x100002, // [22]
		161, 162, 0xe0002, // [23]
		166, 166, 0x320002, // [24]
		145, 147, 0x30009, // [25]
		149, 151, 0x30013, // [26]
		154, 156, 0x30015, // [27]
		158, 160, 0x30010, // [28]
		162, 164, 0x3000e, // [29]
		173, 175, 0x9005d, // [30]
		178, 179, 0x90002, // [31]
		183, 188, 0x30002, // [32]
		175, 177, 0x30009, // [33]
		179, 181, 0x30009, // [34]
		195, 197, 0x9006a, // [35]
		200, 201, 0x90002, // [36]
		204, 204, 0x190002, // [37]
		208, 214, 0x100002, // [38]
		218, 218, 0x120002, // [39]
		197, 199, 0x30009, // [40]
		201, 203, 0x30009, // [41]
		204, 206, 0x30019, // [42]
		214, 216, 0x30010, // [43]
	},
	NumStmt: [44]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
		4, // 4
		1, // 5
		1, // 6
		1, // 7
		1, // 8
		2, // 9
		1, // 10
		1, // 11
		4, // 12
		1, // 13
		1, // 14
		1, // 15
		2, // 16
		1, // 17
		1, // 18
		2, // 19
		1, // 20
		2, // 21
		2, // 22
		2, // 23
		1, // 24
		1, // 25
		1, // 26
		1, // 27
		1, // 28
		1, // 29
		2, // 30
		2, // 31
		1, // 32
		1, // 33
		1, // 34
		2, // 35
		2, // 36
		1, // 37
		2, // 38
		1, // 39
		1, // 40
		1, // 41
		1, // 42
		1, // 43
	},
}
var _ = _cover_atomic_.LoadUint32
