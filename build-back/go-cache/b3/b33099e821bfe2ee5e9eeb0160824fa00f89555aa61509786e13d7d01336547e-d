//line /home/cooper/go/src/github.com/hyperledger/fabric/core/middleware/require_cert.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package middleware; import _cover_atomic_ "sync/atomic"

import (
	"net/http"
)

type requireCert struct {
	next http.Handler
}

// RequireCert is used to ensure that a verified TLS client certificate was
// used for authentication.
func RequireCert() Middleware {_cover_atomic_.AddUint32(&GoCover_2_393739636635663162336662.Count[0], 1);
	return func(next http.Handler) http.Handler {_cover_atomic_.AddUint32(&GoCover_2_393739636635663162336662.Count[1], 1);
		return &requireCert{next: next}
	}
}

func (r *requireCert) ServeHTTP(w http.ResponseWriter, req *http.Request) {_cover_atomic_.AddUint32(&GoCover_2_393739636635663162336662.Count[2], 1);
	switch {
	case req.TLS == nil:_cover_atomic_.AddUint32(&GoCover_2_393739636635663162336662.Count[3], 1);
		fallthrough
	case len(req.TLS.VerifiedChains) == 0:_cover_atomic_.AddUint32(&GoCover_2_393739636635663162336662.Count[4], 1);
		fallthrough
	case len(req.TLS.VerifiedChains[0]) == 0:_cover_atomic_.AddUint32(&GoCover_2_393739636635663162336662.Count[5], 1);
		w.WriteHeader(http.StatusUnauthorized)
	default:_cover_atomic_.AddUint32(&GoCover_2_393739636635663162336662.Count[6], 1);
		r.next.ServeHTTP(w, req)
	}
}

var GoCover_2_393739636635663162336662 = struct {
	Count     [7]uint32
	Pos       [3 * 7]uint32
	NumStmt   [7]uint16
} {
	Pos: [3 * 7]uint32{
		19, 20, 0x2e001f, // [0]
		20, 22, 0x3002e, // [1]
		25, 26, 0x9004b, // [2]
		27, 28, 0xe0016, // [3]
		29, 30, 0xe0028, // [4]
		31, 32, 0x29002b, // [5]
		33, 34, 0x1b000a, // [6]
	},
	NumStmt: [7]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
	},
}
var _ = _cover_atomic_.LoadUint32
