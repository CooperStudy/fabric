//line /home/cooper/go/src/github.com/hyperledger/fabric/token/tms/plain/manager.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package plain; import _cover_atomic_ "sync/atomic"

import (
	"sync"

	"github.com/hyperledger/fabric/token/identity"
	"github.com/hyperledger/fabric/token/transaction"
	"github.com/pkg/errors"
)

// Manager is used to access TMS components.
type Manager struct {
	mutex            sync.RWMutex
	policyValidators map[string]identity.IssuingValidator
}

// GetTxProcessor returns a TMSTxProcessor that is used to process token transactions.
func (m *Manager) GetTxProcessor(channel string) (transaction.TMSTxProcessor, error) {_cover_atomic_.AddUint32(&GoCover_2_376538356362393564346637.Count[0], 1);
	m.mutex.RLock()
	policyValidator := m.policyValidators[channel]
	m.mutex.RUnlock()
	if policyValidator == nil {_cover_atomic_.AddUint32(&GoCover_2_376538356362393564346637.Count[2], 1);
		return nil, errors.Errorf("no policy validator found for channel '%s'", channel)
	}
	_cover_atomic_.AddUint32(&GoCover_2_376538356362393564346637.Count[1], 1);return &Verifier{IssuingValidator: policyValidator}, nil
}

// SetPolicyValidator sets the policy validator for the specified channel
func (m *Manager) SetPolicyValidator(channel string, validator identity.IssuingValidator) {_cover_atomic_.AddUint32(&GoCover_2_376538356362393564346637.Count[3], 1);
	m.mutex.Lock()
	m.policyValidators[channel] = validator
	m.mutex.Unlock()
}

var GoCover_2_376538356362393564346637 = struct {
	Count     [4]uint32
	Pos       [3 * 4]uint32
	NumStmt   [4]uint16
} {
	Pos: [3 * 4]uint32{
		24, 28, 0x1c0056, // [0]
		31, 31, 0x3a0002, // [1]
		28, 30, 0x3001c, // [2]
		35, 39, 0x2005b, // [3]
	},
	NumStmt: [4]uint16{
		4, // 0
		1, // 1
		1, // 2
		3, // 3
	},
}
var _ = _cover_atomic_.LoadUint32
