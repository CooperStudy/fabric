//line /home/cooper/go/src/github.com/hyperledger/fabric/orderer/consensus/kafka/consenter.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package kafka; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric/common/metrics"
	localconfig "github.com/hyperledger/fabric/orderer/common/localconfig"
	"github.com/hyperledger/fabric/orderer/consensus"
	cb "github.com/hyperledger/fabric/protos/common"

	"github.com/Shopify/sarama"
	logging "github.com/op/go-logging"
)

// New creates a Kafka-based consenter. Called by orderer's main.go.
func New(config localconfig.Kafka, metricsProvider metrics.Provider) (consensus.Consenter, *Metrics) {_cover_atomic_.AddUint32(&GoCover_3_623633326437306563303132.Count[0], 1);
	if config.Verbose {_cover_atomic_.AddUint32(&GoCover_3_623633326437306563303132.Count[2], 1);
		logging.SetLevel(logging.DEBUG, "orderer.consensus.kafka.sarama")
	}

	_cover_atomic_.AddUint32(&GoCover_3_623633326437306563303132.Count[1], 1);brokerConfig := newBrokerConfig(
		config.TLS,
		config.SASLPlain,
		config.Retry,
		config.Version,
		defaultPartition)

	return &consenterImpl{
		brokerConfigVal: brokerConfig,
		tlsConfigVal:    config.TLS,
		retryOptionsVal: config.Retry,
		kafkaVersionVal: config.Version,
		topicDetailVal: &sarama.TopicDetail{
			NumPartitions:     1,
			ReplicationFactor: config.Topic.ReplicationFactor,
		},
	}, NewMetrics(metricsProvider, brokerConfig.MetricRegistry)
}

// consenterImpl holds the implementation of type that satisfies the
// consensus.Consenter interface --as the HandleChain contract requires-- and
// the commonConsenter one.
type consenterImpl struct {
	brokerConfigVal *sarama.Config
	tlsConfigVal    localconfig.TLS
	retryOptionsVal localconfig.Retry
	kafkaVersionVal sarama.KafkaVersion
	topicDetailVal  *sarama.TopicDetail
	metricsProvider metrics.Provider
}

// HandleChain creates/returns a reference to a consensus.Chain object for the
// given set of support resources. Implements the consensus.Consenter
// interface. Called by consensus.newChainSupport(), which is itself called by
// multichannel.NewManagerImpl() when ranging over the ledgerFactory's
// existingChains.
func (consenter *consenterImpl) HandleChain(support consensus.ConsenterSupport, metadata *cb.Metadata) (consensus.Chain, error) {_cover_atomic_.AddUint32(&GoCover_3_623633326437306563303132.Count[3], 1);
	lastOffsetPersisted, lastOriginalOffsetProcessed, lastResubmittedConfigOffset := getOffsets(metadata.Value, support.ChainID())
	return newChain(consenter, support, lastOffsetPersisted, lastOriginalOffsetProcessed, lastResubmittedConfigOffset)
}

// commonConsenter allows us to retrieve the configuration options set on the
// consenter object. These will be common across all chain objects derived by
// this consenter. They are set using using local configuration settings. This
// interface is satisfied by consenterImpl.
type commonConsenter interface {
	brokerConfig() *sarama.Config
	retryOptions() localconfig.Retry
	topicDetail() *sarama.TopicDetail
}

func (consenter *consenterImpl) brokerConfig() *sarama.Config {_cover_atomic_.AddUint32(&GoCover_3_623633326437306563303132.Count[4], 1);
	return consenter.brokerConfigVal
}

func (consenter *consenterImpl) retryOptions() localconfig.Retry {_cover_atomic_.AddUint32(&GoCover_3_623633326437306563303132.Count[5], 1);
	return consenter.retryOptionsVal
}

func (consenter *consenterImpl) topicDetail() *sarama.TopicDetail {_cover_atomic_.AddUint32(&GoCover_3_623633326437306563303132.Count[6], 1);
	return consenter.topicDetailVal
}

// closeable allows the shut down of the calling resource.
type closeable interface {
	close() error
}

var GoCover_3_623633326437306563303132 = struct {
	Count     [7]uint32
	Pos       [3 * 7]uint32
	NumStmt   [7]uint16
} {
	Pos: [3 * 7]uint32{
		20, 21, 0x140066, // [0]
		25, 41, 0x3d0002, // [1]
		21, 23, 0x30014, // [2]
		61, 64, 0x20081, // [3]
		76, 78, 0x2003f, // [4]
		80, 82, 0x20042, // [5]
		84, 86, 0x20043, // [6]
	},
	NumStmt: [7]uint16{
		1, // 0
		2, // 1
		1, // 2
		2, // 3
		1, // 4
		1, // 5
		1, // 6
	},
}
var _ = _cover_atomic_.LoadUint32
