//line /home/cooper/go/src/github.com/hyperledger/fabric/bccsp/idemix/bridge/user.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/
package bridge; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric-amcl/amcl"
	"github.com/hyperledger/fabric-amcl/amcl/FP256BN"
	"github.com/hyperledger/fabric/bccsp/idemix/handlers"
	cryptolib "github.com/hyperledger/fabric/idemix"
	"github.com/pkg/errors"
)

// User encapsulates the idemix algorithms to generate user secret keys and pseudonym.
type User struct {
	NewRand func() *amcl.RAND
}

// NewKey generates an idemix user secret key
func (u *User) NewKey() (res handlers.Big, err error) {_cover_atomic_.AddUint32(&GoCover_8_373430303738666139356161.Count[0], 1);
	defer func() {_cover_atomic_.AddUint32(&GoCover_8_373430303738666139356161.Count[2], 1);
		if r := recover(); r != nil {_cover_atomic_.AddUint32(&GoCover_8_373430303738666139356161.Count[3], 1);
			res = nil
			err = errors.Errorf("failure [%s]", r)
		}
	}()

	_cover_atomic_.AddUint32(&GoCover_8_373430303738666139356161.Count[1], 1);res = &Big{E: cryptolib.RandModOrder(u.NewRand())}

	return
}

func (*User) NewKeyFromBytes(raw []byte) (res handlers.Big, err error) {_cover_atomic_.AddUint32(&GoCover_8_373430303738666139356161.Count[4], 1);
	if len(raw) != int(FP256BN.MODBYTES) {_cover_atomic_.AddUint32(&GoCover_8_373430303738666139356161.Count[6], 1);
		return nil, errors.Errorf("invalid length, expected [%d], got [%d]", FP256BN.MODBYTES, len(raw))
	}

	_cover_atomic_.AddUint32(&GoCover_8_373430303738666139356161.Count[5], 1);res = &Big{E: FP256BN.FromBytes(raw)}

	return
}

// MakeNym generates a new pseudonym key-pair derived from the passed user secret key (sk) and issuer public key (ipk)
func (u *User) MakeNym(sk handlers.Big, ipk handlers.IssuerPublicKey) (r1 handlers.Ecp, r2 handlers.Big, err error) {_cover_atomic_.AddUint32(&GoCover_8_373430303738666139356161.Count[7], 1);
	defer func() {_cover_atomic_.AddUint32(&GoCover_8_373430303738666139356161.Count[11], 1);
		if r := recover(); r != nil {_cover_atomic_.AddUint32(&GoCover_8_373430303738666139356161.Count[12], 1);
			r1 = nil
			r2 = nil
			err = errors.Errorf("failure [%s]", r)
		}
	}()

	_cover_atomic_.AddUint32(&GoCover_8_373430303738666139356161.Count[8], 1);isk, ok := sk.(*Big)
	if !ok {_cover_atomic_.AddUint32(&GoCover_8_373430303738666139356161.Count[13], 1);
		return nil, nil, errors.Errorf("invalid user secret key, expected *Big, got [%T]", sk)
	}
	_cover_atomic_.AddUint32(&GoCover_8_373430303738666139356161.Count[9], 1);iipk, ok := ipk.(*IssuerPublicKey)
	if !ok {_cover_atomic_.AddUint32(&GoCover_8_373430303738666139356161.Count[14], 1);
		return nil, nil, errors.Errorf("invalid issuer public key, expected *IssuerPublicKey, got [%T]", ipk)
	}

	_cover_atomic_.AddUint32(&GoCover_8_373430303738666139356161.Count[10], 1);ecp, big := cryptolib.MakeNym(isk.E, iipk.PK, u.NewRand())

	r1 = &Ecp{E: ecp}
	r2 = &Big{E: big}

	return
}

func (*User) NewPublicNymFromBytes(raw []byte) (r handlers.Ecp, err error) {_cover_atomic_.AddUint32(&GoCover_8_373430303738666139356161.Count[15], 1);
	defer func() {_cover_atomic_.AddUint32(&GoCover_8_373430303738666139356161.Count[17], 1);
		if r := recover(); r != nil {_cover_atomic_.AddUint32(&GoCover_8_373430303738666139356161.Count[18], 1);
			r = nil
			err = errors.Errorf("failure [%s]", r)
		}
	}()

	// raw is the concatenation of two big integers
	_cover_atomic_.AddUint32(&GoCover_8_373430303738666139356161.Count[16], 1);lHalve := len(raw) / 2

	r = &Ecp{E: FP256BN.NewECPbigs(FP256BN.FromBytes(raw[:lHalve]), FP256BN.FromBytes(raw[lHalve:]))}

	return
}

var GoCover_8_373430303738666139356161 = struct {
	Count     [19]uint32
	Pos       [3 * 19]uint32
	NumStmt   [19]uint16
} {
	Pos: [3 * 19]uint32{
		22, 23, 0xf0037, // [0]
		30, 32, 0x80002, // [1]
		23, 24, 0x1f000f, // [2]
		24, 27, 0x4001f, // [3]
		35, 36, 0x270048, // [4]
		40, 42, 0x80002, // [5]
		36, 38, 0x30027, // [6]
		46, 47, 0xf0075, // [7]
		55, 56, 0x90002, // [8]
		59, 60, 0x90002, // [9]
		64, 69, 0x80002, // [10]
		47, 48, 0x1f000f, // [11]
		48, 52, 0x4001f, // [12]
		56, 58, 0x30009, // [13]
		60, 62, 0x30009, // [14]
		72, 73, 0xf004c, // [15]
		81, 85, 0x80002, // [16]
		73, 74, 0x1f000f, // [17]
		74, 77, 0x4001f, // [18]
	},
	NumStmt: [19]uint16{
		1, // 0
		2, // 1
		1, // 2
		2, // 3
		1, // 4
		2, // 5
		1, // 6
		1, // 7
		2, // 8
		2, // 9
		4, // 10
		1, // 11
		3, // 12
		1, // 13
		1, // 14
		1, // 15
		3, // 16
		1, // 17
		2, // 18
	},
}
var _ = _cover_atomic_.LoadUint32
