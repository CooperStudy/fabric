//line /home/cooper/go/src/github.com/hyperledger/fabric/orderer/common/msgprocessor/standardchannel.go:1
/*
Copyright IBM Corp. 2017 All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package msgprocessor; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric/common/channelconfig"
	"github.com/hyperledger/fabric/common/crypto"
	"github.com/hyperledger/fabric/common/policies"
	cb "github.com/hyperledger/fabric/protos/common"
	"github.com/hyperledger/fabric/protos/utils"
)

// StandardChannelSupport includes the resources needed for the StandardChannel processor.
type StandardChannelSupport interface {
	// Sequence should return the current configSeq
	Sequence() uint64

	// ChainID returns the ChannelID
	ChainID() string

	// Signer returns the signer for this orderer
	Signer() crypto.LocalSigner

	// ProposeConfigUpdate takes in an Envelope of type CONFIG_UPDATE and produces a
	// ConfigEnvelope to be used as the Envelope Payload Data of a CONFIG message
	ProposeConfigUpdate(configtx *cb.Envelope) (*cb.ConfigEnvelope, error)
}

// StandardChannel implements the Processor interface for standard extant channels
type StandardChannel struct {
	support StandardChannelSupport
	filters *RuleSet
}

// NewStandardChannel creates a new standard message processor
func NewStandardChannel(support StandardChannelSupport, filters *RuleSet) *StandardChannel {_cover_atomic_.AddUint32(&GoCover_5_646330373837303238396264.Count[0], 1);
	return &StandardChannel{
		filters: filters,
		support: support,
	}
}

// CreateStandardChannelFilters creates the set of filters for a normal (non-system) chain
func CreateStandardChannelFilters(filterSupport channelconfig.Resources) *RuleSet {_cover_atomic_.AddUint32(&GoCover_5_646330373837303238396264.Count[1], 1);
	ordererConfig, ok := filterSupport.OrdererConfig()
	if !ok {_cover_atomic_.AddUint32(&GoCover_5_646330373837303238396264.Count[3], 1);
		logger.Panicf("Missing orderer config")
	}
	_cover_atomic_.AddUint32(&GoCover_5_646330373837303238396264.Count[2], 1);return NewRuleSet([]Rule{
		EmptyRejectRule,
		NewExpirationRejectRule(filterSupport),
		NewSizeFilter(ordererConfig),
		NewSigFilter(policies.ChannelWriters, filterSupport),
	})
}

// ClassifyMsg inspects the message to determine which type of processing is necessary
func (s *StandardChannel) ClassifyMsg(chdr *cb.ChannelHeader) Classification {_cover_atomic_.AddUint32(&GoCover_5_646330373837303238396264.Count[4], 1);
	switch chdr.Type {
	case int32(cb.HeaderType_CONFIG_UPDATE):_cover_atomic_.AddUint32(&GoCover_5_646330373837303238396264.Count[5], 1);
		return ConfigUpdateMsg
	case int32(cb.HeaderType_ORDERER_TRANSACTION):_cover_atomic_.AddUint32(&GoCover_5_646330373837303238396264.Count[6], 1);
		// In order to maintain backwards compatibility, we must classify these messages
		return ConfigMsg
	case int32(cb.HeaderType_CONFIG):_cover_atomic_.AddUint32(&GoCover_5_646330373837303238396264.Count[7], 1);
		// In order to maintain backwards compatibility, we must classify these messages
		return ConfigMsg
	default:_cover_atomic_.AddUint32(&GoCover_5_646330373837303238396264.Count[8], 1);
		return NormalMsg
	}
}

// ProcessNormalMsg will check the validity of a message based on the current configuration.  It returns the current
// configuration sequence number and nil on success, or an error if the message is not valid
func (s *StandardChannel) ProcessNormalMsg(env *cb.Envelope) (configSeq uint64, err error) {_cover_atomic_.AddUint32(&GoCover_5_646330373837303238396264.Count[9], 1);
	configSeq = s.support.Sequence()
	err = s.filters.Apply(env)
	return
}

// ProcessConfigUpdateMsg will attempt to apply the config impetus msg to the current configuration, and if successful
// return the resulting config message and the configSeq the config was computed from.  If the config impetus message
// is invalid, an error is returned.
func (s *StandardChannel) ProcessConfigUpdateMsg(env *cb.Envelope) (config *cb.Envelope, configSeq uint64, err error) {_cover_atomic_.AddUint32(&GoCover_5_646330373837303238396264.Count[10], 1);
	logger.Debugf("Processing config update message for channel %s", s.support.ChainID())

	// Call Sequence first.  If seq advances between proposal and acceptance, this is okay, and will cause reprocessing
	// however, if Sequence is called last, then a success could be falsely attributed to a newer configSeq
	seq := s.support.Sequence()
	err = s.filters.Apply(env)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_5_646330373837303238396264.Count[15], 1);
		return nil, 0, err
	}

	_cover_atomic_.AddUint32(&GoCover_5_646330373837303238396264.Count[11], 1);configEnvelope, err := s.support.ProposeConfigUpdate(env)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_5_646330373837303238396264.Count[16], 1);
		return nil, 0, err
	}

	_cover_atomic_.AddUint32(&GoCover_5_646330373837303238396264.Count[12], 1);config, err = utils.CreateSignedEnvelope(cb.HeaderType_CONFIG, s.support.ChainID(), s.support.Signer(), configEnvelope, msgVersion, epoch)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_5_646330373837303238396264.Count[17], 1);
		return nil, 0, err
	}

	// We re-apply the filters here, especially for the size filter, to ensure that the transaction we
	// just constructed is not too large for our consenter.  It additionally reapplies the signature
	// check, which although not strictly necessary, is a good sanity check, in case the orderer
	// has not been configured with the right cert material.  The additional overhead of the signature
	// check is negligable, as this is the reconfig path and not the normal path.
	_cover_atomic_.AddUint32(&GoCover_5_646330373837303238396264.Count[13], 1);err = s.filters.Apply(config)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_5_646330373837303238396264.Count[18], 1);
		return nil, 0, err
	}

	_cover_atomic_.AddUint32(&GoCover_5_646330373837303238396264.Count[14], 1);return config, seq, nil
}

// ProcessConfigMsg takes an envelope of type `HeaderType_CONFIG`, unpacks the `ConfigEnvelope` from it
// extracts the `ConfigUpdate` from `LastUpdate` field, and calls `ProcessConfigUpdateMsg` on it.
func (s *StandardChannel) ProcessConfigMsg(env *cb.Envelope) (config *cb.Envelope, configSeq uint64, err error) {_cover_atomic_.AddUint32(&GoCover_5_646330373837303238396264.Count[19], 1);
	logger.Debugf("Processing config message for channel %s", s.support.ChainID())

	configEnvelope := &cb.ConfigEnvelope{}
	_, err = utils.UnmarshalEnvelopeOfType(env, cb.HeaderType_CONFIG, configEnvelope)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_5_646330373837303238396264.Count[21], 1);
		return
	}

	_cover_atomic_.AddUint32(&GoCover_5_646330373837303238396264.Count[20], 1);return s.ProcessConfigUpdateMsg(configEnvelope.LastUpdate)
}

var GoCover_5_646330373837303238396264 = struct {
	Count     [22]uint32
	Pos       [3 * 22]uint32
	NumStmt   [22]uint16
} {
	Pos: [3 * 22]uint32{
		40, 45, 0x2005c, // [0]
		48, 50, 0x90053, // [1]
		53, 58, 0x40002, // [2]
		50, 52, 0x30009, // [3]
		62, 63, 0x13004e, // [4]
		64, 65, 0x19002a, // [5]
		66, 68, 0x130030, // [6]
		69, 71, 0x130023, // [7]
		72, 73, 0x13000a, // [8]
		79, 83, 0x2005c, // [9]
		88, 95, 0x100077, // [10]
		99, 100, 0x100002, // [11]
		104, 105, 0x100002, // [12]
		114, 115, 0x100002, // [13]
		119, 119, 0x190002, // [14]
		95, 97, 0x30010, // [15]
		100, 102, 0x30010, // [16]
		105, 107, 0x30010, // [17]
		115, 117, 0x30010, // [18]
		124, 129, 0x100071, // [19]
		133, 133, 0x3c0002, // [20]
		129, 131, 0x30010, // [21]
	},
	NumStmt: [22]uint16{
		1, // 0
		2, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
		1, // 7
		1, // 8
		3, // 9
		4, // 10
		2, // 11
		2, // 12
		2, // 13
		1, // 14
		1, // 15
		1, // 16
		1, // 17
		1, // 18
		4, // 19
		1, // 20
		1, // 21
	},
}
var _ = _cover_atomic_.LoadUint32
