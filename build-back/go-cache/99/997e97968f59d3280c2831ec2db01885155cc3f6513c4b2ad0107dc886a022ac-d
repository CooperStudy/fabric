//line /home/cooper/go/src/github.com/hyperledger/fabric/core/handlers/auth/filter/expiration.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package filter; import _cover_atomic_ "sync/atomic"

import (
	"context"
	"time"

	"github.com/hyperledger/fabric/common/crypto"
	"github.com/hyperledger/fabric/core/handlers/auth"
	"github.com/hyperledger/fabric/protos/peer"
	"github.com/hyperledger/fabric/protos/utils"
	"github.com/pkg/errors"
)

// NewExpirationCheckFilter creates a new Filter that checks identity expiration
func NewExpirationCheckFilter() auth.Filter {_cover_atomic_.AddUint32(&GoCover_0_356664663930613165353162.Count[0], 1);
	return &expirationCheckFilter{}
}

type expirationCheckFilter struct {
	next peer.EndorserServer
}

// Init initializes the Filter with the next EndorserServer
func (f *expirationCheckFilter) Init(next peer.EndorserServer) {_cover_atomic_.AddUint32(&GoCover_0_356664663930613165353162.Count[1], 1);
	f.next = next
}

func validateProposal(signedProp *peer.SignedProposal) error {_cover_atomic_.AddUint32(&GoCover_0_356664663930613165353162.Count[2], 1);
	prop, err := utils.GetProposal(signedProp.ProposalBytes)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_356664663930613165353162.Count[7], 1);
		return errors.Wrap(err, "failed parsing proposal")
	}

	_cover_atomic_.AddUint32(&GoCover_0_356664663930613165353162.Count[3], 1);hdr, err := utils.GetHeader(prop.Header)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_356664663930613165353162.Count[8], 1);
		return errors.Wrap(err, "failed parsing header")
	}

	_cover_atomic_.AddUint32(&GoCover_0_356664663930613165353162.Count[4], 1);sh, err := utils.GetSignatureHeader(hdr.SignatureHeader)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_356664663930613165353162.Count[9], 1);
		return errors.Wrap(err, "failed parsing signature header")
	}
	_cover_atomic_.AddUint32(&GoCover_0_356664663930613165353162.Count[5], 1);expirationTime := crypto.ExpiresAt(sh.Creator)
	if !expirationTime.IsZero() && time.Now().After(expirationTime) {_cover_atomic_.AddUint32(&GoCover_0_356664663930613165353162.Count[10], 1);
		return errors.New("identity expired")
	}
	_cover_atomic_.AddUint32(&GoCover_0_356664663930613165353162.Count[6], 1);return nil
}

// ProcessProposal processes a signed proposal
func (f *expirationCheckFilter) ProcessProposal(ctx context.Context, signedProp *peer.SignedProposal) (*peer.ProposalResponse, error) {_cover_atomic_.AddUint32(&GoCover_0_356664663930613165353162.Count[11], 1);
	if err := validateProposal(signedProp); err != nil {_cover_atomic_.AddUint32(&GoCover_0_356664663930613165353162.Count[13], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_356664663930613165353162.Count[12], 1);return f.next.ProcessProposal(ctx, signedProp)
}

var GoCover_0_356664663930613165353162 = struct {
	Count     [14]uint32
	Pos       [3 * 14]uint32
	NumStmt   [14]uint16
} {
	Pos: [3 * 14]uint32{
		21, 23, 0x2002d, // [0]
		30, 32, 0x20040, // [1]
		34, 36, 0x10003e, // [2]
		40, 41, 0x100002, // [3]
		45, 46, 0x100002, // [4]
		49, 50, 0x420002, // [5]
		53, 53, 0xc0002, // [6]
		36, 38, 0x30010, // [7]
		41, 43, 0x30010, // [8]
		46, 48, 0x30010, // [9]
		50, 52, 0x30042, // [10]
		57, 58, 0x350087, // [11]
		61, 61, 0x300002, // [12]
		58, 60, 0x30035, // [13]
	},
	NumStmt: [14]uint16{
		1, // 0
		1, // 1
		2, // 2
		2, // 3
		2, // 4
		2, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
		1, // 10
		1, // 11
		1, // 12
		1, // 13
	},
}
var _ = _cover_atomic_.LoadUint32
