//line /home/cooper/go/src/github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/pvtstatepurgemgmt/expiry_schedule_builder.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package pvtstatepurgemgmt; import _cover_atomic_ "sync/atomic"

import (
	math "math"

	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/privacyenabledstate"
	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/statedb"
	"github.com/hyperledger/fabric/core/ledger/pvtdatapolicy"
	"github.com/hyperledger/fabric/core/ledger/util"
)

type expiryScheduleBuilder struct {
	btlPolicy       pvtdatapolicy.BTLPolicy
	scheduleEntries map[expiryInfoKey]*PvtdataKeys
}

func newExpiryScheduleBuilder(btlPolicy pvtdatapolicy.BTLPolicy) *expiryScheduleBuilder {_cover_atomic_.AddUint32(&GoCover_1_326462396539336232343931.Count[0], 1);
	return &expiryScheduleBuilder{btlPolicy, make(map[expiryInfoKey]*PvtdataKeys)}
}

func (builder *expiryScheduleBuilder) add(ns, coll, key string, keyHash []byte, versionedValue *statedb.VersionedValue) error {_cover_atomic_.AddUint32(&GoCover_1_326462396539336232343931.Count[1], 1);
	committingBlk := versionedValue.Version.BlockNum
	expiryBlk, err := builder.btlPolicy.GetExpiringBlock(ns, coll, committingBlk)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_326462396539336232343931.Count[5], 1);
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_1_326462396539336232343931.Count[2], 1);if isDelete(versionedValue) || neverExpires(expiryBlk) {_cover_atomic_.AddUint32(&GoCover_1_326462396539336232343931.Count[6], 1);
		return nil
	}
	_cover_atomic_.AddUint32(&GoCover_1_326462396539336232343931.Count[3], 1);expinfoKey := expiryInfoKey{committingBlk: committingBlk, expiryBlk: expiryBlk}
	pvtdataKeys, ok := builder.scheduleEntries[expinfoKey]
	if !ok {_cover_atomic_.AddUint32(&GoCover_1_326462396539336232343931.Count[7], 1);
		pvtdataKeys = newPvtdataKeys()
		builder.scheduleEntries[expinfoKey] = pvtdataKeys
	}
	_cover_atomic_.AddUint32(&GoCover_1_326462396539336232343931.Count[4], 1);pvtdataKeys.add(ns, coll, key, keyHash)
	return nil
}

func isDelete(versionedValue *statedb.VersionedValue) bool {_cover_atomic_.AddUint32(&GoCover_1_326462396539336232343931.Count[8], 1);
	return versionedValue.Value == nil
}

func neverExpires(expiryBlk uint64) bool {_cover_atomic_.AddUint32(&GoCover_1_326462396539336232343931.Count[9], 1);
	return expiryBlk == math.MaxUint64
}

func (builder *expiryScheduleBuilder) getExpiryInfo() []*expiryInfo {_cover_atomic_.AddUint32(&GoCover_1_326462396539336232343931.Count[10], 1);
	var listExpinfo []*expiryInfo
	for expinfoKey, pvtdataKeys := range builder.scheduleEntries {_cover_atomic_.AddUint32(&GoCover_1_326462396539336232343931.Count[12], 1);
		expinfoKeyCopy := expinfoKey
		listExpinfo = append(listExpinfo, &expiryInfo{expiryInfoKey: &expinfoKeyCopy, pvtdataKeys: pvtdataKeys})
	}
	_cover_atomic_.AddUint32(&GoCover_1_326462396539336232343931.Count[11], 1);return listExpinfo
}

func buildExpirySchedule(
	btlPolicy pvtdatapolicy.BTLPolicy,
	pvtUpdates *privacyenabledstate.PvtUpdateBatch,
	hashedUpdates *privacyenabledstate.HashedUpdateBatch) ([]*expiryInfo, error) {_cover_atomic_.AddUint32(&GoCover_1_326462396539336232343931.Count[13], 1);

	hashedUpdateKeys := hashedUpdates.ToCompositeKeyMap()
	expiryScheduleBuilder := newExpiryScheduleBuilder(btlPolicy)

	logger.Debugf("Building the expiry schedules based on the update batch")

	// Iterate through the private data updates and for each key add into the expiry schedule
	// i.e., when these private data key and it's hashed-keys are going to be expired
	// Note that the 'hashedUpdateKeys'  may be superset of the pvtUpdates. This is because,
	// the peer may not receive all the private data either because the peer is not eligible for certain private data
	// or because we allow proceeding with the missing private data data
	for pvtUpdateKey, vv := range pvtUpdates.ToCompositeKeyMap() {_cover_atomic_.AddUint32(&GoCover_1_326462396539336232343931.Count[16], 1);
		keyHash := util.ComputeStringHash(pvtUpdateKey.Key)
		hashedCompisiteKey := privacyenabledstate.HashedCompositeKey{
			Namespace:      pvtUpdateKey.Namespace,
			CollectionName: pvtUpdateKey.CollectionName,
			KeyHash:        string(keyHash),
		}
		logger.Debugf("Adding expiry schedule for key and key hash [%s]", &hashedCompisiteKey)
		if err := expiryScheduleBuilder.add(pvtUpdateKey.Namespace, pvtUpdateKey.CollectionName, pvtUpdateKey.Key, keyHash, vv); err != nil {_cover_atomic_.AddUint32(&GoCover_1_326462396539336232343931.Count[18], 1);
			return nil, err
		}
		_cover_atomic_.AddUint32(&GoCover_1_326462396539336232343931.Count[17], 1);delete(hashedUpdateKeys, hashedCompisiteKey)
	}

	// Add entries for the leftover key hashes i.e., the hashes corresponding to which there is not private key is present
	_cover_atomic_.AddUint32(&GoCover_1_326462396539336232343931.Count[14], 1);for hashedUpdateKey, vv := range hashedUpdateKeys {_cover_atomic_.AddUint32(&GoCover_1_326462396539336232343931.Count[19], 1);
		logger.Debugf("Adding expiry schedule for key hash [%s]", &hashedUpdateKey)
		if err := expiryScheduleBuilder.add(hashedUpdateKey.Namespace, hashedUpdateKey.CollectionName, "", []byte(hashedUpdateKey.KeyHash), vv); err != nil {_cover_atomic_.AddUint32(&GoCover_1_326462396539336232343931.Count[20], 1);
			return nil, err
		}
	}
	_cover_atomic_.AddUint32(&GoCover_1_326462396539336232343931.Count[15], 1);return expiryScheduleBuilder.getExpiryInfo(), nil
}

var GoCover_1_326462396539336232343931 = struct {
	Count     [21]uint32
	Pos       [3 * 21]uint32
	NumStmt   [21]uint16
} {
	Pos: [3 * 21]uint32{
		23, 25, 0x20059, // [0]
		27, 30, 0x10007f, // [1]
		33, 33, 0x390002, // [2]
		36, 38, 0x90002, // [3]
		42, 43, 0xc0002, // [4]
		30, 32, 0x30010, // [5]
		33, 35, 0x30039, // [6]
		38, 41, 0x30009, // [7]
		46, 48, 0x2003c, // [8]
		50, 52, 0x2002a, // [9]
		54, 56, 0x3f0045, // [10]
		60, 60, 0x140002, // [11]
		56, 59, 0x3003f, // [12]
		66, 78, 0x3f004f, // [13]
		93, 93, 0x340002, // [14]
		99, 99, 0x330002, // [15]
		78, 86, 0x87003f, // [16]
		89, 89, 0x2f0003, // [17]
		86, 88, 0x40087, // [18]
		93, 95, 0x970034, // [19]
		95, 97, 0x40097, // [20]
	},
	NumStmt: [21]uint16{
		1, // 0
		3, // 1
		1, // 2
		3, // 3
		2, // 4
		1, // 5
		1, // 6
		2, // 7
		1, // 8
		1, // 9
		2, // 10
		1, // 11
		2, // 12
		4, // 13
		1, // 14
		1, // 15
		4, // 16
		1, // 17
		1, // 18
		2, // 19
		1, // 20
	},
}
var _ = _cover_atomic_.LoadUint32
