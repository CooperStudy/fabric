//line /home/cooper/go/src/github.com/hyperledger/fabric/protos/common/policies.go:1
/*
Copyright IBM Corp. 2017 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

                 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package common; import _cover_atomic_ "sync/atomic"

import (
	"fmt"

	"github.com/golang/protobuf/proto"
)

func (p *Policy) VariablyOpaqueFields() []string {_cover_atomic_.AddUint32(&GoCover_9_643434343036656265656166.Count[0], 1);
	return []string{"value"}
}

func (p *Policy) VariablyOpaqueFieldProto(name string) (proto.Message, error) {_cover_atomic_.AddUint32(&GoCover_9_643434343036656265656166.Count[1], 1);
	if name != p.VariablyOpaqueFields()[0] {_cover_atomic_.AddUint32(&GoCover_9_643434343036656265656166.Count[3], 1);
		return nil, fmt.Errorf("not a marshaled field: %s", name)
	}
	_cover_atomic_.AddUint32(&GoCover_9_643434343036656265656166.Count[2], 1);switch p.Type {
	case int32(Policy_SIGNATURE):_cover_atomic_.AddUint32(&GoCover_9_643434343036656265656166.Count[4], 1);
		return &SignaturePolicyEnvelope{}, nil
	case int32(Policy_IMPLICIT_META):_cover_atomic_.AddUint32(&GoCover_9_643434343036656265656166.Count[5], 1);
		return &ImplicitMetaPolicy{}, nil
	default:_cover_atomic_.AddUint32(&GoCover_9_643434343036656265656166.Count[6], 1);
		return nil, fmt.Errorf("unable to decode policy type: %v", p.Type)
	}
}

var GoCover_9_643434343036656265656166 = struct {
	Count     [7]uint32
	Pos       [3 * 7]uint32
	NumStmt   [7]uint16
} {
	Pos: [3 * 7]uint32{
		25, 27, 0x20032, // [0]
		29, 30, 0x29004f, // [1]
		33, 33, 0x100002, // [2]
		30, 32, 0x30029, // [3]
		34, 35, 0x29001f, // [4]
		36, 37, 0x240023, // [5]
		38, 39, 0x45000a, // [6]
	},
	NumStmt: [7]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
	},
}
var _ = _cover_atomic_.LoadUint32
