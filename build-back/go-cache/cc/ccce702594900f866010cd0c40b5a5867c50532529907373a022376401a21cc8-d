//line /home/cooper/go/src/github.com/hyperledger/fabric/token/transaction/processor.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package transaction; import _cover_atomic_ "sync/atomic"

import (
	"fmt"

	"github.com/hyperledger/fabric/common/flogging"
	"github.com/hyperledger/fabric/core/ledger"
	"github.com/hyperledger/fabric/protos/common"
	"github.com/pkg/errors"
)

var logger = flogging.MustGetLogger("fabtoken-processor")

// Processor implements the interface 'github.com/hyperledger/fabric/core/ledger/customtx/Processor'
// for FabToken transactions
type Processor struct {
	TMSManager TMSManager
}

func (p *Processor) GenerateSimulationResults(txEnv *common.Envelope, simulator ledger.TxSimulator, initializingLedger bool) error {_cover_atomic_.AddUint32(&GoCover_1_316665343130313132303035.Count[0], 1);
	// Extract channel header and token transaction
	ch, ttx, ci, err := UnmarshalTokenTransaction(txEnv.Payload)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_316665343130313132303035.Count[4], 1);
		return errors.WithMessage(err, "failed unmarshalling token transaction")
	}

	// Get a TMSTxProcessor that corresponds to the channel
	_cover_atomic_.AddUint32(&GoCover_1_316665343130313132303035.Count[1], 1);txProcessor, err := p.TMSManager.GetTxProcessor(ch.ChannelId)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_316665343130313132303035.Count[5], 1);
		return errors.WithMessage(err, "failed getting committer")
	}

	// Extract the read dependencies and ledger updates associated to the transaction using simulator
	_cover_atomic_.AddUint32(&GoCover_1_316665343130313132303035.Count[2], 1);err = txProcessor.ProcessTx(ch.TxId, ci, ttx, simulator)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_316665343130313132303035.Count[6], 1);
		return errors.WithMessage(err, fmt.Sprintf("failed committing transaction for channel %s", ch.ChannelId))
	}

	_cover_atomic_.AddUint32(&GoCover_1_316665343130313132303035.Count[3], 1);return err
}

var GoCover_1_316665343130313132303035 = struct {
	Count     [7]uint32
	Pos       [3 * 7]uint32
	NumStmt   [7]uint16
} {
	Pos: [3 * 7]uint32{
		26, 29, 0x100084, // [0]
		34, 35, 0x100002, // [1]
		40, 41, 0x100002, // [2]
		45, 45, 0xc0002, // [3]
		29, 31, 0x30010, // [4]
		35, 37, 0x30010, // [5]
		41, 43, 0x30010, // [6]
	},
	NumStmt: [7]uint16{
		2, // 0
		2, // 1
		2, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
	},
}
var _ = _cover_atomic_.LoadUint32
