//line /home/cooper/go/src/github.com/hyperledger/fabric/orderer/common/cluster/service.go:1
/*
Copyright IBM Corp. 2017 All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package cluster; import _cover_atomic_ "sync/atomic"

import (
	"context"
	"io"

	"github.com/hyperledger/fabric/common/flogging"
	"github.com/hyperledger/fabric/common/util"
	"github.com/hyperledger/fabric/protos/orderer"
	"google.golang.org/grpc"
)

//go:generate mockery -dir . -name Dispatcher -case underscore -output ./mocks/

// Dispatcher dispatches requests
type Dispatcher interface {
	DispatchSubmit(ctx context.Context, request *orderer.SubmitRequest) (*orderer.SubmitResponse, error)
	DispatchStep(ctx context.Context, request *orderer.StepRequest) (*orderer.StepResponse, error)
}

//go:generate mockery -dir . -name SubmitStream -case underscore -output ./mocks/

// SubmitStream defines the gRPC stream for sending
// transactions, and receiving corresponding responses
type SubmitStream interface {
	Send(response *orderer.SubmitResponse) error
	Recv() (*orderer.SubmitRequest, error)
	grpc.ServerStream
}

// Service defines the raft Service
type Service struct {
	Dispatcher Dispatcher
	Logger     *flogging.FabricLogger
	StepLogger *flogging.FabricLogger
}

// Step forwards a message to a raft FSM located in this server
func (s *Service) Step(ctx context.Context, request *orderer.StepRequest) (*orderer.StepResponse, error) {_cover_atomic_.AddUint32(&GoCover_5_363733313532663932376566.Count[0], 1);
	addr := util.ExtractRemoteAddress(ctx)
	s.StepLogger.Debugf("Connection from %s", addr)
	defer s.StepLogger.Debugf("Closing connection from %s", addr)
	response, err := s.Dispatcher.DispatchStep(ctx, request)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_5_363733313532663932376566.Count[2], 1);
		s.Logger.Warningf("Handling of Step() from %s failed: %+v", addr, err)
	}
	_cover_atomic_.AddUint32(&GoCover_5_363733313532663932376566.Count[1], 1);return response, err
}

// Submit accepts transactions
func (s *Service) Submit(stream orderer.Cluster_SubmitServer) error {_cover_atomic_.AddUint32(&GoCover_5_363733313532663932376566.Count[3], 1);
	addr := util.ExtractRemoteAddress(stream.Context())
	s.Logger.Debugf("Connection from %s", addr)
	defer s.Logger.Debugf("Closing connection from %s", addr)
	for {_cover_atomic_.AddUint32(&GoCover_5_363733313532663932376566.Count[4], 1);
		err := s.handleSubmit(stream, addr)
		if err == io.EOF {_cover_atomic_.AddUint32(&GoCover_5_363733313532663932376566.Count[6], 1);
			s.Logger.Debugf("%s disconnected", addr)
			return nil
		}
		_cover_atomic_.AddUint32(&GoCover_5_363733313532663932376566.Count[5], 1);if err != nil {_cover_atomic_.AddUint32(&GoCover_5_363733313532663932376566.Count[7], 1);
			return err
		}
		// Else, no error occurred, so we continue to the next iteration
	}
}

func (s *Service) handleSubmit(stream SubmitStream, addr string) error {_cover_atomic_.AddUint32(&GoCover_5_363733313532663932376566.Count[8], 1);
	request, err := stream.Recv()
	if err == io.EOF {_cover_atomic_.AddUint32(&GoCover_5_363733313532663932376566.Count[13], 1);
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_5_363733313532663932376566.Count[9], 1);if err != nil {_cover_atomic_.AddUint32(&GoCover_5_363733313532663932376566.Count[14], 1);
		s.Logger.Warningf("Stream read from %s failed: %v", addr, err)
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_5_363733313532663932376566.Count[10], 1);response, err := s.Dispatcher.DispatchSubmit(stream.Context(), request)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_5_363733313532663932376566.Count[15], 1);
		s.Logger.Warningf("Handling of Propose() from %s failed: %+v", addr, err)
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_5_363733313532663932376566.Count[11], 1);err = stream.Send(response)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_5_363733313532663932376566.Count[16], 1);
		s.Logger.Warningf("Send() failed: %v", err)
	}
	_cover_atomic_.AddUint32(&GoCover_5_363733313532663932376566.Count[12], 1);return err
}

var GoCover_5_363733313532663932376566 = struct {
	Count     [17]uint32
	Pos       [3 * 17]uint32
	NumStmt   [17]uint16
} {
	Pos: [3 * 17]uint32{
		45, 50, 0x10006a, // [0]
		53, 53, 0x160002, // [1]
		50, 52, 0x30010, // [2]
		57, 61, 0x60045, // [3]
		61, 63, 0x140006, // [4]
		67, 67, 0x110003, // [5]
		63, 66, 0x40014, // [6]
		67, 69, 0x40011, // [7]
		74, 76, 0x130048, // [8]
		79, 79, 0x100002, // [9]
		83, 84, 0x100002, // [10]
		88, 89, 0x100002, // [11]
		92, 92, 0xc0002, // [12]
		76, 78, 0x30013, // [13]
		79, 82, 0x30010, // [14]
		84, 87, 0x30010, // [15]
		89, 91, 0x30010, // [16]
	},
	NumStmt: [17]uint16{
		5, // 0
		1, // 1
		1, // 2
		4, // 3
		2, // 4
		1, // 5
		2, // 6
		1, // 7
		2, // 8
		1, // 9
		2, // 10
		2, // 11
		1, // 12
		1, // 13
		2, // 14
		2, // 15
		1, // 16
	},
}
var _ = _cover_atomic_.LoadUint32
