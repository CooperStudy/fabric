//line /home/cooper/go/src/github.com/hyperledger/fabric/common/util/net.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package util; import _cover_atomic_ "sync/atomic"

import (
	"context"

	"google.golang.org/grpc/peer"
)

func ExtractRemoteAddress(ctx context.Context) string {_cover_atomic_.AddUint32(&GoCover_0_356631643333376535366331.Count[0], 1);
	var remoteAddress string
	p, ok := peer.FromContext(ctx)
	if !ok {_cover_atomic_.AddUint32(&GoCover_0_356631643333376535366331.Count[3], 1);
		return ""
	}
	_cover_atomic_.AddUint32(&GoCover_0_356631643333376535366331.Count[1], 1);if address := p.Addr; address != nil {_cover_atomic_.AddUint32(&GoCover_0_356631643333376535366331.Count[4], 1);
		remoteAddress = address.String()
	}
	_cover_atomic_.AddUint32(&GoCover_0_356631643333376535366331.Count[2], 1);return remoteAddress
}

var GoCover_0_356631643333376535366331 = struct {
	Count     [5]uint32
	Pos       [3 * 5]uint32
	NumStmt   [5]uint16
} {
	Pos: [3 * 5]uint32{
		15, 18, 0x90037, // [0]
		21, 21, 0x270002, // [1]
		24, 24, 0x160002, // [2]
		18, 20, 0x30009, // [3]
		21, 23, 0x30027, // [4]
	},
	NumStmt: [5]uint16{
		3, // 0
		1, // 1
		1, // 2
		1, // 3
		1, // 4
	},
}
var _ = _cover_atomic_.LoadUint32
