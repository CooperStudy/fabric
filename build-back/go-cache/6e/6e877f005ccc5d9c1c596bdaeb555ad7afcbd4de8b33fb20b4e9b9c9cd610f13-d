//line /home/cooper/go/src/github.com/hyperledger/fabric/core/chaincode/query_response_generator.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package chaincode; import _cover_atomic_ "sync/atomic"

import (
	"github.com/golang/protobuf/proto"
	commonledger "github.com/hyperledger/fabric/common/ledger"
	pb "github.com/hyperledger/fabric/protos/peer"
)

type QueryResponseGenerator struct {
	MaxResultLimit int
}

// BuildQueryResponse takes an iterator and fetch state to construct QueryResponse
func (q *QueryResponseGenerator) BuildQueryResponse(txContext *TransactionContext, iter commonledger.ResultsIterator,
	iterID string, isPaginated bool, totalReturnLimit int32) (*pb.QueryResponse, error) {_cover_atomic_.AddUint32(&GoCover_9_323839383963343337363361.Count[0], 1);

	pendingQueryResults := txContext.GetPendingQueryResult(iterID)
	totalReturnCount := txContext.GetTotalReturnCount(iterID)

	for {_cover_atomic_.AddUint32(&GoCover_9_323839383963343337363361.Count[1], 1);
		// if the total count has been reached, return the result and prevent the Next() being called
		if *totalReturnCount >= totalReturnLimit {_cover_atomic_.AddUint32(&GoCover_9_323839383963343337363361.Count[3], 1);
			return createQueryResponse(txContext, iterID, isPaginated, pendingQueryResults, *totalReturnCount)
		}

		_cover_atomic_.AddUint32(&GoCover_9_323839383963343337363361.Count[2], 1);queryResult, err := iter.Next()
		switch {
		case err != nil:_cover_atomic_.AddUint32(&GoCover_9_323839383963343337363361.Count[4], 1);
			chaincodeLogger.Errorf("Failed to get query result from iterator")
			txContext.CleanupQueryContext(iterID)
			return nil, err

		case queryResult == nil:_cover_atomic_.AddUint32(&GoCover_9_323839383963343337363361.Count[5], 1);

			return createQueryResponse(txContext, iterID, isPaginated, pendingQueryResults, *totalReturnCount)

		case !isPaginated && pendingQueryResults.Size() == q.MaxResultLimit:_cover_atomic_.AddUint32(&GoCover_9_323839383963343337363361.Count[6], 1);
			// if explicit pagination is not used
			// if the max number of results is queued up, cut batch, then add current result to pending batch
			// MaxResultLimit is for batching between chaincode shim and handler
			// MaxResultLimit does not limit the records returned to the client
			batch := pendingQueryResults.Cut()
			if err := pendingQueryResults.Add(queryResult); err != nil {_cover_atomic_.AddUint32(&GoCover_9_323839383963343337363361.Count[10], 1);
				txContext.CleanupQueryContext(iterID)
				return nil, err
			}
			_cover_atomic_.AddUint32(&GoCover_9_323839383963343337363361.Count[7], 1);*totalReturnCount++
			return &pb.QueryResponse{Results: batch, HasMore: true, Id: iterID}, nil

		default:_cover_atomic_.AddUint32(&GoCover_9_323839383963343337363361.Count[8], 1);
			if err := pendingQueryResults.Add(queryResult); err != nil {_cover_atomic_.AddUint32(&GoCover_9_323839383963343337363361.Count[11], 1);
				txContext.CleanupQueryContext(iterID)
				return nil, err
			}
			_cover_atomic_.AddUint32(&GoCover_9_323839383963343337363361.Count[9], 1);*totalReturnCount++
		}
	}
}

func createQueryResponse(txContext *TransactionContext, iterID string, isPaginated bool, pendingQueryResults *PendingQueryResult, totalReturnCount int32) (*pb.QueryResponse, error) {_cover_atomic_.AddUint32(&GoCover_9_323839383963343337363361.Count[12], 1);

	batch := pendingQueryResults.Cut()

	if isPaginated {_cover_atomic_.AddUint32(&GoCover_9_323839383963343337363361.Count[14], 1);
		// when explicit pagination is enabled, return the batch with the responseMetadata
		bookmark := txContext.CleanupQueryContextWithBookmark(iterID)
		responseMetadata := createResponseMetadata(totalReturnCount, bookmark)
		responseMetadataBytes, err := proto.Marshal(responseMetadata)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_9_323839383963343337363361.Count[16], 1);
			return nil, err
		}
		_cover_atomic_.AddUint32(&GoCover_9_323839383963343337363361.Count[15], 1);return &pb.QueryResponse{Results: batch, HasMore: false, Id: iterID, Metadata: responseMetadataBytes}, nil
	}

	// if explicit pagination is not used, then the end of the resultset has been reached, return the batch
	_cover_atomic_.AddUint32(&GoCover_9_323839383963343337363361.Count[13], 1);txContext.CleanupQueryContext(iterID)
	return &pb.QueryResponse{Results: batch, HasMore: false, Id: iterID}, nil

}

func createResponseMetadata(returnCount int32, bookmark string) *pb.QueryResponseMetadata {_cover_atomic_.AddUint32(&GoCover_9_323839383963343337363361.Count[17], 1);
	responseMetadata := &pb.QueryResponseMetadata{}
	responseMetadata.Bookmark = bookmark
	responseMetadata.FetchedRecordsCount = int32(returnCount)
	return responseMetadata
}

var GoCover_9_323839383963343337363361 = struct {
	Count     [18]uint32
	Pos       [3 * 18]uint32
	NumStmt   [18]uint16
} {
	Pos: [3 * 18]uint32{
		21, 26, 0x60056, // [0]
		26, 28, 0x2c0006, // [1]
		32, 33, 0xa0003, // [2]
		28, 30, 0x4002c, // [3]
		34, 37, 0x130013, // [4]
		39, 41, 0x66001b, // [5]
		43, 49, 0x3f0047, // [6]
		53, 54, 0x4c0004, // [7]
		56, 57, 0x3f000b, // [8]
		61, 61, 0x170004, // [9]
		49, 52, 0x5003f, // [10]
		57, 60, 0x5003f, // [11]
		66, 70, 0x1100b6, // [12]
		82, 83, 0x4b0002, // [13]
		70, 75, 0x110011, // [14]
		78, 78, 0x6d0003, // [15]
		75, 77, 0x40011, // [16]
		87, 92, 0x2005b, // [17]
	},
	NumStmt: [18]uint16{
		3, // 0
		1, // 1
		2, // 2
		1, // 3
		3, // 4
		1, // 5
		2, // 6
		2, // 7
		1, // 8
		1, // 9
		2, // 10
		2, // 11
		2, // 12
		2, // 13
		4, // 14
		1, // 15
		1, // 16
		4, // 17
	},
}
var _ = _cover_atomic_.LoadUint32
