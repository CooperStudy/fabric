//line /home/cooper/go/src/github.com/hyperledger/fabric/common/semaphore/semaphore.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package semaphore; import _cover_atomic_ "sync/atomic"

import "context"

type Semaphore chan struct{}

func New(count int) Semaphore {_cover_atomic_.AddUint32(&GoCover_0_303363316363363766633064.Count[0], 1);
	if count <= 0 {_cover_atomic_.AddUint32(&GoCover_0_303363316363363766633064.Count[2], 1);
		panic("count must be greater than 0")
	}
	_cover_atomic_.AddUint32(&GoCover_0_303363316363363766633064.Count[1], 1);return make(chan struct{}, count)
}

func (s Semaphore) Acquire(ctx context.Context) error {_cover_atomic_.AddUint32(&GoCover_0_303363316363363766633064.Count[3], 1);
	select {
	case <-ctx.Done():_cover_atomic_.AddUint32(&GoCover_0_303363316363363766633064.Count[4], 1);
		return ctx.Err()
	case s <- struct{}{}:_cover_atomic_.AddUint32(&GoCover_0_303363316363363766633064.Count[5], 1);
		return nil
	}
}

func (s Semaphore) Release() {_cover_atomic_.AddUint32(&GoCover_0_303363316363363766633064.Count[6], 1);
	select {
	case <-s:_cover_atomic_.AddUint32(&GoCover_0_303363316363363766633064.Count[7], 1);
	default:_cover_atomic_.AddUint32(&GoCover_0_303363316363363766633064.Count[8], 1);
		panic("semaphore buffer is empty")
	}
}

var GoCover_0_303363316363363766633064 = struct {
	Count     [9]uint32
	Pos       [3 * 9]uint32
	NumStmt   [9]uint16
} {
	Pos: [3 * 9]uint32{
		13, 14, 0x10001f, // [0]
		17, 17, 0x230002, // [1]
		14, 15, 0x280010, // [2]
		20, 21, 0x90037, // [3]
		22, 23, 0x130014, // [4]
		24, 25, 0xd0017, // [5]
		29, 30, 0x9001e, // [6]
		31, 31, 0xb000b, // [7]
		32, 33, 0x25000a, // [8]
	},
	NumStmt: [9]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
		1, // 6
		0, // 7
		1, // 8
	},
}
var _ = _cover_atomic_.LoadUint32
