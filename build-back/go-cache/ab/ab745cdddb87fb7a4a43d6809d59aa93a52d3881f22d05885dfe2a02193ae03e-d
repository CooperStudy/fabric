//line /home/cooper/go/src/github.com/hyperledger/fabric/core/ledger/ledgermgmt/ledger_mgmt.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package ledgermgmt; import _cover_atomic_ "sync/atomic"

import (
	"bytes"
	"sync"

	"github.com/hyperledger/fabric/common/flogging"
	"github.com/hyperledger/fabric/common/metrics"
	"github.com/hyperledger/fabric/core/chaincode/platforms"
	"github.com/hyperledger/fabric/core/common/ccprovider"
	"github.com/hyperledger/fabric/core/ledger"
	"github.com/hyperledger/fabric/core/ledger/cceventmgmt"
	"github.com/hyperledger/fabric/core/ledger/customtx"
	"github.com/hyperledger/fabric/core/ledger/kvledger"
	"github.com/hyperledger/fabric/protos/common"
	"github.com/hyperledger/fabric/protos/utils"
	"github.com/pkg/errors"
)

var logger = flogging.MustGetLogger("ledgermgmt")

// ErrLedgerAlreadyOpened is thrown by a CreateLedger call if a ledger with the given id is already opened
var ErrLedgerAlreadyOpened = errors.New("ledger already opened")

// ErrLedgerMgmtNotInitialized is thrown when ledger mgmt is used before initializing this
var ErrLedgerMgmtNotInitialized = errors.New("ledger mgmt should be initialized before using")

var openedLedgers map[string]ledger.PeerLedger
var ledgerProvider ledger.PeerLedgerProvider
var lock sync.Mutex
var initialized bool
var once sync.Once

// Initializer encapsulates all the external dependencies for the ledger module
type Initializer struct {
	CustomTxProcessors            customtx.Processors
	PlatformRegistry              *platforms.Registry
	DeployedChaincodeInfoProvider ledger.DeployedChaincodeInfoProvider
	MembershipInfoProvider        ledger.MembershipInfoProvider
	MetricsProvider               metrics.Provider
}

// Initialize initializes ledgermgmt
func Initialize(initializer *Initializer) {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[0], 1);
	once.Do(func() {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[1], 1);
		initialize(initializer)
	})
}

func initialize(initializer *Initializer) {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[2], 1);
	logger.Info("Initializing ledger mgmt")
	lock.Lock()
	defer lock.Unlock()
	initialized = true
	openedLedgers = make(map[string]ledger.PeerLedger)
	customtx.Initialize(initializer.CustomTxProcessors)
	cceventmgmt.Initialize(&chaincodeInfoProviderImpl{
		initializer.PlatformRegistry,
		initializer.DeployedChaincodeInfoProvider,
	})
	finalStateListeners := addListenerForCCEventsHandler(initializer.DeployedChaincodeInfoProvider, []ledger.StateListener{})
	provider, err := kvledger.NewProvider()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[4], 1);
		panic(errors.WithMessage(err, "Error in instantiating ledger provider"))
	}
	_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[3], 1);provider.Initialize(&ledger.Initializer{
		StateListeners:                finalStateListeners,
		DeployedChaincodeInfoProvider: initializer.DeployedChaincodeInfoProvider,
		MembershipInfoProvider:        initializer.MembershipInfoProvider,
		MetricsProvider:               initializer.MetricsProvider,
	})
	ledgerProvider = provider
	logger.Info("ledger mgmt initialized")
}

// CreateLedger creates a new ledger with the given genesis block.
// This function guarantees that the creation of ledger and committing the genesis block would an atomic action
// The chain id retrieved from the genesis block is treated as a ledger id
func CreateLedger(genesisBlock *common.Block) (ledger.PeerLedger, error) {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[5], 1);
	lock.Lock()
	defer lock.Unlock()
	if !initialized {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[9], 1);
		return nil, ErrLedgerMgmtNotInitialized
	}
	_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[6], 1);id, err := utils.GetChainIDFromBlock(genesisBlock)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[10], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[7], 1);logger.Infof("Creating ledger [%s] with genesis block", id)
	l, err := ledgerProvider.Create(genesisBlock)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[11], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[8], 1);l = wrapLedger(id, l)
	openedLedgers[id] = l
	logger.Infof("Created ledger [%s] with genesis block", id)
	return l, nil
}

// OpenLedger returns a ledger for the given id
func OpenLedger(id string) (ledger.PeerLedger, error) {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[12], 1);
	logger.Infof("Opening ledger with id = %s", id)
	lock.Lock()
	defer lock.Unlock()
	if !initialized {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[16], 1);
		return nil, ErrLedgerMgmtNotInitialized
	}
	_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[13], 1);l, ok := openedLedgers[id]
	if ok {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[17], 1);
		return nil, ErrLedgerAlreadyOpened
	}
	_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[14], 1);l, err := ledgerProvider.Open(id)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[18], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[15], 1);l = wrapLedger(id, l)
	openedLedgers[id] = l
	logger.Infof("Opened ledger with id = %s", id)
	return l, nil
}

// GetLedgerIDs returns the ids of the ledgers created
func GetLedgerIDs() ([]string, error) {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[19], 1);
	lock.Lock()
	defer lock.Unlock()
	if !initialized {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[21], 1);
		return nil, ErrLedgerMgmtNotInitialized
	}
	_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[20], 1);return ledgerProvider.List()
}

// Close closes all the opened ledgers and any resources held for ledger management
func Close() {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[22], 1);
	logger.Infof("Closing ledger mgmt")
	lock.Lock()
	defer lock.Unlock()
	if !initialized {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[25], 1);
		return
	}
	_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[23], 1);for _, l := range openedLedgers {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[26], 1);
		l.(*closableLedger).closeWithoutLock()
	}
	_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[24], 1);ledgerProvider.Close()
	openedLedgers = nil
	logger.Infof("ledger mgmt closed")
}

func wrapLedger(id string, l ledger.PeerLedger) ledger.PeerLedger {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[27], 1);
	return &closableLedger{id, l}
}

// closableLedger extends from actual validated ledger and overwrites the Close method
type closableLedger struct {
	id string
	ledger.PeerLedger
}

// Close closes the actual ledger and removes the entries from opened ledgers map
func (l *closableLedger) Close() {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[28], 1);
	lock.Lock()
	defer lock.Unlock()
	l.closeWithoutLock()
}

func (l *closableLedger) closeWithoutLock() {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[29], 1);
	l.PeerLedger.Close()
	delete(openedLedgers, l.id)
}

// lscc namespace listener for chaincode instantiate transactions (which manipulates data in 'lscc' namespace)
// this code should be later moved to peer and passed via `Initialize` function of ledgermgmt
func addListenerForCCEventsHandler(
	deployedCCInfoProvider ledger.DeployedChaincodeInfoProvider,
	stateListeners []ledger.StateListener) []ledger.StateListener {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[30], 1);
	return append(stateListeners, &cceventmgmt.KVLedgerLSCCStateListener{DeployedChaincodeInfoProvider: deployedCCInfoProvider})
}

// chaincodeInfoProviderImpl implements interface cceventmgmt.ChaincodeInfoProvider
type chaincodeInfoProviderImpl struct {
	pr                     *platforms.Registry
	deployedCCInfoProvider ledger.DeployedChaincodeInfoProvider
}

// GetDeployedChaincodeInfo implements function in the interface cceventmgmt.ChaincodeInfoProvider
func (p *chaincodeInfoProviderImpl) GetDeployedChaincodeInfo(chainid string,
	chaincodeDefinition *cceventmgmt.ChaincodeDefinition) (*ledger.DeployedChaincodeInfo, error) {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[31], 1);
	lock.Lock()
	ledger := openedLedgers[chainid]
	lock.Unlock()
	if ledger == nil {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[36], 1);
		return nil, errors.Errorf("Ledger not opened [%s]", chainid)
	}
	_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[32], 1);qe, err := ledger.NewQueryExecutor()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[37], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[33], 1);defer qe.Done()
	deployedChaincodeInfo, err := p.deployedCCInfoProvider.ChaincodeInfo(chaincodeDefinition.Name, qe)
	if err != nil || deployedChaincodeInfo == nil {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[38], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[34], 1);if deployedChaincodeInfo.Version != chaincodeDefinition.Version ||
		!bytes.Equal(deployedChaincodeInfo.Hash, chaincodeDefinition.Hash) {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[39], 1);
		// if the deployed chaincode with the given name has different version or different hash, return nil
		return nil, nil
	}
	_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[35], 1);return deployedChaincodeInfo, nil
}

// RetrieveChaincodeArtifacts implements function in the interface cceventmgmt.ChaincodeInfoProvider
func (p *chaincodeInfoProviderImpl) RetrieveChaincodeArtifacts(chaincodeDefinition *cceventmgmt.ChaincodeDefinition) (installed bool, dbArtifactsTar []byte, err error) {_cover_atomic_.AddUint32(&GoCover_0_303661326266333033313235.Count[40], 1);
	return ccprovider.ExtractStatedbArtifactsForChaincode(chaincodeDefinition.Name, chaincodeDefinition.Version, p.pr)
}

var GoCover_0_303661326266333033313235 = struct {
	Count     [41]uint32
	Pos       [3 * 41]uint32
	NumStmt   [41]uint16
} {
	Pos: [3 * 41]uint32{
		50, 51, 0x11002b, // [0]
		51, 53, 0x30011, // [1]
		56, 69, 0x10002b, // [2]
		72, 79, 0x280002, // [3]
		69, 70, 0x4b0010, // [4]
		85, 88, 0x12004a, // [5]
		91, 92, 0x100002, // [6]
		96, 98, 0x100002, // [7]
		101, 104, 0xf0002, // [8]
		88, 90, 0x30012, // [9]
		92, 94, 0x30010, // [10]
		98, 100, 0x30010, // [11]
		108, 112, 0x120037, // [12]
		115, 116, 0x80002, // [13]
		119, 120, 0x100002, // [14]
		123, 126, 0xf0002, // [15]
		112, 114, 0x30012, // [16]
		116, 118, 0x30008, // [17]
		120, 122, 0x30010, // [18]
		130, 133, 0x120027, // [19]
		136, 136, 0x1e0002, // [20]
		133, 135, 0x30012, // [21]
		140, 144, 0x12000e, // [22]
		147, 147, 0x220002, // [23]
		150, 152, 0x240002, // [24]
		144, 146, 0x30012, // [25]
		147, 149, 0x30022, // [26]
		155, 157, 0x20043, // [27]
		166, 170, 0x20022, // [28]
		172, 175, 0x2002d, // [29]
		181, 183, 0x20040, // [30]
		193, 197, 0x13005f, // [31]
		200, 201, 0x100002, // [32]
		204, 206, 0x300002, // [33]
		209, 210, 0x460002, // [34]
		214, 214, 0x230002, // [35]
		197, 199, 0x30013, // [36]
		201, 203, 0x30010, // [37]
		206, 208, 0x30030, // [38]
		210, 213, 0x30046, // [39]
		218, 220, 0x200a9, // [40]
	},
	NumStmt: [41]uint16{
		1, // 0
		1, // 1
		10, // 2
		3, // 3
		1, // 4
		3, // 5
		2, // 6
		3, // 7
		4, // 8
		1, // 9
		1, // 10
		1, // 11
		4, // 12
		2, // 13
		2, // 14
		4, // 15
		1, // 16
		1, // 17
		1, // 18
		3, // 19
		1, // 20
		1, // 21
		4, // 22
		1, // 23
		3, // 24
		1, // 25
		1, // 26
		1, // 27
		3, // 28
		2, // 29
		1, // 30
		4, // 31
		2, // 32
		3, // 33
		1, // 34
		1, // 35
		1, // 36
		1, // 37
		1, // 38
		1, // 39
		1, // 40
	},
}
var _ = _cover_atomic_.LoadUint32
