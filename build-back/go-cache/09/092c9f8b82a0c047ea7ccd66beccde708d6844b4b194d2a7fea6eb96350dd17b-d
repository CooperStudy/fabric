//line /home/cooper/go/src/github.com/hyperledger/fabric/core/deliverservice/mocks/blocksprovider.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package mocks; import _cover_atomic_ "sync/atomic"

import (
	"context"
	"sync/atomic"

	"github.com/golang/protobuf/proto"
	gossip_common "github.com/hyperledger/fabric/gossip/common"
	"github.com/hyperledger/fabric/gossip/discovery"
	"github.com/hyperledger/fabric/protos/common"
	gossip_proto "github.com/hyperledger/fabric/protos/gossip"
	"github.com/hyperledger/fabric/protos/orderer"
	"github.com/hyperledger/fabric/protos/utils"
	"google.golang.org/grpc"
)

// MockGossipServiceAdapter mocking structure for gossip service, used to initialize
// the blocks providers implementation and asserts the number
// of function calls used.
type MockGossipServiceAdapter struct {
	addPayloadCnt int32

	GossipBlockDisseminations chan uint64
}

type MockAtomicBroadcastClient struct {
	BD *MockBlocksDeliverer
}

func (mabc *MockAtomicBroadcastClient) Broadcast(ctx context.Context, opts ...grpc.CallOption) (orderer.AtomicBroadcast_BroadcastClient, error) {_cover_atomic_.AddUint32(&GoCover_0_613063393561623965343237.Count[0], 1);
	panic("Should not be used")
}
func (mabc *MockAtomicBroadcastClient) Deliver(ctx context.Context, opts ...grpc.CallOption) (orderer.AtomicBroadcast_DeliverClient, error) {_cover_atomic_.AddUint32(&GoCover_0_613063393561623965343237.Count[1], 1);
	return mabc.BD, nil
}

// PeersOfChannel returns the slice with peers participating in given channel
func (*MockGossipServiceAdapter) PeersOfChannel(gossip_common.ChainID) []discovery.NetworkMember {_cover_atomic_.AddUint32(&GoCover_0_613063393561623965343237.Count[2], 1);
	return []discovery.NetworkMember{}
}

// AddPayload adds gossip payload to the local state transfer buffer
func (mock *MockGossipServiceAdapter) AddPayload(chainID string, payload *gossip_proto.Payload) error {_cover_atomic_.AddUint32(&GoCover_0_613063393561623965343237.Count[3], 1);
	atomic.AddInt32(&mock.addPayloadCnt, 1)
	return nil
}

// AddPayloadCount returns the number of times Recv has been called.
func (mock *MockGossipServiceAdapter) AddPayloadCount() int32 {_cover_atomic_.AddUint32(&GoCover_0_613063393561623965343237.Count[4], 1);
	return atomic.LoadInt32(&mock.addPayloadCnt)
}

// Gossip message to the all peers
func (mock *MockGossipServiceAdapter) Gossip(msg *gossip_proto.GossipMessage) {_cover_atomic_.AddUint32(&GoCover_0_613063393561623965343237.Count[5], 1);
	mock.GossipBlockDisseminations <- msg.GetDataMsg().Payload.SeqNum
}

// MockBlocksDeliverer mocking structure of BlocksDeliverer interface to initialize
// the blocks provider implementation
type MockBlocksDeliverer struct {
	DisconnectCalled           chan struct{}
	DisconnectAndDisableCalled chan struct{}
	CloseCalled                chan struct{}
	Pos                        uint64
	grpc.ClientStream
	recvCnt  int32
	MockRecv func(mock *MockBlocksDeliverer) (*orderer.DeliverResponse, error)
}

// Recv gets responses from the ordering service, currently mocked to return
// only one response with empty block.
func (mock *MockBlocksDeliverer) Recv() (*orderer.DeliverResponse, error) {_cover_atomic_.AddUint32(&GoCover_0_613063393561623965343237.Count[6], 1);
	atomic.AddInt32(&mock.recvCnt, 1)
	return mock.MockRecv(mock)
}

// RecvCount returns the number of times Recv has been called.
func (mock *MockBlocksDeliverer) RecvCount() int32 {_cover_atomic_.AddUint32(&GoCover_0_613063393561623965343237.Count[7], 1);
	return atomic.LoadInt32(&mock.recvCnt)
}

// MockRecv mock for the Recv function
func MockRecv(mock *MockBlocksDeliverer) (*orderer.DeliverResponse, error) {_cover_atomic_.AddUint32(&GoCover_0_613063393561623965343237.Count[8], 1);
	pos := mock.Pos

	// Advance position for the next call
	mock.Pos++
	return &orderer.DeliverResponse{
		Type: &orderer.DeliverResponse_Block{
			Block: &common.Block{
				Header: &common.BlockHeader{
					Number:       pos,
					DataHash:     []byte{},
					PreviousHash: []byte{},
				},
				Data: &common.BlockData{
					Data: [][]byte{},
				},
			}},
	}, nil
}

// Send sends the envelope with request for the blocks for ordering service
// currently mocked and not doing anything
func (mock *MockBlocksDeliverer) Send(env *common.Envelope) error {_cover_atomic_.AddUint32(&GoCover_0_613063393561623965343237.Count[9], 1);
	payload, _ := utils.GetPayload(env)
	seekInfo := &orderer.SeekInfo{}

	proto.Unmarshal(payload.Data, seekInfo)

	// Read starting position
	switch t := seekInfo.Start.Type.(type) {
	case *orderer.SeekPosition_Oldest:_cover_atomic_.AddUint32(&GoCover_0_613063393561623965343237.Count[11], 1);
		mock.Pos = 0
	case *orderer.SeekPosition_Specified:_cover_atomic_.AddUint32(&GoCover_0_613063393561623965343237.Count[12], 1);
		mock.Pos = t.Specified.Number
	}
	_cover_atomic_.AddUint32(&GoCover_0_613063393561623965343237.Count[10], 1);return nil
}

func (mock *MockBlocksDeliverer) Disconnect(disableEndpoint bool) {_cover_atomic_.AddUint32(&GoCover_0_613063393561623965343237.Count[13], 1);
	if disableEndpoint {_cover_atomic_.AddUint32(&GoCover_0_613063393561623965343237.Count[14], 1);
		mock.DisconnectAndDisableCalled <- struct{}{}
	} else{ _cover_atomic_.AddUint32(&GoCover_0_613063393561623965343237.Count[15], 1);{
		mock.DisconnectCalled <- struct{}{}
	}}
}

func (mock *MockBlocksDeliverer) Close() {_cover_atomic_.AddUint32(&GoCover_0_613063393561623965343237.Count[16], 1);
	if mock.CloseCalled == nil {_cover_atomic_.AddUint32(&GoCover_0_613063393561623965343237.Count[18], 1);
		return
	}
	_cover_atomic_.AddUint32(&GoCover_0_613063393561623965343237.Count[17], 1);mock.CloseCalled <- struct{}{}
}

func (mock *MockBlocksDeliverer) UpdateEndpoints(endpoints []string) {_cover_atomic_.AddUint32(&GoCover_0_613063393561623965343237.Count[19], 1);

}

func (mock *MockBlocksDeliverer) GetEndpoints() []string {_cover_atomic_.AddUint32(&GoCover_0_613063393561623965343237.Count[20], 1);
	return []string{} // empty slice
}

// MockLedgerInfo mocking implementation of LedgerInfo interface, needed
// for test initialization purposes
type MockLedgerInfo struct {
	Height uint64
}

// LedgerHeight returns mocked value to the ledger height
func (li *MockLedgerInfo) LedgerHeight() (uint64, error) {_cover_atomic_.AddUint32(&GoCover_0_613063393561623965343237.Count[21], 1);
	return atomic.LoadUint64(&li.Height), nil
}

var GoCover_0_613063393561623965343237 = struct {
	Count     [22]uint32
	Pos       [3 * 22]uint32
	NumStmt   [22]uint16
} {
	Pos: [3 * 22]uint32{
		36, 37, 0x1d0091, // [0]
		39, 41, 0x2008d, // [1]
		44, 46, 0x20062, // [2]
		49, 52, 0x20067, // [3]
		55, 57, 0x2003f, // [4]
		60, 62, 0x2004f, // [5]
		78, 81, 0x2004b, // [6]
		84, 86, 0x20034, // [7]
		89, 107, 0x2004c, // [8]
		111, 118, 0x290043, // [9]
		124, 124, 0xc0002, // [10]
		119, 120, 0xf0024, // [11]
		121, 122, 0x200027, // [12]
		127, 128, 0x150043, // [13]
		128, 130, 0x30015, // [14]
		130, 132, 0x30008, // [15]
		135, 136, 0x1d002a, // [16]
		139, 139, 0x200002, // [17]
		136, 138, 0x3001d, // [18]
		142, 144, 0x20047, // [19]
		146, 148, 0x2003a, // [20]
		157, 159, 0x2003a, // [21]
	},
	NumStmt: [22]uint16{
		1, // 0
		1, // 1
		1, // 2
		2, // 3
		1, // 4
		1, // 5
		2, // 6
		1, // 7
		3, // 8
		4, // 9
		1, // 10
		1, // 11
		1, // 12
		1, // 13
		1, // 14
		1, // 15
		1, // 16
		1, // 17
		1, // 18
		0, // 19
		1, // 20
		1, // 21
	},
}
var _ = _cover_atomic_.LoadUint32
