//line /home/cooper/go/src/github.com/hyperledger/fabric/peer/common/peerdeliverclient.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package common; import _cover_atomic_ "sync/atomic"

import (
	"context"

	ccapi "github.com/hyperledger/fabric/peer/chaincode/api"
	pb "github.com/hyperledger/fabric/protos/peer"
	grpc "google.golang.org/grpc"
)

// PeerDeliverClient holds the necessary information to connect a client
// to a peer deliver service
type PeerDeliverClient struct {
	Client pb.DeliverClient
}

// Deliver connects the client to the Deliver RPC
func (dc PeerDeliverClient) Deliver(ctx context.Context, opts ...grpc.CallOption) (ccapi.Deliver, error) {_cover_atomic_.AddUint32(&GoCover_8_393466303334653164333865.Count[0], 1);
	d, err := dc.Client.Deliver(ctx, opts...)
	return d, err
}

// DeliverFiltered connects the client to the DeliverFiltered RPC
func (dc PeerDeliverClient) DeliverFiltered(ctx context.Context, opts ...grpc.CallOption) (ccapi.Deliver, error) {_cover_atomic_.AddUint32(&GoCover_8_393466303334653164333865.Count[1], 1);
	df, err := dc.Client.DeliverFiltered(ctx, opts...)
	return df, err
}

var GoCover_8_393466303334653164333865 = struct {
	Count     [2]uint32
	Pos       [3 * 2]uint32
	NumStmt   [2]uint16
} {
	Pos: [3 * 2]uint32{
		24, 27, 0x2006a, // [0]
		30, 33, 0x20072, // [1]
	},
	NumStmt: [2]uint16{
		2, // 0
		2, // 1
	},
}
var _ = _cover_atomic_.LoadUint32
