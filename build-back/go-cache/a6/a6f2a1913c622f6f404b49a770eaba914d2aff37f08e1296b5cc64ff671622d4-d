//line /home/cooper/go/src/github.com/hyperledger/fabric/cmd/common/signer/signer.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package signer; import _cover_atomic_ "sync/atomic"

import (
	"crypto/ecdsa"
	"crypto/rand"
	"crypto/x509"
	"encoding/asn1"
	"encoding/pem"
	"io/ioutil"
	"math/big"

	"github.com/hyperledger/fabric/bccsp/utils"
	"github.com/hyperledger/fabric/common/util"
	"github.com/hyperledger/fabric/protos/msp"
	proto_utils "github.com/hyperledger/fabric/protos/utils"
	"github.com/pkg/errors"
)

// Config holds the configuration for
// creation of a Signer
type Config struct {
	MSPID        string
	IdentityPath string
	KeyPath      string
}

// Signer signs messages.
// TODO: Ideally we'd use an MSP to be agnostic, but since it's impossible to
// initialize an MSP without a CA cert that signs the signing identity,
// this will do for now.
type Signer struct {
	key     *ecdsa.PrivateKey
	Creator []byte
}

// NewSigner creates a new Signer out of the given configuration
func NewSigner(conf Config) (*Signer, error) {_cover_atomic_.AddUint32(&GoCover_0_396232363766343761343332.Count[0], 1);
	sId, err := serializeIdentity(conf.IdentityPath, conf.MSPID)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_396232363766343761343332.Count[3], 1);
		return nil, errors.WithStack(err)
	}
	_cover_atomic_.AddUint32(&GoCover_0_396232363766343761343332.Count[1], 1);key, err := loadPrivateKey(conf.KeyPath)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_396232363766343761343332.Count[4], 1);
		return nil, errors.WithStack(err)
	}
	_cover_atomic_.AddUint32(&GoCover_0_396232363766343761343332.Count[2], 1);return &Signer{
		Creator: sId,
		key:     key,
	}, nil
}

func serializeIdentity(clientCert string, mspID string) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_0_396232363766343761343332.Count[5], 1);
	b, err := ioutil.ReadFile(clientCert)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_396232363766343761343332.Count[7], 1);
		return nil, errors.WithStack(err)
	}
	_cover_atomic_.AddUint32(&GoCover_0_396232363766343761343332.Count[6], 1);sId := &msp.SerializedIdentity{
		Mspid:   mspID,
		IdBytes: b,
	}
	return proto_utils.MarshalOrPanic(sId), nil
}

func (si *Signer) Sign(msg []byte) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_0_396232363766343761343332.Count[8], 1);
	digest := util.ComputeSHA256(msg)
	return signECDSA(si.key, digest)
}

func loadPrivateKey(file string) (*ecdsa.PrivateKey, error) {_cover_atomic_.AddUint32(&GoCover_0_396232363766343761343332.Count[9], 1);
	b, err := ioutil.ReadFile(file)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_396232363766343761343332.Count[13], 1);
		return nil, errors.WithStack(err)
	}
	_cover_atomic_.AddUint32(&GoCover_0_396232363766343761343332.Count[10], 1);bl, _ := pem.Decode(b)
	if bl == nil {_cover_atomic_.AddUint32(&GoCover_0_396232363766343761343332.Count[14], 1);
		return nil, errors.Errorf("failed to decode PEM block from %s", file)
	}
	_cover_atomic_.AddUint32(&GoCover_0_396232363766343761343332.Count[11], 1);key, err := x509.ParsePKCS8PrivateKey(bl.Bytes)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_396232363766343761343332.Count[15], 1);
		return nil, errors.Wrapf(err, "failed to parse private key from %s", file)
	}
	_cover_atomic_.AddUint32(&GoCover_0_396232363766343761343332.Count[12], 1);return key.(*ecdsa.PrivateKey), nil
}

func signECDSA(k *ecdsa.PrivateKey, digest []byte) (signature []byte, err error) {_cover_atomic_.AddUint32(&GoCover_0_396232363766343761343332.Count[16], 1);
	r, s, err := ecdsa.Sign(rand.Reader, k, digest)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_396232363766343761343332.Count[19], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_0_396232363766343761343332.Count[17], 1);s, _, err = utils.ToLowS(&k.PublicKey, s)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_396232363766343761343332.Count[20], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_0_396232363766343761343332.Count[18], 1);return marshalECDSASignature(r, s)
}

func marshalECDSASignature(r, s *big.Int) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_0_396232363766343761343332.Count[21], 1);
	return asn1.Marshal(ECDSASignature{r, s})
}

type ECDSASignature struct {
	R, S *big.Int
}

var GoCover_0_396232363766343761343332 = struct {
	Count     [22]uint32
	Pos       [3 * 22]uint32
	NumStmt   [22]uint16
} {
	Pos: [3 * 22]uint32{
		43, 45, 0x10002e, // [0]
		48, 49, 0x100002, // [1]
		52, 55, 0x80002, // [2]
		45, 47, 0x30010, // [3]
		49, 51, 0x30010, // [4]
		58, 60, 0x100049, // [5]
		63, 67, 0x2d0002, // [6]
		60, 62, 0x30010, // [7]
		70, 73, 0x20034, // [8]
		75, 77, 0x10003d, // [9]
		80, 81, 0xf0002, // [10]
		84, 85, 0x100002, // [11]
		88, 88, 0x250002, // [12]
		77, 79, 0x30010, // [13]
		81, 83, 0x3000f, // [14]
		85, 87, 0x30010, // [15]
		91, 93, 0x100052, // [16]
		97, 98, 0x100002, // [17]
		102, 102, 0x240002, // [18]
		93, 95, 0x30010, // [19]
		98, 100, 0x30010, // [20]
		105, 107, 0x2003b, // [21]
	},
	NumStmt: [22]uint16{
		2, // 0
		2, // 1
		1, // 2
		1, // 3
		1, // 4
		2, // 5
		2, // 6
		1, // 7
		2, // 8
		2, // 9
		2, // 10
		2, // 11
		1, // 12
		1, // 13
		1, // 14
		1, // 15
		2, // 16
		2, // 17
		1, // 18
		1, // 19
		1, // 20
		1, // 21
	},
}
var _ = _cover_atomic_.LoadUint32
