//line /home/cooper/go/src/github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/privacyenabledstate/test_exports.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package privacyenabledstate; import _cover_atomic_ "sync/atomic"

import (
	"fmt"
	"os"
	"testing"
	"time"

	"github.com/hyperledger/fabric/common/metrics/disabled"
	"github.com/hyperledger/fabric/core/ledger/kvledger/bookkeeping"
	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/statedb/statecouchdb"
	"github.com/hyperledger/fabric/core/ledger/ledgerconfig"
	"github.com/hyperledger/fabric/integration/runner"
	"github.com/spf13/viper"
	"github.com/stretchr/testify/assert"
)

// TestEnv - an interface that a test environment implements
type TestEnv interface {
	Init(t testing.TB)
	GetDBHandle(id string) DB
	GetName() string
	Cleanup()
}

// Tests will be run against each environment in this array
// For example, to skip CouchDB tests, remove &couchDBLockBasedEnv{}
//var testEnvs = []testEnv{&levelDBCommonStorageTestEnv{}, &couchDBCommonStorageTestEnv{}}
var testEnvs = []TestEnv{&LevelDBCommonStorageTestEnv{}, &CouchDBCommonStorageTestEnv{}}

///////////// LevelDB Environment //////////////

// LevelDBCommonStorageTestEnv implements TestEnv interface for leveldb based storage
type LevelDBCommonStorageTestEnv struct {
	t                 testing.TB
	provider          DBProvider
	bookkeeperTestEnv *bookkeeping.TestEnv
}

// Init implements corresponding function from interface TestEnv
func (env *LevelDBCommonStorageTestEnv) Init(t testing.TB) {_cover_atomic_.AddUint32(&GoCover_3_626362383230316436633863.Count[0], 1);
	viper.Set("ledger.state.stateDatabase", "")
	removeDBPath(t)
	env.bookkeeperTestEnv = bookkeeping.NewTestEnv(t)
	dbProvider, err := NewCommonStorageDBProvider(env.bookkeeperTestEnv.TestProvider, &disabled.Provider{})
	assert.NoError(t, err)
	env.t = t
	env.provider = dbProvider
}

// GetDBHandle implements corresponding function from interface TestEnv
func (env *LevelDBCommonStorageTestEnv) GetDBHandle(id string) DB {_cover_atomic_.AddUint32(&GoCover_3_626362383230316436633863.Count[1], 1);
	db, err := env.provider.GetDBHandle(id)
	assert.NoError(env.t, err)
	return db
}

// GetName implements corresponding function from interface TestEnv
func (env *LevelDBCommonStorageTestEnv) GetName() string {_cover_atomic_.AddUint32(&GoCover_3_626362383230316436633863.Count[2], 1);
	return "levelDBCommonStorageTestEnv"
}

// Cleanup implements corresponding function from interface TestEnv
func (env *LevelDBCommonStorageTestEnv) Cleanup() {_cover_atomic_.AddUint32(&GoCover_3_626362383230316436633863.Count[3], 1);
	env.provider.Close()
	env.bookkeeperTestEnv.Cleanup()
	removeDBPath(env.t)
}

///////////// CouchDB Environment //////////////

// CouchDBCommonStorageTestEnv implements TestEnv interface for couchdb based storage
type CouchDBCommonStorageTestEnv struct {
	t                 testing.TB
	provider          DBProvider
	bookkeeperTestEnv *bookkeeping.TestEnv
	couchCleanup      func()
}

func (env *CouchDBCommonStorageTestEnv) setupCouch() string {_cover_atomic_.AddUint32(&GoCover_3_626362383230316436633863.Count[4], 1);
	externalCouch, set := os.LookupEnv("COUCHDB_ADDR")
	if set {_cover_atomic_.AddUint32(&GoCover_3_626362383230316436633863.Count[8], 1);
		env.couchCleanup = func() {_cover_atomic_.AddUint32(&GoCover_3_626362383230316436633863.Count[10], 1);}
		_cover_atomic_.AddUint32(&GoCover_3_626362383230316436633863.Count[9], 1);return externalCouch
	}

	_cover_atomic_.AddUint32(&GoCover_3_626362383230316436633863.Count[5], 1);couchDB := &runner.CouchDB{}
	if err := couchDB.Start(); err != nil {_cover_atomic_.AddUint32(&GoCover_3_626362383230316436633863.Count[11], 1);
		err := fmt.Errorf("failed to start couchDB: %s", err)
		panic(err)
	}
	_cover_atomic_.AddUint32(&GoCover_3_626362383230316436633863.Count[6], 1);env.couchCleanup = func() {_cover_atomic_.AddUint32(&GoCover_3_626362383230316436633863.Count[12], 1); couchDB.Stop() }
	_cover_atomic_.AddUint32(&GoCover_3_626362383230316436633863.Count[7], 1);return couchDB.Address()
}

// Init implements corresponding function from interface TestEnv
func (env *CouchDBCommonStorageTestEnv) Init(t testing.TB) {_cover_atomic_.AddUint32(&GoCover_3_626362383230316436633863.Count[13], 1);
	viper.Set("ledger.state.stateDatabase", "CouchDB")
	couchAddr := env.setupCouch()
	viper.Set("ledger.state.couchDBConfig.couchDBAddress", couchAddr)
	// Replace with correct username/password such as
	// admin/admin if user security is enabled on couchdb.
	viper.Set("ledger.state.couchDBConfig.username", "")
	viper.Set("ledger.state.couchDBConfig.password", "")
	viper.Set("ledger.state.couchDBConfig.maxRetries", 3)
	viper.Set("ledger.state.couchDBConfig.maxRetriesOnStartup", 20)
	viper.Set("ledger.state.couchDBConfig.requestTimeout", time.Second*35)

	env.bookkeeperTestEnv = bookkeeping.NewTestEnv(t)
	dbProvider, err := NewCommonStorageDBProvider(env.bookkeeperTestEnv.TestProvider, &disabled.Provider{})
	assert.NoError(t, err)
	env.t = t
	env.provider = dbProvider
}

// GetDBHandle implements corresponding function from interface TestEnv
func (env *CouchDBCommonStorageTestEnv) GetDBHandle(id string) DB {_cover_atomic_.AddUint32(&GoCover_3_626362383230316436633863.Count[14], 1);
	db, err := env.provider.GetDBHandle(id)
	assert.NoError(env.t, err)
	return db
}

// GetName implements corresponding function from interface TestEnv
func (env *CouchDBCommonStorageTestEnv) GetName() string {_cover_atomic_.AddUint32(&GoCover_3_626362383230316436633863.Count[15], 1);
	return "couchDBCommonStorageTestEnv"
}

// Cleanup implements corresponding function from interface TestEnv
func (env *CouchDBCommonStorageTestEnv) Cleanup() {_cover_atomic_.AddUint32(&GoCover_3_626362383230316436633863.Count[16], 1);
	csdbProvider, _ := env.provider.(*CommonStorageDBProvider)
	statecouchdb.CleanupDB(env.t, csdbProvider.VersionedDBProvider)

	env.bookkeeperTestEnv.Cleanup()
	env.provider.Close()
	env.couchCleanup()
}

func removeDBPath(t testing.TB) {_cover_atomic_.AddUint32(&GoCover_3_626362383230316436633863.Count[17], 1);
	dbPath := ledgerconfig.GetStateLevelDBPath()
	if err := os.RemoveAll(dbPath); err != nil {_cover_atomic_.AddUint32(&GoCover_3_626362383230316436633863.Count[18], 1);
		t.Fatalf("Err: %s", err)
		t.FailNow()
	}
}

var GoCover_3_626362383230316436633863 = struct {
	Count     [19]uint32
	Pos       [3 * 19]uint32
	NumStmt   [19]uint16
} {
	Pos: [3 * 19]uint32{
		47, 55, 0x2003c, // [0]
		58, 62, 0x20043, // [1]
		65, 67, 0x2003a, // [2]
		70, 74, 0x20033, // [3]
		86, 88, 0x9003d, // [4]
		93, 94, 0x280002, // [5]
		98, 98, 0x1c0002, // [6]
		99, 99, 0x1a0002, // [7]
		88, 89, 0x1d0009, // [8]
		90, 90, 0x170003, // [9]
		89, 89, 0x1f001e, // [10]
		94, 96, 0xd0028, // [11]
		98, 98, 0x2e001c, // [12]
		103, 120, 0x2003c, // [13]
		123, 127, 0x20043, // [14]
		130, 132, 0x2003a, // [15]
		135, 142, 0x20033, // [16]
		144, 146, 0x2d0021, // [17]
		146, 149, 0x3002d, // [18]
	},
	NumStmt: [19]uint16{
		7, // 0
		3, // 1
		1, // 2
		3, // 3
		2, // 4
		2, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
		0, // 10
		2, // 11
		1, // 12
		13, // 13
		3, // 14
		1, // 15
		5, // 16
		2, // 17
		2, // 18
	},
}
var _ = _cover_atomic_.LoadUint32
