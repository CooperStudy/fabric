//line /home/cooper/go/src/github.com/hyperledger/fabric/token/transaction/marshalling.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package transaction; import _cover_atomic_ "sync/atomic"

import (
	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/protos/common"
	cb "github.com/hyperledger/fabric/protos/common"
	"github.com/hyperledger/fabric/protos/token"
	"github.com/hyperledger/fabric/protos/utils"
	"github.com/hyperledger/fabric/token/identity"
	"github.com/pkg/errors"
)

func UnmarshalTokenTransaction(raw []byte) (*cb.ChannelHeader, *token.TokenTransaction, identity.PublicInfo, error) {_cover_atomic_.AddUint32(&GoCover_0_316665343130313132303035.Count[0], 1);
	// the payload...
	payload := &common.Payload{}
	err := proto.Unmarshal(raw, payload)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_316665343130313132303035.Count[6], 1);
		return nil, nil, nil, errors.Wrap(err, "error unmarshaling Payload")
	}

	// the creator from the signature header
	_cover_atomic_.AddUint32(&GoCover_0_316665343130313132303035.Count[1], 1);sh, err := utils.GetSignatureHeader(payload.Header.SignatureHeader)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_316665343130313132303035.Count[7], 1);
		return nil, nil, nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_316665343130313132303035.Count[2], 1);creatorInfo := &TxCreatorInfo{public: sh.Creator}

	chdr, err := utils.UnmarshalChannelHeader(payload.Header.ChannelHeader)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_316665343130313132303035.Count[8], 1);
		return nil, nil, nil, err
	}

	// validate the payload type
	_cover_atomic_.AddUint32(&GoCover_0_316665343130313132303035.Count[3], 1);if common.HeaderType(chdr.Type) != common.HeaderType_TOKEN_TRANSACTION {_cover_atomic_.AddUint32(&GoCover_0_316665343130313132303035.Count[9], 1);
		return nil, nil, nil, errors.Errorf("only token transactions are supported, provided type: %d", chdr.Type)
	}

	_cover_atomic_.AddUint32(&GoCover_0_316665343130313132303035.Count[4], 1);ttx := &token.TokenTransaction{}
	err = proto.Unmarshal(payload.Data, ttx)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_316665343130313132303035.Count[10], 1);
		return nil, nil, nil, errors.Errorf("failed getting token token transaction, %s", err)
	}

	_cover_atomic_.AddUint32(&GoCover_0_316665343130313132303035.Count[5], 1);return chdr, ttx, creatorInfo, nil
}

var GoCover_0_316665343130313132303035 = struct {
	Count     [11]uint32
	Pos       [3 * 11]uint32
	NumStmt   [11]uint16
} {
	Pos: [3 * 11]uint32{
		19, 23, 0x100075, // [0]
		28, 29, 0x100002, // [1]
		32, 35, 0x100002, // [2]
		40, 40, 0x490002, // [3]
		44, 46, 0x100002, // [4]
		50, 50, 0x240002, // [5]
		23, 25, 0x30010, // [6]
		29, 31, 0x30010, // [7]
		35, 37, 0x30010, // [8]
		40, 42, 0x30049, // [9]
		46, 48, 0x30010, // [10]
	},
	NumStmt: [11]uint16{
		3, // 0
		2, // 1
		3, // 2
		1, // 3
		3, // 4
		1, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
		1, // 10
	},
}
var _ = _cover_atomic_.LoadUint32
