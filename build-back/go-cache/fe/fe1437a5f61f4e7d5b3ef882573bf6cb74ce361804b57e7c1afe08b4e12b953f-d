//line /home/cooper/go/src/github.com/hyperledger/fabric/token/tms/plain/issuer.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package plain; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric/protos/token"
)

// An Issuer that can import new tokens
type Issuer struct{}

// RequestImport creates an import request with the token owners, types, and quantities specified in tokensToIssue.
func (i *Issuer) RequestImport(tokensToIssue []*token.TokenToIssue) (*token.TokenTransaction, error) {_cover_atomic_.AddUint32(&GoCover_0_376538356362393564346637.Count[0], 1);
	var outputs []*token.PlainOutput
	for _, tti := range tokensToIssue {_cover_atomic_.AddUint32(&GoCover_0_376538356362393564346637.Count[2], 1);
		outputs = append(outputs, &token.PlainOutput{
			Owner:    tti.Recipient,
			Type:     tti.Type,
			Quantity: tti.Quantity,
		})
	}

	_cover_atomic_.AddUint32(&GoCover_0_376538356362393564346637.Count[1], 1);return &token.TokenTransaction{
		Action: &token.TokenTransaction_PlainAction{
			PlainAction: &token.PlainTokenAction{
				Data: &token.PlainTokenAction_PlainImport{
					PlainImport: &token.PlainImport{
						Outputs: outputs,
					},
				},
			},
		},
	}, nil
}

// RequestExpectation allows indirect import based on the expectation.
// It creates a token transaction with the outputs as specified in the expectation.
func (i *Issuer) RequestExpectation(request *token.ExpectationRequest) (*token.TokenTransaction, error) {_cover_atomic_.AddUint32(&GoCover_0_376538356362393564346637.Count[3], 1);
	panic("not implemented yet")
}

var GoCover_0_376538356362393564346637 = struct {
	Count     [4]uint32
	Pos       [3 * 4]uint32
	NumStmt   [4]uint16
} {
	Pos: [3 * 4]uint32{
		17, 19, 0x240066, // [0]
		27, 37, 0x80002, // [1]
		19, 25, 0x30024, // [2]
		42, 43, 0x1e0069, // [3]
	},
	NumStmt: [4]uint16{
		2, // 0
		1, // 1
		1, // 2
		1, // 3
	},
}
var _ = _cover_atomic_.LoadUint32
