//line /home/cooper/go/src/github.com/hyperledger/fabric/peer/channel/update.go:1
/*
Copyright IBM Corp. 2017 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

                 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package channel; import _cover_atomic_ "sync/atomic"

import (
	"errors"
	"fmt"
	"io/ioutil"

	"github.com/hyperledger/fabric/peer/common"
	"github.com/hyperledger/fabric/protos/utils"
	"github.com/spf13/cobra"
)

func updateCmd(cf *ChannelCmdFactory) *cobra.Command {_cover_atomic_.AddUint32(&GoCover_7_613931643833636437303432.Count[0], 1);
	updateCmd := &cobra.Command{
		Use:   "update",
		Short: "Send a configtx update.",
		Long:  "Signs and sends the supplied configtx update file to the channel. Requires '-f', '-o', '-c'.",
		RunE: func(cmd *cobra.Command, args []string) error {_cover_atomic_.AddUint32(&GoCover_7_613931643833636437303432.Count[2], 1);
			return update(cmd, args, cf)
		},
	}
	_cover_atomic_.AddUint32(&GoCover_7_613931643833636437303432.Count[1], 1);flagList := []string{
		"channelID",
		"file",
	}
	attachFlags(updateCmd, flagList)

	return updateCmd
}

func update(cmd *cobra.Command, args []string, cf *ChannelCmdFactory) error {_cover_atomic_.AddUint32(&GoCover_7_613931643833636437303432.Count[3], 1);
	//the global chainID filled by the "-c" command
	if channelID == common.UndefinedParamValue {_cover_atomic_.AddUint32(&GoCover_7_613931643833636437303432.Count[12], 1);
		return errors.New("Must supply channel ID")
	}

	_cover_atomic_.AddUint32(&GoCover_7_613931643833636437303432.Count[4], 1);if channelTxFile == "" {_cover_atomic_.AddUint32(&GoCover_7_613931643833636437303432.Count[13], 1);
		return InvalidCreateTx("No configtx file name supplied")
	}
	// Parsing of the command line is done so silence cmd usage
	_cover_atomic_.AddUint32(&GoCover_7_613931643833636437303432.Count[5], 1);cmd.SilenceUsage = true

	var err error
	if cf == nil {_cover_atomic_.AddUint32(&GoCover_7_613931643833636437303432.Count[14], 1);
		cf, err = InitCmdFactory(EndorserNotRequired, PeerDeliverNotRequired, OrdererRequired)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_7_613931643833636437303432.Count[15], 1);
			return err
		}
	}

	_cover_atomic_.AddUint32(&GoCover_7_613931643833636437303432.Count[6], 1);fileData, err := ioutil.ReadFile(channelTxFile)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_7_613931643833636437303432.Count[16], 1);
		return ConfigTxFileNotFound(err.Error())
	}

	_cover_atomic_.AddUint32(&GoCover_7_613931643833636437303432.Count[7], 1);ctxEnv, err := utils.UnmarshalEnvelope(fileData)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_7_613931643833636437303432.Count[17], 1);
		return err
	}

	_cover_atomic_.AddUint32(&GoCover_7_613931643833636437303432.Count[8], 1);sCtxEnv, err := sanityCheckAndSignConfigTx(ctxEnv)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_7_613931643833636437303432.Count[18], 1);
		return err
	}

	_cover_atomic_.AddUint32(&GoCover_7_613931643833636437303432.Count[9], 1);var broadcastClient common.BroadcastClient
	broadcastClient, err = cf.BroadcastFactory()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_7_613931643833636437303432.Count[19], 1);
		return fmt.Errorf("Error getting broadcast client: %s", err)
	}

	_cover_atomic_.AddUint32(&GoCover_7_613931643833636437303432.Count[10], 1);defer broadcastClient.Close()
	err = broadcastClient.Send(sCtxEnv)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_7_613931643833636437303432.Count[20], 1);
		return err
	}

	_cover_atomic_.AddUint32(&GoCover_7_613931643833636437303432.Count[11], 1);logger.Info("Successfully submitted channel update")
	return nil
}

var GoCover_7_613931643833636437303432 = struct {
	Count     [21]uint32
	Pos       [3 * 21]uint32
	NumStmt   [21]uint16
} {
	Pos: [3 * 21]uint32{
		29, 34, 0x370036, // [0]
		38, 44, 0x120002, // [1]
		34, 36, 0x40037, // [2]
		47, 49, 0x2d004d, // [3]
		53, 53, 0x190002, // [4]
		57, 60, 0xf0002, // [5]
		67, 68, 0x100002, // [6]
		72, 73, 0x100002, // [7]
		77, 78, 0x100002, // [8]
		82, 84, 0x100002, // [9]
		88, 90, 0x100002, // [10]
		94, 95, 0xc0002, // [11]
		49, 51, 0x3002d, // [12]
		53, 55, 0x30019, // [13]
		60, 62, 0x11000f, // [14]
		62, 64, 0x40011, // [15]
		68, 70, 0x30010, // [16]
		73, 75, 0x30010, // [17]
		78, 80, 0x30010, // [18]
		84, 86, 0x30010, // [19]
		90, 92, 0x30010, // [20]
	},
	NumStmt: [21]uint16{
		1, // 0
		3, // 1
		1, // 2
		1, // 3
		1, // 4
		3, // 5
		2, // 6
		2, // 7
		2, // 8
		3, // 9
		3, // 10
		2, // 11
		1, // 12
		1, // 13
		2, // 14
		1, // 15
		1, // 16
		1, // 17
		1, // 18
		1, // 19
		1, // 20
	},
}
var _ = _cover_atomic_.LoadUint32
