//line /home/cooper/go/src/github.com/hyperledger/fabric/core/chaincode/lifecycle/protobuf.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package lifecycle; import _cover_atomic_ "sync/atomic"

import (
	"github.com/golang/protobuf/proto"
	"github.com/pkg/errors"
)

// Protobuf defines the subset of protobuf lifecycle needs and allows
// for injection of mocked marshaling errors.
type Protobuf interface {
	Marshal(msg proto.Message) (marshaled []byte, err error)
	Unmarshal(marshaled []byte, msg proto.Message) error
}

// ProtobufImpl is the standard implementation to use for Protobuf
type ProtobufImpl struct{}

// Marshal passes through to proto.Marshal
func (p ProtobufImpl) Marshal(msg proto.Message) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_653762643837333931396366.Count[0], 1);
	res, err := proto.Marshal(msg)
	return res, errors.WithStack(err)
}

// Unmarshal passes through to proto.Unmarshal
func (p ProtobufImpl) Unmarshal(marshaled []byte, msg proto.Message) error {_cover_atomic_.AddUint32(&GoCover_1_653762643837333931396366.Count[1], 1);
	return errors.WithStack(proto.Unmarshal(marshaled, msg))
}

var GoCover_1_653762643837333931396366 = struct {
	Count     [2]uint32
	Pos       [3 * 2]uint32
	NumStmt   [2]uint16
} {
	Pos: [3 * 2]uint32{
		25, 28, 0x20042, // [0]
		31, 33, 0x2004c, // [1]
	},
	NumStmt: [2]uint16{
		2, // 0
		1, // 1
	},
}
var _ = _cover_atomic_.LoadUint32
