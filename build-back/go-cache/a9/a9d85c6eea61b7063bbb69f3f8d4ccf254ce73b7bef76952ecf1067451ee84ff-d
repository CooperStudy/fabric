//line /home/cooper/go/src/github.com/hyperledger/fabric/core/chaincode/pending_query_result.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package chaincode; import _cover_atomic_ "sync/atomic"

import (
	"github.com/golang/protobuf/proto"
	commonledger "github.com/hyperledger/fabric/common/ledger"
	pb "github.com/hyperledger/fabric/protos/peer"
)

type PendingQueryResult struct {
	batch []*pb.QueryResultBytes
}

func (p *PendingQueryResult) Cut() []*pb.QueryResultBytes {_cover_atomic_.AddUint32(&GoCover_8_323839383963343337363361.Count[0], 1);
	batch := p.batch
	p.batch = nil
	return batch
}

func (p *PendingQueryResult) Add(queryResult commonledger.QueryResult) error {_cover_atomic_.AddUint32(&GoCover_8_323839383963343337363361.Count[1], 1);
	queryResultBytes, err := proto.Marshal(queryResult.(proto.Message))
	if err != nil {_cover_atomic_.AddUint32(&GoCover_8_323839383963343337363361.Count[3], 1);
		chaincodeLogger.Errorf("failed to marshal query result: %s", err)
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_8_323839383963343337363361.Count[2], 1);p.batch = append(p.batch, &pb.QueryResultBytes{ResultBytes: queryResultBytes})
	return nil
}

func (p *PendingQueryResult) Size() int {_cover_atomic_.AddUint32(&GoCover_8_323839383963343337363361.Count[4], 1);
	return len(p.batch)
}

var GoCover_8_323839383963343337363361 = struct {
	Count     [5]uint32
	Pos       [3 * 5]uint32
	NumStmt   [5]uint16
} {
	Pos: [3 * 5]uint32{
		19, 23, 0x2003b, // [0]
		25, 27, 0x10004e, // [1]
		31, 32, 0xc0002, // [2]
		27, 30, 0x30010, // [3]
		35, 37, 0x20029, // [4]
	},
	NumStmt: [5]uint16{
		3, // 0
		2, // 1
		2, // 2
		2, // 3
		1, // 4
	},
}
var _ = _cover_atomic_.LoadUint32
