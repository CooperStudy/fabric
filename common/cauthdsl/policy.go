/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package cauthdsl

import (
	"errors"
	"fmt"

	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/common/policies"
	"github.com/hyperledger/fabric/msp"
	cb "github.com/hyperledger/fabric/protos/common"
	mspp "github.com/hyperledger/fabric/protos/msp"
)

type Identity interface {
	// SatisfiesPrincipal checks whether this instance matches
	// the description supplied in MSPPrincipal. The check may
	// involve a byte-by-byte comparison (if the principal is
	// a serialized identity) or may require MSP validation
	SatisfiesPrincipal(principal *mspp.MSPPrincipal) error

	// GetIdentifier returns the identifier of that identity
	GetIdentifier() *msp.IdentityIdentifier
}

type IdentityAndSignature interface {
	// Identity returns the identity associated to this instance
	Identity() (Identity, error)

	// Verify returns the validity status of this identity's signature over the message
	Verify() error
}

type deserializeAndVerify struct {
	signedData           *cb.SignedData
	deserializer         msp.IdentityDeserializer
	deserializedIdentity msp.Identity
}

func (d *deserializeAndVerify) Identity() (Identity, error) {
	logger.Info("==deserializeAndVerify==Identity=")
	deserializedIdentity, err := d.deserializer.DeserializeIdentity(d.signedData.Identity)
	if err != nil {
		return nil, err
	}

	d.deserializedIdentity = deserializedIdentity
	return deserializedIdentity, nil
}

func (d *deserializeAndVerify) Verify() error {
	logger.Info("==deserializeAndVerify==Verify=")
	if d.deserializedIdentity == nil {
		cauthdslLogger.Panicf("programming error, Identity must be called prior to Verify")
	}
	return d.deserializedIdentity.Verify(d.signedData.Data, d.signedData.Signature)
}

type provider struct {
	deserializer msp.IdentityDeserializer
}

// NewProviderImpl provides a policy generator for cauthdsl type policies
func NewPolicyProvider(deserializer msp.IdentityDeserializer) policies.Provider {
	logger.Info("==NewPolicyProvider=")
	return &provider{
		deserializer: deserializer,
	}
}

// NewPolicy creates a new policy based on the policy bytes
func (pr *provider) NewPolicy(data []byte) (policies.Policy, proto.Message, error) {
	logger.Info("==NewPolicy=")
	sigPolicy := &cb.SignaturePolicyEnvelope{}
	if err := proto.Unmarshal(data, sigPolicy); err != nil {
		return nil, nil, fmt.Errorf("Error unmarshaling to SignaturePolicy: %s", err)
	}

	if sigPolicy.Version != 0 {
		return nil, nil, fmt.Errorf("This evaluator only understands messages of version 0, but version was %d", sigPolicy.Version)
	}

	compiled, err := compile(sigPolicy.Rule, sigPolicy.Identities, pr.deserializer)
	if err != nil {
		return nil, nil, err
	}

	return &policy{
		evaluator:    compiled,
		deserializer: pr.deserializer,
	}, sigPolicy, nil

}

type policy struct {
	evaluator    func([]IdentityAndSignature, []bool) bool
	deserializer msp.IdentityDeserializer
}

// Evaluate takes a set of SignedData and evaluates whether this set of signatures satisfies the policy
func (p *policy) Evaluate(signatureSet []*cb.SignedData) error {
	logger.Info("===policy==Evaluate=")
	if p == nil {
		return fmt.Errorf("No such policy")
	}
	idAndS := make([]IdentityAndSignature, len(signatureSet))
	for i, sd := range signatureSet {
		//logger.Info("===========i",i)//0
		//logger.Info("===========sd",sd)
		/*
		&{[24 5 122 94 18 20 8 245 155 142 143 243 167 144 220 22 16 159 195 178 150 243 167 144 220 22 26 32 80 15 118 229 112 194 46 145 52 58 201 194 141 181 93 105 72 250 164 77 167 16 219 111 167 151 22 65 212 234 40 91 34 32 4 59 188 47 229 180 124 126 24 37 33 69 136 3 20 79 26 33 87 166 41 252 227 244 219 36 52 236 147 79 42 38 42 2 8 1] [10 7 79 114 103 49 77 83 80 18 166 6 45 45 45 45 45 66 69 71 73 78 32 67 69 82 84 73 70 73 67 65 8]
		&{[10 190 7 10 102 8 3 26 11 8 245 225 220 140 6 16 225 254 245 4 34 9 109 121 99 104 97 110 110 101 108 42 64 57 56 52 97 53 56 97 100 50 51 48 57 101 53 54 97 98 49 50 56 100 102 98 55 55 101 100 102 49 51 57 97 56 57 50 100 100 50 100 102 52 52 100 53 51 50 49 54 99 52 102 98 51 102 52 98 50 54 50 48 54 97 53 52 58 8 18 6 18 4 108 115 99 99 18 211 6 10 182 6 10 7 79 114 103 49 77 83 80 18 170 6 45 45 45 45 45 66 69 71 73 78 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 77 73 73 67 75 106 67 67 65 100 71 103 65 119 73 66 65 103 73 82 65 76 118 56 78 100 104 116 73 121 74 71 72 107 49 68 79 43 99 90 102 67 56 119 67 103 89 73 75 111 90 73 122 106 48 69 65 119 73 119 99 122 69 76 10 77 65 107 71 65 49 85 69 66 104 77 67 86 86 77 120 69 122 65 82 66 103 78 86 66 65 103 84 67 107 78 104 98 71 108 109 98 51 74 117 97 87 69 120 70 106 65 85 66 103 78 86 66 65 99 84 68 86 78 104 98 105 66 71 10 99 109 70 117 89 50 108 122 89 50 56 120 71 84 65 88 66 103 78 86 66 65 111 84 69 71 57 121 90 122 69 117 90 88 104 104 98 88 66 115 90 83 53 106 98 50 48 120 72 68 65 97 66 103 78 86 66 65 77 84 69 50 78 104 10 76 109 57 121 90 122 69 117 90 88 104 104 98 88 66 115 90 83 53 106 98 50 48 119 72 104 99 78 77 106 69 120 77 84 69 49 77 68 107 121 78 122 65 119 87 104 99 78 77 122 69 120 77 84 69 122 77 68 107 121 78 122 65 119 10 87 106 66 115 77 81 115 119 67 81 89 68 86 81 81 71 69 119 74 86 85 122 69 84 77 66 69 71 65 49 85 69 67 66 77 75 81 50 70 115 97 87 90 118 99 109 53 112 89 84 69 87 77 66 81 71 65 49 85 69 66 120 77 78 10 85 50 70 117 73 69 90 121 89 87 53 106 97 88 78 106 98 122 69 80 77 65 48 71 65 49 85 69 67 120 77 71 89 50 120 112 90 87 53 48 77 82 56 119 72 81 89 68 86 81 81 68 68 66 90 66 90 71 49 112 98 107 66 118 10 99 109 99 120 76 109 86 52 89 87 49 119 98 71 85 117 89 50 57 116 77 70 107 119 69 119 89 72 75 111 90 73 122 106 48 67 65 81 89 73 75 111 90 73 122 106 48 68 65 81 99 68 81 103 65 69 47 67 67 106 77 72 99 120 10 118 102 113 76 66 51 122 53 86 107 50 114 101 79 97 73 49 80 82 97 97 89 111 114 112 119 47 77 112 55 67 108 110 121 69 83 104 50 122 78 81 90 115 53 112 103 72 74 57 89 118 79 99 108 100 69 109 66 112 104 115 70 112 120 10 119 78 77 90 122 76 115 122 86 108 43 114 72 54 78 78 77 69 115 119 68 103 89 68 86 82 48 80 65 81 72 47 66 65 81 68 65 103 101 65 77 65 119 71 65 49 85 100 69 119 69 66 47 119 81 67 77 65 65 119 75 119 89 68 10 86 82 48 106 66 67 81 119 73 111 65 103 75 50 65 49 104 114 82 54 113 120 108 50 69 66 57 56 119 55 74 102 50 121 109 47 53 116 103 49 118 103 97 101 88 101 74 51 102 76 98 87 76 50 81 119 67 103 89 73 75 111 90 73 10 122 106 48 69 65 119 73 68 82 119 65 119 82 65 73 103 97 100 54 116 65 100 43 111 89 109 105 84 80 66 66 50 106 83 76 77 84 88 115 85 76 121 108 102 71 121 68 69 73 97 108 55 81 87 103 97 102 48 103 67 73 68 67 76 10 106 114 89 71 104 79 113 110 49 100 98 116 47 89 82 76 67 118 68 101 79 100 101 120 85 74 70 106 47 48 114 70 110 74 57 116 87 75 114 108 10 45 45 45 45 45 69 78 68 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 18 24 227 40 213 176 249 79 51 105 23 137 101 226 142 79 148 15 251 220 2 81 210 233 120 132 18 148 1 10 145 1 10 142 1 8 1 18 6 18 4 108 115 99 99 26 129 1 10 6 100 101 112 108 111 121 10 9 109 121 99 104 97 110 110 101 108 10 69 10 67 8 1 18 39 10 29 47 104 111 109 101 47 99 111 111 112 101 114 47 112 114 111 106 101 99 116 47 117 110 105 111 110 47 103 111 18 3 97 99 98 26 1 48 26 22 10 4 105 110 105 116 10 1 97 10 3 49 48 48 10 1 98 10 3 50 48 48 10 25 18 8 18 6 8 1 18 2 8 0 26 13 18 11 10 7 79 114 103 49 77 83 80 16 3 10 4 101 115 99 99 10 4 118 115 99 99] [10 7 79 114 103 49 77 83 80 18 170 6 45 45 45 45 45 66 69 71 73 78 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10 77 73 73 67 75 106 67 67 65 100 71 103 65 119 73 66 65 103 73 82 65 76 118 56 78 100 104 116 73 121 74 71 72 107 49 68 79 43 99 90 102 67 56 119 67 103 89 73 75 111 90 73 122 106 48 69 65 119 73 119 99 122 69 76 10 77 65 107 71 65 49 85 69 66 104 77 67 86 86 77 120 69 122 65 82 66 103 78 86 66 65 103 84 67 107 78 104 98 71 108 109 98 51 74 117 97 87 69 120 70 106 65 85 66 103 78 86 66 65 99 84 68 86 78 104 98 105 66 71 10 99 109 70 117 89 50 108 122 89 50 56 120 71 84 65 88 66 103 78 86 66 65 111 84 69 71 57 121 90 122 69 117 90 88 104 104 98 88 66 115 90 83 53 106 98 50 48 120 72 68 65 97 66 103 78 86 66 65 77 84 69 50 78 104 10 76 109 57 121 90 122 69 117 90 88 104 104 98 88 66 115 90 83 53 106 98 50 48 119 72 104 99 78 77 106 69 120 77 84 69 49 77 68 107 121 78 122 65 119 87 104 99 78 77 122 69 120 77 84 69 122 77 68 107 121 78 122 65 119 10 87 106 66 115 77 81 115 119 67 81 89 68 86 81 81 71 69 119 74 86 85 122 69 84 77 66 69 71 65 49 85 69 67 66 77 75 81 50 70 115 97 87 90 118 99 109 53 112 89 84 69 87 77 66 81 71 65 49 85 69 66 120 77 78 10 85 50 70 117 73 69 90 121 89 87 53 106 97 88 78 106 98 122 69 80 77 65 48 71 65 49 85 69 67 120 77 71 89 50 120 112 90 87 53 48 77 82 56 119 72 81 89 68 86 81 81 68 68 66 90 66 90 71 49 112 98 107 66 118 10 99 109 99 120 76 109 86 52 89 87 49 119 98 71 85 117 89 50 57 116 77 70 107 119 69 119 89 72 75 111 90 73 122 106 48 67 65 81 89 73 75 111 90 73 122 106 48 68 65 81 99 68 81 103 65 69 47 67 67 106 77 72 99 120 10 118 102 113 76 66 51 122 53 86 107 50 114 101 79 97 73 49 80 82 97 97 89 111 114 112 119 47 77 112 55 67 108 110 121 69 83 104 50 122 78 81 90 115 53 112 103 72 74 57 89 118 79 99 108 100 69 109 66 112 104 115 70 112 120 10 119 78 77 90 122 76 115 122 86 108 43 114 72 54 78 78 77 69 115 119 68 103 89 68 86 82 48 80 65 81 72 47 66 65 81 68 65 103 101 65 77 65 119 71 65 49 85 100 69 119 69 66 47 119 81 67 77 65 65 119 75 119 89 68 10 86 82 48 106 66 67 81 119 73 111 65 103 75 50 65 49 104 114 82 54 113 120 108 50 69 66 57 56 119 55 74 102 50 121 109 47 53 116 103 49 118 103 97 101 88 101 74 51 102 76 98 87 76 50 81 119 67 103 89 73 75 111 90 73 10 122 106 48 69 65 119 73 68 82 119 65 119 82 65 73 103 97 100 54 116 65 100 43 111 89 109 105 84 80 66 66 50 106 83 76 77 84 88 115 85 76 121 108 102 71 121 68 69 73 97 108 55 81 87 103 97 102 48 103 67 73 68 67 76 10 106 114 89 71 104 79 113 110 49 100 98 116 47 89 82 76 67 118 68 101 79 100 101 120 85 74 70 106 47 48 114 70 110 74 57 116 87 75 114 108 10 45 45 45 45 45 69 78 68 32 67 69 82 84 73 70 73 67 65 84 69 45 45 45 45 45 10] [48 69 2 33 0 247 16 129 78 32 13 32 16 50 34 86 168 120 186 82 77 156 12 97 52 192 95 75 16 55 99 46 212 219 180 10 7 2 32 84 16 251 229 216 51 181 81 231 234 245 217 232 204 154 139 86 126 176 43 27 4 138 39 86 228 247 189 130 71 10 157]}

		*/
		idAndS[i] = &deserializeAndVerify{
			signedData:   sd,
			deserializer: p.deserializer,
		}
	}

	ok := p.evaluator(deduplicate(idAndS), make([]bool, len(signatureSet)))
	if !ok {
		return errors.New("signature set did not satisfy policy")
	}
	return nil
}
