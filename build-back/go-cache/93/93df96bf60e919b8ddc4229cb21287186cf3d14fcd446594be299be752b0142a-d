//line /home/cooper/go/src/github.com/hyperledger/fabric/core/ledger/pvtdatastorage/helper.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package pvtdatastorage; import _cover_atomic_ "sync/atomic"

import (
	"math"

	"github.com/hyperledger/fabric/core/ledger"
	"github.com/hyperledger/fabric/core/ledger/pvtdatapolicy"
	"github.com/hyperledger/fabric/protos/ledger/rwset"
	"github.com/willf/bitset"
)

func prepareStoreEntries(blockNum uint64, pvtData []*ledger.TxPvtData, btlPolicy pvtdatapolicy.BTLPolicy,
	missingPvtData ledger.TxMissingPvtDataMap) (*storeEntries, error) {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[0], 1);
	dataEntries := prepareDataEntries(blockNum, pvtData)

	missingDataEntries := prepareMissingDataEntries(blockNum, missingPvtData)

	expiryEntries, err := prepareExpiryEntries(blockNum, dataEntries, missingDataEntries, btlPolicy)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[2], 1);
		return nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[1], 1);return &storeEntries{
		dataEntries:        dataEntries,
		expiryEntries:      expiryEntries,
		missingDataEntries: missingDataEntries}, nil
}

func prepareDataEntries(blockNum uint64, pvtData []*ledger.TxPvtData) []*dataEntry {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[3], 1);
	var dataEntries []*dataEntry
	for _, txPvtdata := range pvtData {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[5], 1);
		for _, nsPvtdata := range txPvtdata.WriteSet.NsPvtRwset {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[6], 1);
			for _, collPvtdata := range nsPvtdata.CollectionPvtRwset {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[7], 1);
				txnum := txPvtdata.SeqInBlock
				ns := nsPvtdata.Namespace
				coll := collPvtdata.CollectionName
				dataKey := &dataKey{nsCollBlk{ns, coll, blockNum}, txnum}
				dataEntries = append(dataEntries, &dataEntry{key: dataKey, value: collPvtdata})
			}
		}
	}
	_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[4], 1);return dataEntries
}

func prepareMissingDataEntries(committingBlk uint64, missingPvtData ledger.TxMissingPvtDataMap) map[missingDataKey]*bitset.BitSet {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[8], 1);
	missingDataEntries := make(map[missingDataKey]*bitset.BitSet)

	for txNum, missingData := range missingPvtData {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[10], 1);
		for _, nsColl := range missingData {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[11], 1);
			key := missingDataKey{nsCollBlk{nsColl.Namespace, nsColl.Collection, committingBlk},
				nsColl.IsEligible}

			if _, ok := missingDataEntries[key]; !ok {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[13], 1);
				missingDataEntries[key] = &bitset.BitSet{}
			}
			_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[12], 1);bitmap := missingDataEntries[key]

			bitmap.Set(uint(txNum))
		}
	}

	_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[9], 1);return missingDataEntries
}

// prepareExpiryEntries returns expiry entries for both private data which is present in the committingBlk
// and missing private.
func prepareExpiryEntries(committingBlk uint64, dataEntries []*dataEntry, missingDataEntries map[missingDataKey]*bitset.BitSet,
	btlPolicy pvtdatapolicy.BTLPolicy) ([]*expiryEntry, error) {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[14], 1);

	var expiryEntries []*expiryEntry
	mapByExpiringBlk := make(map[uint64]*ExpiryData)

	// 1. prepare expiryData for non-missing data
	for _, dataEntry := range dataEntries {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[18], 1);
		prepareExpiryEntriesForPresentData(mapByExpiringBlk, dataEntry.key, btlPolicy)
	}

	// 2. prepare expiryData for missing data
	_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[15], 1);for missingDataKey := range missingDataEntries {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[19], 1);
		prepareExpiryEntriesForMissingData(mapByExpiringBlk, &missingDataKey, btlPolicy)
	}

	_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[16], 1);for expiryBlk, expiryData := range mapByExpiringBlk {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[20], 1);
		expiryKey := &expiryKey{expiringBlk: expiryBlk, committingBlk: committingBlk}
		expiryEntries = append(expiryEntries, &expiryEntry{key: expiryKey, value: expiryData})
	}

	_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[17], 1);return expiryEntries, nil
}

// prepareExpiryDataForPresentData creates expiryData for non-missing pvt data
func prepareExpiryEntriesForPresentData(mapByExpiringBlk map[uint64]*ExpiryData, dataKey *dataKey, btlPolicy pvtdatapolicy.BTLPolicy) error {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[21], 1);
	expiringBlk, err := btlPolicy.GetExpiringBlock(dataKey.ns, dataKey.coll, dataKey.blkNum)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[24], 1);
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[22], 1);if neverExpires(expiringBlk) {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[25], 1);
		return nil
	}

	_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[23], 1);expiryData := getOrCreateExpiryData(mapByExpiringBlk, expiringBlk)

	expiryData.addPresentData(dataKey.ns, dataKey.coll, dataKey.txNum)
	return nil
}

// prepareExpiryDataForMissingData creates expiryData for missing pvt data
func prepareExpiryEntriesForMissingData(mapByExpiringBlk map[uint64]*ExpiryData, missingKey *missingDataKey, btlPolicy pvtdatapolicy.BTLPolicy) error {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[26], 1);
	expiringBlk, err := btlPolicy.GetExpiringBlock(missingKey.ns, missingKey.coll, missingKey.blkNum)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[29], 1);
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[27], 1);if neverExpires(expiringBlk) {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[30], 1);
		return nil
	}

	_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[28], 1);expiryData := getOrCreateExpiryData(mapByExpiringBlk, expiringBlk)

	expiryData.addMissingData(missingKey.ns, missingKey.coll)
	return nil
}

func getOrCreateExpiryData(mapByExpiringBlk map[uint64]*ExpiryData, expiringBlk uint64) *ExpiryData {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[31], 1);
	expiryData, ok := mapByExpiringBlk[expiringBlk]
	if !ok {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[33], 1);
		expiryData = newExpiryData()
		mapByExpiringBlk[expiringBlk] = expiryData
	}
	_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[32], 1);return expiryData
}

// deriveKeys constructs dataKeys and missingDataKey from an expiryEntry
func deriveKeys(expiryEntry *expiryEntry) (dataKeys []*dataKey, missingDataKeys []*missingDataKey) {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[34], 1);
	for ns, colls := range expiryEntry.value.Map {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[36], 1);
		// 1. constructs dataKeys of expired existing pvt data
		for coll, txNums := range colls.Map {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[38], 1);
			for _, txNum := range txNums.List {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[39], 1);
				dataKeys = append(dataKeys,
					&dataKey{nsCollBlk{ns, coll, expiryEntry.key.committingBlk}, txNum})
			}
		}
		// 2. constructs missingDataKeys of expired missing pvt data
		_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[37], 1);for coll := range colls.MissingDataMap {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[40], 1);
			// one key for eligible entries and another for ieligible entries
			missingDataKeys = append(missingDataKeys,
				&missingDataKey{nsCollBlk{ns, coll, expiryEntry.key.committingBlk}, true})
			missingDataKeys = append(missingDataKeys,
				&missingDataKey{nsCollBlk{ns, coll, expiryEntry.key.committingBlk}, false})

		}
	}
	_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[35], 1);return
}

func passesFilter(dataKey *dataKey, filter ledger.PvtNsCollFilter) bool {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[41], 1);
	return filter == nil || filter.Has(dataKey.ns, dataKey.coll)
}

func isExpired(key nsCollBlk, btl pvtdatapolicy.BTLPolicy, latestBlkNum uint64) (bool, error) {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[42], 1);
	expiringBlk, err := btl.GetExpiringBlock(key.ns, key.coll, key.blkNum)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[44], 1);
		return false, err
	}

	_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[43], 1);return latestBlkNum >= expiringBlk, nil
}

func neverExpires(expiringBlkNum uint64) bool {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[45], 1);
	return expiringBlkNum == math.MaxUint64
}

type txPvtdataAssembler struct {
	blockNum, txNum uint64
	txWset          *rwset.TxPvtReadWriteSet
	currentNsWSet   *rwset.NsPvtReadWriteSet
	firstCall       bool
}

func newTxPvtdataAssembler(blockNum, txNum uint64) *txPvtdataAssembler {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[46], 1);
	return &txPvtdataAssembler{blockNum, txNum, &rwset.TxPvtReadWriteSet{}, nil, true}
}

func (a *txPvtdataAssembler) add(ns string, collPvtWset *rwset.CollectionPvtReadWriteSet) {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[47], 1);
	// start a NsWset
	if a.firstCall {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[50], 1);
		a.currentNsWSet = &rwset.NsPvtReadWriteSet{Namespace: ns}
		a.firstCall = false
	}

	// if a new ns started, add the existing NsWset to TxWset and start a new one
	_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[48], 1);if a.currentNsWSet.Namespace != ns {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[51], 1);
		a.txWset.NsPvtRwset = append(a.txWset.NsPvtRwset, a.currentNsWSet)
		a.currentNsWSet = &rwset.NsPvtReadWriteSet{Namespace: ns}
	}
	// add the collWset to the current NsWset
	_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[49], 1);a.currentNsWSet.CollectionPvtRwset = append(a.currentNsWSet.CollectionPvtRwset, collPvtWset)
}

func (a *txPvtdataAssembler) done() {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[52], 1);
	if a.currentNsWSet != nil {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[54], 1);
		a.txWset.NsPvtRwset = append(a.txWset.NsPvtRwset, a.currentNsWSet)
	}
	_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[53], 1);a.currentNsWSet = nil
}

func (a *txPvtdataAssembler) getTxPvtdata() *ledger.TxPvtData {_cover_atomic_.AddUint32(&GoCover_0_653833333066373334656466.Count[55], 1);
	a.done()
	return &ledger.TxPvtData{SeqInBlock: a.txNum, WriteSet: a.txWset}
}

var GoCover_0_653833333066373334656466 = struct {
	Count     [56]uint32
	Pos       [3 * 56]uint32
	NumStmt   [56]uint16
} {
	Pos: [3 * 56]uint32{
		19, 25, 0x100044, // [0]
		29, 32, 0x2f0002, // [1]
		25, 27, 0x30010, // [2]
		35, 37, 0x240054, // [3]
		48, 48, 0x140002, // [4]
		37, 38, 0x3b0024, // [5]
		38, 39, 0x3d003b, // [6]
		39, 45, 0x5003d, // [7]
		51, 54, 0x310083, // [8]
		68, 68, 0x1b0002, // [9]
		54, 55, 0x260031, // [10]
		55, 59, 0x2d0026, // [11]
		62, 64, 0x1b0004, // [12]
		59, 61, 0x5002d, // [13]
		74, 80, 0x28003d, // [14]
		85, 85, 0x310002, // [15]
		89, 89, 0x360002, // [16]
		94, 94, 0x1b0002, // [17]
		80, 82, 0x30028, // [18]
		85, 87, 0x30031, // [19]
		89, 92, 0x30036, // [20]
		98, 100, 0x10008d, // [21]
		103, 103, 0x1f0002, // [22]
		107, 110, 0xc0002, // [23]
		100, 102, 0x30010, // [24]
		103, 105, 0x3001f, // [25]
		114, 116, 0x100097, // [26]
		119, 119, 0x1f0002, // [27]
		123, 126, 0xc0002, // [28]
		116, 118, 0x30010, // [29]
		119, 121, 0x3001f, // [30]
		129, 131, 0x90065, // [31]
		135, 135, 0x130002, // [32]
		131, 134, 0x30009, // [33]
		139, 140, 0x2f0064, // [34]
		158, 158, 0x80002, // [35]
		140, 142, 0x27002f, // [36]
		149, 149, 0x2a0003, // [37]
		142, 143, 0x260027, // [38]
		143, 146, 0x50026, // [39]
		149, 156, 0x4002a, // [40]
		161, 163, 0x20049, // [41]
		165, 167, 0x10005f, // [42]
		171, 171, 0x290002, // [43]
		167, 169, 0x30010, // [44]
		174, 176, 0x2002f, // [45]
		185, 187, 0x20048, // [46]
		189, 191, 0x11005b, // [47]
		197, 197, 0x250002, // [48]
		202, 202, 0x5e0002, // [49]
		191, 194, 0x30011, // [50]
		197, 200, 0x30025, // [51]
		205, 206, 0x1c0025, // [52]
		209, 209, 0x170002, // [53]
		206, 208, 0x3001c, // [54]
		212, 215, 0x2003f, // [55]
	},
	NumStmt: [56]uint16{
		4, // 0
		1, // 1
		1, // 2
		2, // 3
		1, // 4
		1, // 5
		1, // 6
		5, // 7
		2, // 8
		1, // 9
		1, // 10
		2, // 11
		2, // 12
		1, // 13
		3, // 14
		1, // 15
		1, // 16
		1, // 17
		1, // 18
		1, // 19
		2, // 20
		2, // 21
		1, // 22
		3, // 23
		1, // 24
		1, // 25
		2, // 26
		1, // 27
		3, // 28
		1, // 29
		1, // 30
		2, // 31
		1, // 32
		2, // 33
		1, // 34
		1, // 35
		1, // 36
		1, // 37
		1, // 38
		1, // 39
		2, // 40
		1, // 41
		2, // 42
		1, // 43
		1, // 44
		1, // 45
		1, // 46
		1, // 47
		1, // 48
		1, // 49
		2, // 50
		2, // 51
		1, // 52
		1, // 53
		1, // 54
		2, // 55
	},
}
var _ = _cover_atomic_.LoadUint32
