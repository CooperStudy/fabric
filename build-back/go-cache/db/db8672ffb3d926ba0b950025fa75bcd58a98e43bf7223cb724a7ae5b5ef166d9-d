//line /home/cooper/go/src/github.com/hyperledger/fabric/core/handlers/endorsement/plugin/plugin.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package main; import _cover_atomic_ "sync/atomic"

import (
	"errors"
	"fmt"

	. "github.com/hyperledger/fabric/core/handlers/endorsement/api"
	. "github.com/hyperledger/fabric/core/handlers/endorsement/api/identities"
	"github.com/hyperledger/fabric/protos/peer"
)

// To build the plugin,
// run:
//    go build -buildmode=plugin -o escc.so plugin.go

// DefaultEndorsementFactory returns an endorsement plugin factory which returns plugins
// that behave as the default endorsement system chaincode
type DefaultEndorsementFactory struct {
}

// New returns an endorsement plugin that behaves as the default endorsement system chaincode
func (*DefaultEndorsementFactory) New() Plugin {_cover_atomic_.AddUint32(&GoCover_0_613130373639653336643931.Count[0], 1);
	return &DefaultEndorsement{}
}

// DefaultEndorsement is an endorsement plugin that behaves as the default endorsement system chaincode
type DefaultEndorsement struct {
	SigningIdentityFetcher
}

// Endorse signs the given payload(ProposalResponsePayload bytes), and optionally mutates it.
// Returns:
// The Endorsement: A signature over the payload, and an identity that is used to verify the signature
// The payload that was given as input (could be modified within this function)
// Or error on failure
func (e *DefaultEndorsement) Endorse(prpBytes []byte, sp *peer.SignedProposal) (*peer.Endorsement, []byte, error) {_cover_atomic_.AddUint32(&GoCover_0_613130373639653336643931.Count[1], 1);
	signer, err := e.SigningIdentityForRequest(sp)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_613130373639653336643931.Count[5], 1);
		return nil, nil, errors.New(fmt.Sprintf("failed fetching signing identity: %v", err))
	}
	// serialize the signing identity
	_cover_atomic_.AddUint32(&GoCover_0_613130373639653336643931.Count[2], 1);identityBytes, err := signer.Serialize()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_613130373639653336643931.Count[6], 1);
		return nil, nil, errors.New(fmt.Sprintf("could not serialize the signing identity: %v", err))
	}

	// sign the concatenation of the proposal response and the serialized endorser identity with this endorser's key
	_cover_atomic_.AddUint32(&GoCover_0_613130373639653336643931.Count[3], 1);signature, err := signer.Sign(append(prpBytes, identityBytes...))
	if err != nil {_cover_atomic_.AddUint32(&GoCover_0_613130373639653336643931.Count[7], 1);
		return nil, nil, errors.New(fmt.Sprintf("could not sign the proposal response payload: %v", err))
	}
	_cover_atomic_.AddUint32(&GoCover_0_613130373639653336643931.Count[4], 1);endorsement := &peer.Endorsement{Signature: signature, Endorser: identityBytes}
	return endorsement, prpBytes, nil
}

// Init injects dependencies into the instance of the Plugin
func (e *DefaultEndorsement) Init(dependencies ...Dependency) error {_cover_atomic_.AddUint32(&GoCover_0_613130373639653336643931.Count[8], 1);
	for _, dep := range dependencies {_cover_atomic_.AddUint32(&GoCover_0_613130373639653336643931.Count[10], 1);
		sIDFetcher, isSigningIdentityFetcher := dep.(SigningIdentityFetcher)
		if !isSigningIdentityFetcher {_cover_atomic_.AddUint32(&GoCover_0_613130373639653336643931.Count[12], 1);
			continue
		}
		_cover_atomic_.AddUint32(&GoCover_0_613130373639653336643931.Count[11], 1);e.SigningIdentityFetcher = sIDFetcher
		return nil
	}
	_cover_atomic_.AddUint32(&GoCover_0_613130373639653336643931.Count[9], 1);return errors.New("could not find SigningIdentityFetcher in dependencies")
}

// NewPluginFactory is the function ran by the plugin infrastructure to create an endorsement plugin factory.
func NewPluginFactory() PluginFactory {_cover_atomic_.AddUint32(&GoCover_0_613130373639653336643931.Count[13], 1);
	return &DefaultEndorsementFactory{}
}

var GoCover_0_613130373639653336643931 = struct {
	Count     [14]uint32
	Pos       [3 * 14]uint32
	NumStmt   [14]uint16
} {
	Pos: [3 * 14]uint32{
		28, 30, 0x20030, // [0]
		42, 44, 0x100073, // [1]
		48, 49, 0x100002, // [2]
		54, 55, 0x100002, // [3]
		58, 59, 0x230002, // [4]
		44, 46, 0x30010, // [5]
		49, 51, 0x30010, // [6]
		55, 57, 0x30010, // [7]
		63, 64, 0x230045, // [8]
		72, 72, 0x4c0002, // [9]
		64, 66, 0x200023, // [10]
		69, 70, 0xd0003, // [11]
		66, 67, 0xc0020, // [12]
		76, 78, 0x20027, // [13]
	},
	NumStmt: [14]uint16{
		1, // 0
		2, // 1
		2, // 2
		2, // 3
		2, // 4
		1, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
		2, // 10
		2, // 11
		1, // 12
		1, // 13
	},
}
var _ = _cover_atomic_.LoadUint32
