//line /home/cooper/go/src/github.com/hyperledger/fabric/core/operations/tls.go:1
/*
Copyright IBM Corp All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package operations; import _cover_atomic_ "sync/atomic"

import (
	"crypto/tls"
	"crypto/x509"
	"io/ioutil"

	"github.com/hyperledger/fabric/core/comm"
)

type TLS struct {
	Enabled            bool
	CertFile           string
	KeyFile            string
	ClientCertRequired bool
	ClientCACertFiles  []string
}

func (t TLS) Config() (*tls.Config, error) {_cover_atomic_.AddUint32(&GoCover_2_383831363162653633366638.Count[0], 1);
	var tlsConfig *tls.Config

	if t.Enabled {_cover_atomic_.AddUint32(&GoCover_2_383831363162653633366638.Count[2], 1);
		cert, err := tls.LoadX509KeyPair(t.CertFile, t.KeyFile)
		if err != nil {_cover_atomic_.AddUint32(&GoCover_2_383831363162653633366638.Count[5], 1);
			return nil, err
		}
		_cover_atomic_.AddUint32(&GoCover_2_383831363162653633366638.Count[3], 1);caCertPool := x509.NewCertPool()
		for _, caPath := range t.ClientCACertFiles {_cover_atomic_.AddUint32(&GoCover_2_383831363162653633366638.Count[6], 1);
			caPem, err := ioutil.ReadFile(caPath)
			if err != nil {_cover_atomic_.AddUint32(&GoCover_2_383831363162653633366638.Count[8], 1);
				return nil, err
			}
			_cover_atomic_.AddUint32(&GoCover_2_383831363162653633366638.Count[7], 1);caCertPool.AppendCertsFromPEM(caPem)
		}
		_cover_atomic_.AddUint32(&GoCover_2_383831363162653633366638.Count[4], 1);tlsConfig = &tls.Config{
			Certificates: []tls.Certificate{cert},
			CipherSuites: comm.DefaultTLSCipherSuites,
			ClientCAs:    caCertPool,
		}
		if t.ClientCertRequired {_cover_atomic_.AddUint32(&GoCover_2_383831363162653633366638.Count[9], 1);
			tlsConfig.ClientAuth = tls.RequireAndVerifyClientCert
		} else{ _cover_atomic_.AddUint32(&GoCover_2_383831363162653633366638.Count[10], 1);{
			tlsConfig.ClientAuth = tls.VerifyClientCertIfGiven
		}}
	}

	_cover_atomic_.AddUint32(&GoCover_2_383831363162653633366638.Count[1], 1);return tlsConfig, nil
}

var GoCover_2_383831363162653633366638 = struct {
	Count     [11]uint32
	Pos       [3 * 11]uint32
	NumStmt   [11]uint16
} {
	Pos: [3 * 11]uint32{
		25, 28, 0xf002c, // [0]
		53, 53, 0x170002, // [1]
		28, 30, 0x11000f, // [2]
		33, 34, 0x2e0003, // [3]
		41, 46, 0x1b0003, // [4]
		30, 32, 0x40011, // [5]
		34, 36, 0x12002e, // [6]
		39, 39, 0x280004, // [7]
		36, 38, 0x50012, // [8]
		46, 48, 0x4001b, // [9]
		48, 50, 0x40009, // [10]
	},
	NumStmt: [11]uint16{
		2, // 0
		1, // 1
		2, // 2
		2, // 3
		2, // 4
		1, // 5
		2, // 6
		1, // 7
		1, // 8
		1, // 9
		1, // 10
	},
}
var _ = _cover_atomic_.LoadUint32
