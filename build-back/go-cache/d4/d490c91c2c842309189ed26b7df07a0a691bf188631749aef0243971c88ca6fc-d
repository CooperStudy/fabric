//line /home/cooper/go/src/github.com/hyperledger/fabric/idemix/nonrevocation-prover.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package idemix; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric-amcl/amcl"
	"github.com/hyperledger/fabric-amcl/amcl/FP256BN"
	"github.com/pkg/errors"
)

// nonRevokedProver is the Prover of the ZK proof system that handles revocation.
type nonRevokedProver interface {
	// getFSContribution returns the non-revocation contribution to the Fiat-Shamir hash, forming the challenge of the ZKP,
	getFSContribution(rh *FP256BN.BIG, rRh *FP256BN.BIG, cri *CredentialRevocationInformation, rng *amcl.RAND) ([]byte, error)

	// getNonRevokedProof returns a proof of non-revocation with the respect to passed challenge
	getNonRevokedProof(chal *FP256BN.BIG) (*NonRevocationProof, error)
}

// nopNonRevokedProver is an empty nonRevokedProver
type nopNonRevokedProver struct{}

func (prover *nopNonRevokedProver) getFSContribution(rh *FP256BN.BIG, rRh *FP256BN.BIG, cri *CredentialRevocationInformation, rng *amcl.RAND) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_4_633637303937343739336136.Count[0], 1);
	return nil, nil
}

func (prover *nopNonRevokedProver) getNonRevokedProof(chal *FP256BN.BIG) (*NonRevocationProof, error) {_cover_atomic_.AddUint32(&GoCover_4_633637303937343739336136.Count[1], 1);
	ret := &NonRevocationProof{}
	ret.RevocationAlg = int32(ALG_NO_REVOCATION)
	return ret, nil
}

// getNonRevocationProver returns the nonRevokedProver bound to the passed revocation algorithm
func getNonRevocationProver(algorithm RevocationAlgorithm) (nonRevokedProver, error) {_cover_atomic_.AddUint32(&GoCover_4_633637303937343739336136.Count[2], 1);
	switch algorithm {
	case ALG_NO_REVOCATION:_cover_atomic_.AddUint32(&GoCover_4_633637303937343739336136.Count[3], 1);
		return &nopNonRevokedProver{}, nil
	default:_cover_atomic_.AddUint32(&GoCover_4_633637303937343739336136.Count[4], 1);
		// unknown revocation algorithm
		return nil, errors.Errorf("unknown revocation algorithm %d", algorithm)
	}
}

var GoCover_4_633637303937343739336136 = struct {
	Count     [5]uint32
	Pos       [3 * 5]uint32
	NumStmt   [5]uint16
} {
	Pos: [3 * 5]uint32{
		27, 29, 0x2009f, // [0]
		31, 35, 0x20067, // [1]
		38, 39, 0x130056, // [2]
		40, 41, 0x250019, // [3]
		42, 44, 0x4a000a, // [4]
	},
	NumStmt: [5]uint16{
		1, // 0
		3, // 1
		1, // 2
		1, // 3
		1, // 4
	},
}
var _ = _cover_atomic_.LoadUint32
