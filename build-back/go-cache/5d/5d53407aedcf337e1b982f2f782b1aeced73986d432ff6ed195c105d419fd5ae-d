//line /home/cooper/go/src/github.com/hyperledger/fabric/protos/gossip/message.pb.go:1
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gossip/message.proto

package gossip; import _cover_atomic_ "sync/atomic" // import "github.com/hyperledger/fabric/protos/gossip"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/hyperledger/fabric/protos/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PullMsgType int32

const (
	PullMsgType_UNDEFINED    PullMsgType = 0
	PullMsgType_BLOCK_MSG    PullMsgType = 1
	PullMsgType_IDENTITY_MSG PullMsgType = 2
)

var PullMsgType_name = map[int32]string{
	0: "UNDEFINED",
	1: "BLOCK_MSG",
	2: "IDENTITY_MSG",
}
var PullMsgType_value = map[string]int32{
	"UNDEFINED":    0,
	"BLOCK_MSG":    1,
	"IDENTITY_MSG": 2,
}

func (x PullMsgType) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[0], 1);
	return proto.EnumName(PullMsgType_name, int32(x))
}
func (PullMsgType) EnumDescriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[1], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{0}
}

type GossipMessage_Tag int32

const (
	GossipMessage_UNDEFINED    GossipMessage_Tag = 0
	GossipMessage_EMPTY        GossipMessage_Tag = 1
	GossipMessage_ORG_ONLY     GossipMessage_Tag = 2
	GossipMessage_CHAN_ONLY    GossipMessage_Tag = 3
	GossipMessage_CHAN_AND_ORG GossipMessage_Tag = 4
	GossipMessage_CHAN_OR_ORG  GossipMessage_Tag = 5
)

var GossipMessage_Tag_name = map[int32]string{
	0: "UNDEFINED",
	1: "EMPTY",
	2: "ORG_ONLY",
	3: "CHAN_ONLY",
	4: "CHAN_AND_ORG",
	5: "CHAN_OR_ORG",
}
var GossipMessage_Tag_value = map[string]int32{
	"UNDEFINED":    0,
	"EMPTY":        1,
	"ORG_ONLY":     2,
	"CHAN_ONLY":    3,
	"CHAN_AND_ORG": 4,
	"CHAN_OR_ORG":  5,
}

func (x GossipMessage_Tag) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[2], 1);
	return proto.EnumName(GossipMessage_Tag_name, int32(x))
}
func (GossipMessage_Tag) EnumDescriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[3], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{3, 0}
}

// Envelope contains a marshalled
// GossipMessage and a signature over it.
// It may also contain a SecretEnvelope
// which is a marshalled Secret
type Envelope struct {
	Payload              []byte          `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature            []byte          `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	SecretEnvelope       *SecretEnvelope `protobuf:"bytes,3,opt,name=secret_envelope,json=secretEnvelope,proto3" json:"secret_envelope,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Envelope) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[4], 1); *m = Envelope{} }
func (m *Envelope) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[5], 1); return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[6], 1);}
func (*Envelope) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[7], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{0}
}
func (m *Envelope) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[8], 1);
	return xxx_messageInfo_Envelope.Unmarshal(m, b)
}
func (m *Envelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[9], 1);
	return xxx_messageInfo_Envelope.Marshal(b, m, deterministic)
}
func (dst *Envelope) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[10], 1);
	xxx_messageInfo_Envelope.Merge(dst, src)
}
func (m *Envelope) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[11], 1);
	return xxx_messageInfo_Envelope.Size(m)
}
func (m *Envelope) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[12], 1);
	xxx_messageInfo_Envelope.DiscardUnknown(m)
}

var xxx_messageInfo_Envelope proto.InternalMessageInfo

func (m *Envelope) GetPayload() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[13], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[15], 1);
		return m.Payload
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[14], 1);return nil
}

func (m *Envelope) GetSignature() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[16], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[18], 1);
		return m.Signature
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[17], 1);return nil
}

func (m *Envelope) GetSecretEnvelope() *SecretEnvelope {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[19], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[21], 1);
		return m.SecretEnvelope
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[20], 1);return nil
}

// SecretEnvelope is a marshalled Secret
// and a signature over it.
// The signature should be validated by the peer
// that signed the Envelope the SecretEnvelope
// came with
type SecretEnvelope struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SecretEnvelope) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[22], 1); *m = SecretEnvelope{} }
func (m *SecretEnvelope) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[23], 1); return proto.CompactTextString(m) }
func (*SecretEnvelope) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[24], 1);}
func (*SecretEnvelope) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[25], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{1}
}
func (m *SecretEnvelope) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[26], 1);
	return xxx_messageInfo_SecretEnvelope.Unmarshal(m, b)
}
func (m *SecretEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[27], 1);
	return xxx_messageInfo_SecretEnvelope.Marshal(b, m, deterministic)
}
func (dst *SecretEnvelope) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[28], 1);
	xxx_messageInfo_SecretEnvelope.Merge(dst, src)
}
func (m *SecretEnvelope) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[29], 1);
	return xxx_messageInfo_SecretEnvelope.Size(m)
}
func (m *SecretEnvelope) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[30], 1);
	xxx_messageInfo_SecretEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_SecretEnvelope proto.InternalMessageInfo

func (m *SecretEnvelope) GetPayload() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[31], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[33], 1);
		return m.Payload
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[32], 1);return nil
}

func (m *SecretEnvelope) GetSignature() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[34], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[36], 1);
		return m.Signature
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[35], 1);return nil
}

// Secret is an entity that might be omitted
// from an Envelope when the remote peer that is receiving
// the Envelope shouldn't know the secret's content.
type Secret struct {
	// Types that are valid to be assigned to Content:
	//	*Secret_InternalEndpoint
	Content              isSecret_Content `protobuf_oneof:"content"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Secret) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[37], 1); *m = Secret{} }
func (m *Secret) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[38], 1); return proto.CompactTextString(m) }
func (*Secret) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[39], 1);}
func (*Secret) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[40], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{2}
}
func (m *Secret) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[41], 1);
	return xxx_messageInfo_Secret.Unmarshal(m, b)
}
func (m *Secret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[42], 1);
	return xxx_messageInfo_Secret.Marshal(b, m, deterministic)
}
func (dst *Secret) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[43], 1);
	xxx_messageInfo_Secret.Merge(dst, src)
}
func (m *Secret) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[44], 1);
	return xxx_messageInfo_Secret.Size(m)
}
func (m *Secret) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[45], 1);
	xxx_messageInfo_Secret.DiscardUnknown(m)
}

var xxx_messageInfo_Secret proto.InternalMessageInfo

type isSecret_Content interface {
	isSecret_Content()
}

type Secret_InternalEndpoint struct {
	InternalEndpoint string `protobuf:"bytes,1,opt,name=internalEndpoint,proto3,oneof"`
}

func (*Secret_InternalEndpoint) isSecret_Content() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[46], 1);}

func (m *Secret) GetContent() isSecret_Content {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[47], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[49], 1);
		return m.Content
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[48], 1);return nil
}

func (m *Secret) GetInternalEndpoint() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[50], 1);
	if x, ok := m.GetContent().(*Secret_InternalEndpoint); ok {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[52], 1);
		return x.InternalEndpoint
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[51], 1);return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Secret) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[53], 1);
	return _Secret_OneofMarshaler, _Secret_OneofUnmarshaler, _Secret_OneofSizer, []interface{}{
		(*Secret_InternalEndpoint)(nil),
	}
}

func _Secret_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[54], 1);
	m := msg.(*Secret)
	// content
	switch x := m.Content.(type) {
	case *Secret_InternalEndpoint:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[56], 1);
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.InternalEndpoint)
	case nil:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[57], 1);
	default:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[58], 1);
		return fmt.Errorf("Secret.Content has unexpected type %T", x)
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[55], 1);return nil
}

func _Secret_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[59], 1);
	m := msg.(*Secret)
	switch tag {
	case 1:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[60], 1); // content.internalEndpoint
		if wire != proto.WireBytes {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[63], 1);
			return true, proto.ErrInternalBadWireType
		}
		_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[61], 1);x, err := b.DecodeStringBytes()
		m.Content = &Secret_InternalEndpoint{x}
		return true, err
	default:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[62], 1);
		return false, nil
	}
}

func _Secret_OneofSizer(msg proto.Message) (n int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[64], 1);
	m := msg.(*Secret)
	// content
	switch x := m.Content.(type) {
	case *Secret_InternalEndpoint:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[66], 1);
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.InternalEndpoint)))
		n += len(x.InternalEndpoint)
	case nil:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[67], 1);
	default:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[68], 1);
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[65], 1);return n
}

// GossipMessage defines the message sent in a gossip network
type GossipMessage struct {
	// used mainly for testing, but will might be used in the future
	// for ensuring message delivery by acking
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The channel of the message.
	// Some GossipMessages may set this to nil, because
	// they are cross-channels but some may not
	Channel []byte `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	// determines to which peers it is allowed
	// to forward the message
	Tag GossipMessage_Tag `protobuf:"varint,3,opt,name=tag,proto3,enum=gossip.GossipMessage_Tag" json:"tag,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*GossipMessage_AliveMsg
	//	*GossipMessage_MemReq
	//	*GossipMessage_MemRes
	//	*GossipMessage_DataMsg
	//	*GossipMessage_Hello
	//	*GossipMessage_DataDig
	//	*GossipMessage_DataReq
	//	*GossipMessage_DataUpdate
	//	*GossipMessage_Empty
	//	*GossipMessage_Conn
	//	*GossipMessage_StateInfo
	//	*GossipMessage_StateSnapshot
	//	*GossipMessage_StateInfoPullReq
	//	*GossipMessage_StateRequest
	//	*GossipMessage_StateResponse
	//	*GossipMessage_LeadershipMsg
	//	*GossipMessage_PeerIdentity
	//	*GossipMessage_Ack
	//	*GossipMessage_PrivateReq
	//	*GossipMessage_PrivateRes
	//	*GossipMessage_PrivateData
	Content              isGossipMessage_Content `protobuf_oneof:"content"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GossipMessage) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[69], 1); *m = GossipMessage{} }
func (m *GossipMessage) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[70], 1); return proto.CompactTextString(m) }
func (*GossipMessage) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[71], 1);}
func (*GossipMessage) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[72], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{3}
}
func (m *GossipMessage) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[73], 1);
	return xxx_messageInfo_GossipMessage.Unmarshal(m, b)
}
func (m *GossipMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[74], 1);
	return xxx_messageInfo_GossipMessage.Marshal(b, m, deterministic)
}
func (dst *GossipMessage) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[75], 1);
	xxx_messageInfo_GossipMessage.Merge(dst, src)
}
func (m *GossipMessage) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[76], 1);
	return xxx_messageInfo_GossipMessage.Size(m)
}
func (m *GossipMessage) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[77], 1);
	xxx_messageInfo_GossipMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GossipMessage proto.InternalMessageInfo

func (m *GossipMessage) GetNonce() uint64 {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[78], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[80], 1);
		return m.Nonce
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[79], 1);return 0
}

func (m *GossipMessage) GetChannel() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[81], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[83], 1);
		return m.Channel
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[82], 1);return nil
}

func (m *GossipMessage) GetTag() GossipMessage_Tag {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[84], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[86], 1);
		return m.Tag
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[85], 1);return GossipMessage_UNDEFINED
}

type isGossipMessage_Content interface {
	isGossipMessage_Content()
}

type GossipMessage_AliveMsg struct {
	AliveMsg *AliveMessage `protobuf:"bytes,5,opt,name=alive_msg,json=aliveMsg,proto3,oneof"`
}

type GossipMessage_MemReq struct {
	MemReq *MembershipRequest `protobuf:"bytes,6,opt,name=mem_req,json=memReq,proto3,oneof"`
}

type GossipMessage_MemRes struct {
	MemRes *MembershipResponse `protobuf:"bytes,7,opt,name=mem_res,json=memRes,proto3,oneof"`
}

type GossipMessage_DataMsg struct {
	DataMsg *DataMessage `protobuf:"bytes,8,opt,name=data_msg,json=dataMsg,proto3,oneof"`
}

type GossipMessage_Hello struct {
	Hello *GossipHello `protobuf:"bytes,9,opt,name=hello,proto3,oneof"`
}

type GossipMessage_DataDig struct {
	DataDig *DataDigest `protobuf:"bytes,10,opt,name=data_dig,json=dataDig,proto3,oneof"`
}

type GossipMessage_DataReq struct {
	DataReq *DataRequest `protobuf:"bytes,11,opt,name=data_req,json=dataReq,proto3,oneof"`
}

type GossipMessage_DataUpdate struct {
	DataUpdate *DataUpdate `protobuf:"bytes,12,opt,name=data_update,json=dataUpdate,proto3,oneof"`
}

type GossipMessage_Empty struct {
	Empty *Empty `protobuf:"bytes,13,opt,name=empty,proto3,oneof"`
}

type GossipMessage_Conn struct {
	Conn *ConnEstablish `protobuf:"bytes,14,opt,name=conn,proto3,oneof"`
}

type GossipMessage_StateInfo struct {
	StateInfo *StateInfo `protobuf:"bytes,15,opt,name=state_info,json=stateInfo,proto3,oneof"`
}

type GossipMessage_StateSnapshot struct {
	StateSnapshot *StateInfoSnapshot `protobuf:"bytes,16,opt,name=state_snapshot,json=stateSnapshot,proto3,oneof"`
}

type GossipMessage_StateInfoPullReq struct {
	StateInfoPullReq *StateInfoPullRequest `protobuf:"bytes,17,opt,name=state_info_pull_req,json=stateInfoPullReq,proto3,oneof"`
}

type GossipMessage_StateRequest struct {
	StateRequest *RemoteStateRequest `protobuf:"bytes,18,opt,name=state_request,json=stateRequest,proto3,oneof"`
}

type GossipMessage_StateResponse struct {
	StateResponse *RemoteStateResponse `protobuf:"bytes,19,opt,name=state_response,json=stateResponse,proto3,oneof"`
}

type GossipMessage_LeadershipMsg struct {
	LeadershipMsg *LeadershipMessage `protobuf:"bytes,20,opt,name=leadership_msg,json=leadershipMsg,proto3,oneof"`
}

type GossipMessage_PeerIdentity struct {
	PeerIdentity *PeerIdentity `protobuf:"bytes,21,opt,name=peer_identity,json=peerIdentity,proto3,oneof"`
}

type GossipMessage_Ack struct {
	Ack *Acknowledgement `protobuf:"bytes,22,opt,name=ack,proto3,oneof"`
}

type GossipMessage_PrivateReq struct {
	PrivateReq *RemotePvtDataRequest `protobuf:"bytes,23,opt,name=privateReq,proto3,oneof"`
}

type GossipMessage_PrivateRes struct {
	PrivateRes *RemotePvtDataResponse `protobuf:"bytes,24,opt,name=privateRes,proto3,oneof"`
}

type GossipMessage_PrivateData struct {
	PrivateData *PrivateDataMessage `protobuf:"bytes,25,opt,name=private_data,json=privateData,proto3,oneof"`
}

func (*GossipMessage_AliveMsg) isGossipMessage_Content() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[87], 1);}

func (*GossipMessage_MemReq) isGossipMessage_Content() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[88], 1);}

func (*GossipMessage_MemRes) isGossipMessage_Content() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[89], 1);}

func (*GossipMessage_DataMsg) isGossipMessage_Content() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[90], 1);}

func (*GossipMessage_Hello) isGossipMessage_Content() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[91], 1);}

func (*GossipMessage_DataDig) isGossipMessage_Content() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[92], 1);}

func (*GossipMessage_DataReq) isGossipMessage_Content() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[93], 1);}

func (*GossipMessage_DataUpdate) isGossipMessage_Content() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[94], 1);}

func (*GossipMessage_Empty) isGossipMessage_Content() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[95], 1);}

func (*GossipMessage_Conn) isGossipMessage_Content() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[96], 1);}

func (*GossipMessage_StateInfo) isGossipMessage_Content() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[97], 1);}

func (*GossipMessage_StateSnapshot) isGossipMessage_Content() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[98], 1);}

func (*GossipMessage_StateInfoPullReq) isGossipMessage_Content() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[99], 1);}

func (*GossipMessage_StateRequest) isGossipMessage_Content() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[100], 1);}

func (*GossipMessage_StateResponse) isGossipMessage_Content() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[101], 1);}

func (*GossipMessage_LeadershipMsg) isGossipMessage_Content() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[102], 1);}

func (*GossipMessage_PeerIdentity) isGossipMessage_Content() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[103], 1);}

func (*GossipMessage_Ack) isGossipMessage_Content() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[104], 1);}

func (*GossipMessage_PrivateReq) isGossipMessage_Content() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[105], 1);}

func (*GossipMessage_PrivateRes) isGossipMessage_Content() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[106], 1);}

func (*GossipMessage_PrivateData) isGossipMessage_Content() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[107], 1);}

func (m *GossipMessage) GetContent() isGossipMessage_Content {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[108], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[110], 1);
		return m.Content
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[109], 1);return nil
}

func (m *GossipMessage) GetAliveMsg() *AliveMessage {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[111], 1);
	if x, ok := m.GetContent().(*GossipMessage_AliveMsg); ok {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[113], 1);
		return x.AliveMsg
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[112], 1);return nil
}

func (m *GossipMessage) GetMemReq() *MembershipRequest {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[114], 1);
	if x, ok := m.GetContent().(*GossipMessage_MemReq); ok {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[116], 1);
		return x.MemReq
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[115], 1);return nil
}

func (m *GossipMessage) GetMemRes() *MembershipResponse {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[117], 1);
	if x, ok := m.GetContent().(*GossipMessage_MemRes); ok {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[119], 1);
		return x.MemRes
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[118], 1);return nil
}

func (m *GossipMessage) GetDataMsg() *DataMessage {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[120], 1);
	if x, ok := m.GetContent().(*GossipMessage_DataMsg); ok {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[122], 1);
		return x.DataMsg
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[121], 1);return nil
}

func (m *GossipMessage) GetHello() *GossipHello {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[123], 1);
	if x, ok := m.GetContent().(*GossipMessage_Hello); ok {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[125], 1);
		return x.Hello
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[124], 1);return nil
}

func (m *GossipMessage) GetDataDig() *DataDigest {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[126], 1);
	if x, ok := m.GetContent().(*GossipMessage_DataDig); ok {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[128], 1);
		return x.DataDig
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[127], 1);return nil
}

func (m *GossipMessage) GetDataReq() *DataRequest {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[129], 1);
	if x, ok := m.GetContent().(*GossipMessage_DataReq); ok {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[131], 1);
		return x.DataReq
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[130], 1);return nil
}

func (m *GossipMessage) GetDataUpdate() *DataUpdate {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[132], 1);
	if x, ok := m.GetContent().(*GossipMessage_DataUpdate); ok {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[134], 1);
		return x.DataUpdate
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[133], 1);return nil
}

func (m *GossipMessage) GetEmpty() *Empty {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[135], 1);
	if x, ok := m.GetContent().(*GossipMessage_Empty); ok {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[137], 1);
		return x.Empty
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[136], 1);return nil
}

func (m *GossipMessage) GetConn() *ConnEstablish {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[138], 1);
	if x, ok := m.GetContent().(*GossipMessage_Conn); ok {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[140], 1);
		return x.Conn
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[139], 1);return nil
}

func (m *GossipMessage) GetStateInfo() *StateInfo {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[141], 1);
	if x, ok := m.GetContent().(*GossipMessage_StateInfo); ok {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[143], 1);
		return x.StateInfo
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[142], 1);return nil
}

func (m *GossipMessage) GetStateSnapshot() *StateInfoSnapshot {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[144], 1);
	if x, ok := m.GetContent().(*GossipMessage_StateSnapshot); ok {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[146], 1);
		return x.StateSnapshot
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[145], 1);return nil
}

func (m *GossipMessage) GetStateInfoPullReq() *StateInfoPullRequest {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[147], 1);
	if x, ok := m.GetContent().(*GossipMessage_StateInfoPullReq); ok {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[149], 1);
		return x.StateInfoPullReq
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[148], 1);return nil
}

func (m *GossipMessage) GetStateRequest() *RemoteStateRequest {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[150], 1);
	if x, ok := m.GetContent().(*GossipMessage_StateRequest); ok {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[152], 1);
		return x.StateRequest
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[151], 1);return nil
}

func (m *GossipMessage) GetStateResponse() *RemoteStateResponse {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[153], 1);
	if x, ok := m.GetContent().(*GossipMessage_StateResponse); ok {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[155], 1);
		return x.StateResponse
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[154], 1);return nil
}

func (m *GossipMessage) GetLeadershipMsg() *LeadershipMessage {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[156], 1);
	if x, ok := m.GetContent().(*GossipMessage_LeadershipMsg); ok {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[158], 1);
		return x.LeadershipMsg
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[157], 1);return nil
}

func (m *GossipMessage) GetPeerIdentity() *PeerIdentity {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[159], 1);
	if x, ok := m.GetContent().(*GossipMessage_PeerIdentity); ok {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[161], 1);
		return x.PeerIdentity
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[160], 1);return nil
}

func (m *GossipMessage) GetAck() *Acknowledgement {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[162], 1);
	if x, ok := m.GetContent().(*GossipMessage_Ack); ok {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[164], 1);
		return x.Ack
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[163], 1);return nil
}

func (m *GossipMessage) GetPrivateReq() *RemotePvtDataRequest {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[165], 1);
	if x, ok := m.GetContent().(*GossipMessage_PrivateReq); ok {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[167], 1);
		return x.PrivateReq
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[166], 1);return nil
}

func (m *GossipMessage) GetPrivateRes() *RemotePvtDataResponse {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[168], 1);
	if x, ok := m.GetContent().(*GossipMessage_PrivateRes); ok {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[170], 1);
		return x.PrivateRes
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[169], 1);return nil
}

func (m *GossipMessage) GetPrivateData() *PrivateDataMessage {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[171], 1);
	if x, ok := m.GetContent().(*GossipMessage_PrivateData); ok {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[173], 1);
		return x.PrivateData
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[172], 1);return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GossipMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[174], 1);
	return _GossipMessage_OneofMarshaler, _GossipMessage_OneofUnmarshaler, _GossipMessage_OneofSizer, []interface{}{
		(*GossipMessage_AliveMsg)(nil),
		(*GossipMessage_MemReq)(nil),
		(*GossipMessage_MemRes)(nil),
		(*GossipMessage_DataMsg)(nil),
		(*GossipMessage_Hello)(nil),
		(*GossipMessage_DataDig)(nil),
		(*GossipMessage_DataReq)(nil),
		(*GossipMessage_DataUpdate)(nil),
		(*GossipMessage_Empty)(nil),
		(*GossipMessage_Conn)(nil),
		(*GossipMessage_StateInfo)(nil),
		(*GossipMessage_StateSnapshot)(nil),
		(*GossipMessage_StateInfoPullReq)(nil),
		(*GossipMessage_StateRequest)(nil),
		(*GossipMessage_StateResponse)(nil),
		(*GossipMessage_LeadershipMsg)(nil),
		(*GossipMessage_PeerIdentity)(nil),
		(*GossipMessage_Ack)(nil),
		(*GossipMessage_PrivateReq)(nil),
		(*GossipMessage_PrivateRes)(nil),
		(*GossipMessage_PrivateData)(nil),
	}
}

func _GossipMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[175], 1);
	m := msg.(*GossipMessage)
	// content
	switch x := m.Content.(type) {
	case *GossipMessage_AliveMsg:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[177], 1);
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AliveMsg); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[200], 1);
			return err
		}
	case *GossipMessage_MemReq:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[178], 1);
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MemReq); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[201], 1);
			return err
		}
	case *GossipMessage_MemRes:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[179], 1);
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MemRes); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[202], 1);
			return err
		}
	case *GossipMessage_DataMsg:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[180], 1);
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DataMsg); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[203], 1);
			return err
		}
	case *GossipMessage_Hello:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[181], 1);
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hello); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[204], 1);
			return err
		}
	case *GossipMessage_DataDig:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[182], 1);
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DataDig); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[205], 1);
			return err
		}
	case *GossipMessage_DataReq:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[183], 1);
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DataReq); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[206], 1);
			return err
		}
	case *GossipMessage_DataUpdate:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[184], 1);
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DataUpdate); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[207], 1);
			return err
		}
	case *GossipMessage_Empty:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[185], 1);
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Empty); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[208], 1);
			return err
		}
	case *GossipMessage_Conn:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[186], 1);
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Conn); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[209], 1);
			return err
		}
	case *GossipMessage_StateInfo:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[187], 1);
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StateInfo); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[210], 1);
			return err
		}
	case *GossipMessage_StateSnapshot:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[188], 1);
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StateSnapshot); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[211], 1);
			return err
		}
	case *GossipMessage_StateInfoPullReq:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[189], 1);
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StateInfoPullReq); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[212], 1);
			return err
		}
	case *GossipMessage_StateRequest:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[190], 1);
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StateRequest); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[213], 1);
			return err
		}
	case *GossipMessage_StateResponse:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[191], 1);
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StateResponse); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[214], 1);
			return err
		}
	case *GossipMessage_LeadershipMsg:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[192], 1);
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LeadershipMsg); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[215], 1);
			return err
		}
	case *GossipMessage_PeerIdentity:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[193], 1);
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PeerIdentity); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[216], 1);
			return err
		}
	case *GossipMessage_Ack:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[194], 1);
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ack); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[217], 1);
			return err
		}
	case *GossipMessage_PrivateReq:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[195], 1);
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrivateReq); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[218], 1);
			return err
		}
	case *GossipMessage_PrivateRes:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[196], 1);
		b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrivateRes); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[219], 1);
			return err
		}
	case *GossipMessage_PrivateData:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[197], 1);
		b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrivateData); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[220], 1);
			return err
		}
	case nil:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[198], 1);
	default:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[199], 1);
		return fmt.Errorf("GossipMessage.Content has unexpected type %T", x)
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[176], 1);return nil
}

func _GossipMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[221], 1);
	m := msg.(*GossipMessage)
	switch tag {
	case 5:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[222], 1); // content.alive_msg
		if wire != proto.WireBytes {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[265], 1);
			return true, proto.ErrInternalBadWireType
		}
		_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[223], 1);msg := new(AliveMessage)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_AliveMsg{msg}
		return true, err
	case 6:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[224], 1); // content.mem_req
		if wire != proto.WireBytes {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[266], 1);
			return true, proto.ErrInternalBadWireType
		}
		_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[225], 1);msg := new(MembershipRequest)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_MemReq{msg}
		return true, err
	case 7:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[226], 1); // content.mem_res
		if wire != proto.WireBytes {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[267], 1);
			return true, proto.ErrInternalBadWireType
		}
		_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[227], 1);msg := new(MembershipResponse)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_MemRes{msg}
		return true, err
	case 8:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[228], 1); // content.data_msg
		if wire != proto.WireBytes {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[268], 1);
			return true, proto.ErrInternalBadWireType
		}
		_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[229], 1);msg := new(DataMessage)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_DataMsg{msg}
		return true, err
	case 9:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[230], 1); // content.hello
		if wire != proto.WireBytes {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[269], 1);
			return true, proto.ErrInternalBadWireType
		}
		_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[231], 1);msg := new(GossipHello)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_Hello{msg}
		return true, err
	case 10:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[232], 1); // content.data_dig
		if wire != proto.WireBytes {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[270], 1);
			return true, proto.ErrInternalBadWireType
		}
		_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[233], 1);msg := new(DataDigest)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_DataDig{msg}
		return true, err
	case 11:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[234], 1); // content.data_req
		if wire != proto.WireBytes {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[271], 1);
			return true, proto.ErrInternalBadWireType
		}
		_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[235], 1);msg := new(DataRequest)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_DataReq{msg}
		return true, err
	case 12:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[236], 1); // content.data_update
		if wire != proto.WireBytes {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[272], 1);
			return true, proto.ErrInternalBadWireType
		}
		_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[237], 1);msg := new(DataUpdate)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_DataUpdate{msg}
		return true, err
	case 13:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[238], 1); // content.empty
		if wire != proto.WireBytes {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[273], 1);
			return true, proto.ErrInternalBadWireType
		}
		_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[239], 1);msg := new(Empty)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_Empty{msg}
		return true, err
	case 14:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[240], 1); // content.conn
		if wire != proto.WireBytes {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[274], 1);
			return true, proto.ErrInternalBadWireType
		}
		_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[241], 1);msg := new(ConnEstablish)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_Conn{msg}
		return true, err
	case 15:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[242], 1); // content.state_info
		if wire != proto.WireBytes {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[275], 1);
			return true, proto.ErrInternalBadWireType
		}
		_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[243], 1);msg := new(StateInfo)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_StateInfo{msg}
		return true, err
	case 16:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[244], 1); // content.state_snapshot
		if wire != proto.WireBytes {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[276], 1);
			return true, proto.ErrInternalBadWireType
		}
		_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[245], 1);msg := new(StateInfoSnapshot)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_StateSnapshot{msg}
		return true, err
	case 17:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[246], 1); // content.state_info_pull_req
		if wire != proto.WireBytes {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[277], 1);
			return true, proto.ErrInternalBadWireType
		}
		_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[247], 1);msg := new(StateInfoPullRequest)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_StateInfoPullReq{msg}
		return true, err
	case 18:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[248], 1); // content.state_request
		if wire != proto.WireBytes {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[278], 1);
			return true, proto.ErrInternalBadWireType
		}
		_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[249], 1);msg := new(RemoteStateRequest)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_StateRequest{msg}
		return true, err
	case 19:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[250], 1); // content.state_response
		if wire != proto.WireBytes {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[279], 1);
			return true, proto.ErrInternalBadWireType
		}
		_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[251], 1);msg := new(RemoteStateResponse)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_StateResponse{msg}
		return true, err
	case 20:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[252], 1); // content.leadership_msg
		if wire != proto.WireBytes {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[280], 1);
			return true, proto.ErrInternalBadWireType
		}
		_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[253], 1);msg := new(LeadershipMessage)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_LeadershipMsg{msg}
		return true, err
	case 21:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[254], 1); // content.peer_identity
		if wire != proto.WireBytes {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[281], 1);
			return true, proto.ErrInternalBadWireType
		}
		_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[255], 1);msg := new(PeerIdentity)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_PeerIdentity{msg}
		return true, err
	case 22:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[256], 1); // content.ack
		if wire != proto.WireBytes {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[282], 1);
			return true, proto.ErrInternalBadWireType
		}
		_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[257], 1);msg := new(Acknowledgement)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_Ack{msg}
		return true, err
	case 23:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[258], 1); // content.privateReq
		if wire != proto.WireBytes {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[283], 1);
			return true, proto.ErrInternalBadWireType
		}
		_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[259], 1);msg := new(RemotePvtDataRequest)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_PrivateReq{msg}
		return true, err
	case 24:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[260], 1); // content.privateRes
		if wire != proto.WireBytes {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[284], 1);
			return true, proto.ErrInternalBadWireType
		}
		_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[261], 1);msg := new(RemotePvtDataResponse)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_PrivateRes{msg}
		return true, err
	case 25:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[262], 1); // content.private_data
		if wire != proto.WireBytes {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[285], 1);
			return true, proto.ErrInternalBadWireType
		}
		_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[263], 1);msg := new(PrivateDataMessage)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_PrivateData{msg}
		return true, err
	default:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[264], 1);
		return false, nil
	}
}

func _GossipMessage_OneofSizer(msg proto.Message) (n int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[286], 1);
	m := msg.(*GossipMessage)
	// content
	switch x := m.Content.(type) {
	case *GossipMessage_AliveMsg:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[288], 1);
		s := proto.Size(x.AliveMsg)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_MemReq:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[289], 1);
		s := proto.Size(x.MemReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_MemRes:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[290], 1);
		s := proto.Size(x.MemRes)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_DataMsg:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[291], 1);
		s := proto.Size(x.DataMsg)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_Hello:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[292], 1);
		s := proto.Size(x.Hello)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_DataDig:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[293], 1);
		s := proto.Size(x.DataDig)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_DataReq:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[294], 1);
		s := proto.Size(x.DataReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_DataUpdate:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[295], 1);
		s := proto.Size(x.DataUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_Empty:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[296], 1);
		s := proto.Size(x.Empty)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_Conn:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[297], 1);
		s := proto.Size(x.Conn)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_StateInfo:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[298], 1);
		s := proto.Size(x.StateInfo)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_StateSnapshot:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[299], 1);
		s := proto.Size(x.StateSnapshot)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_StateInfoPullReq:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[300], 1);
		s := proto.Size(x.StateInfoPullReq)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_StateRequest:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[301], 1);
		s := proto.Size(x.StateRequest)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_StateResponse:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[302], 1);
		s := proto.Size(x.StateResponse)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_LeadershipMsg:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[303], 1);
		s := proto.Size(x.LeadershipMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_PeerIdentity:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[304], 1);
		s := proto.Size(x.PeerIdentity)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_Ack:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[305], 1);
		s := proto.Size(x.Ack)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_PrivateReq:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[306], 1);
		s := proto.Size(x.PrivateReq)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_PrivateRes:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[307], 1);
		s := proto.Size(x.PrivateRes)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_PrivateData:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[308], 1);
		s := proto.Size(x.PrivateData)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[309], 1);
	default:_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[310], 1);
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[287], 1);return n
}

// StateInfo is used for a peer to relay its state information
// to other peers
type StateInfo struct {
	Timestamp *PeerTime `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PkiId     []byte    `protobuf:"bytes,3,opt,name=pki_id,json=pkiId,proto3" json:"pki_id,omitempty"`
	// channel_MAC is an authentication code that proves
	// that the peer that sent this message knows
	// the name of the channel.
	Channel_MAC          []byte      `protobuf:"bytes,4,opt,name=channel_MAC,json=channelMAC,proto3" json:"channel_MAC,omitempty"`
	Properties           *Properties `protobuf:"bytes,5,opt,name=properties,proto3" json:"properties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *StateInfo) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[311], 1); *m = StateInfo{} }
func (m *StateInfo) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[312], 1); return proto.CompactTextString(m) }
func (*StateInfo) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[313], 1);}
func (*StateInfo) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[314], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{4}
}
func (m *StateInfo) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[315], 1);
	return xxx_messageInfo_StateInfo.Unmarshal(m, b)
}
func (m *StateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[316], 1);
	return xxx_messageInfo_StateInfo.Marshal(b, m, deterministic)
}
func (dst *StateInfo) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[317], 1);
	xxx_messageInfo_StateInfo.Merge(dst, src)
}
func (m *StateInfo) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[318], 1);
	return xxx_messageInfo_StateInfo.Size(m)
}
func (m *StateInfo) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[319], 1);
	xxx_messageInfo_StateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StateInfo proto.InternalMessageInfo

func (m *StateInfo) GetTimestamp() *PeerTime {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[320], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[322], 1);
		return m.Timestamp
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[321], 1);return nil
}

func (m *StateInfo) GetPkiId() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[323], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[325], 1);
		return m.PkiId
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[324], 1);return nil
}

func (m *StateInfo) GetChannel_MAC() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[326], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[328], 1);
		return m.Channel_MAC
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[327], 1);return nil
}

func (m *StateInfo) GetProperties() *Properties {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[329], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[331], 1);
		return m.Properties
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[330], 1);return nil
}

type Properties struct {
	LedgerHeight         uint64       `protobuf:"varint,1,opt,name=ledger_height,json=ledgerHeight,proto3" json:"ledger_height,omitempty"`
	LeftChannel          bool         `protobuf:"varint,2,opt,name=left_channel,json=leftChannel,proto3" json:"left_channel,omitempty"`
	Chaincodes           []*Chaincode `protobuf:"bytes,3,rep,name=chaincodes,proto3" json:"chaincodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Properties) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[332], 1); *m = Properties{} }
func (m *Properties) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[333], 1); return proto.CompactTextString(m) }
func (*Properties) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[334], 1);}
func (*Properties) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[335], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{5}
}
func (m *Properties) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[336], 1);
	return xxx_messageInfo_Properties.Unmarshal(m, b)
}
func (m *Properties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[337], 1);
	return xxx_messageInfo_Properties.Marshal(b, m, deterministic)
}
func (dst *Properties) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[338], 1);
	xxx_messageInfo_Properties.Merge(dst, src)
}
func (m *Properties) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[339], 1);
	return xxx_messageInfo_Properties.Size(m)
}
func (m *Properties) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[340], 1);
	xxx_messageInfo_Properties.DiscardUnknown(m)
}

var xxx_messageInfo_Properties proto.InternalMessageInfo

func (m *Properties) GetLedgerHeight() uint64 {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[341], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[343], 1);
		return m.LedgerHeight
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[342], 1);return 0
}

func (m *Properties) GetLeftChannel() bool {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[344], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[346], 1);
		return m.LeftChannel
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[345], 1);return false
}

func (m *Properties) GetChaincodes() []*Chaincode {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[347], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[349], 1);
		return m.Chaincodes
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[348], 1);return nil
}

// StateInfoSnapshot is an aggregation of StateInfo messages
type StateInfoSnapshot struct {
	Elements             []*Envelope `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *StateInfoSnapshot) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[350], 1); *m = StateInfoSnapshot{} }
func (m *StateInfoSnapshot) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[351], 1); return proto.CompactTextString(m) }
func (*StateInfoSnapshot) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[352], 1);}
func (*StateInfoSnapshot) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[353], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{6}
}
func (m *StateInfoSnapshot) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[354], 1);
	return xxx_messageInfo_StateInfoSnapshot.Unmarshal(m, b)
}
func (m *StateInfoSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[355], 1);
	return xxx_messageInfo_StateInfoSnapshot.Marshal(b, m, deterministic)
}
func (dst *StateInfoSnapshot) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[356], 1);
	xxx_messageInfo_StateInfoSnapshot.Merge(dst, src)
}
func (m *StateInfoSnapshot) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[357], 1);
	return xxx_messageInfo_StateInfoSnapshot.Size(m)
}
func (m *StateInfoSnapshot) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[358], 1);
	xxx_messageInfo_StateInfoSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_StateInfoSnapshot proto.InternalMessageInfo

func (m *StateInfoSnapshot) GetElements() []*Envelope {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[359], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[361], 1);
		return m.Elements
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[360], 1);return nil
}

// StateInfoPullRequest is used to fetch a StateInfoSnapshot
// from a remote peer
type StateInfoPullRequest struct {
	// channel_MAC is an authentication code that proves
	// that the peer that sent this message knows
	// the name of the channel.
	Channel_MAC          []byte   `protobuf:"bytes,1,opt,name=channel_MAC,json=channelMAC,proto3" json:"channel_MAC,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateInfoPullRequest) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[362], 1); *m = StateInfoPullRequest{} }
func (m *StateInfoPullRequest) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[363], 1); return proto.CompactTextString(m) }
func (*StateInfoPullRequest) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[364], 1);}
func (*StateInfoPullRequest) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[365], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{7}
}
func (m *StateInfoPullRequest) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[366], 1);
	return xxx_messageInfo_StateInfoPullRequest.Unmarshal(m, b)
}
func (m *StateInfoPullRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[367], 1);
	return xxx_messageInfo_StateInfoPullRequest.Marshal(b, m, deterministic)
}
func (dst *StateInfoPullRequest) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[368], 1);
	xxx_messageInfo_StateInfoPullRequest.Merge(dst, src)
}
func (m *StateInfoPullRequest) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[369], 1);
	return xxx_messageInfo_StateInfoPullRequest.Size(m)
}
func (m *StateInfoPullRequest) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[370], 1);
	xxx_messageInfo_StateInfoPullRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateInfoPullRequest proto.InternalMessageInfo

func (m *StateInfoPullRequest) GetChannel_MAC() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[371], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[373], 1);
		return m.Channel_MAC
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[372], 1);return nil
}

// ConnEstablish is the message used for the gossip handshake
// Whenever a peer connects to another peer, it handshakes
// with it by sending this message that proves its identity
type ConnEstablish struct {
	PkiId                []byte   `protobuf:"bytes,1,opt,name=pki_id,json=pkiId,proto3" json:"pki_id,omitempty"`
	Identity             []byte   `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	TlsCertHash          []byte   `protobuf:"bytes,3,opt,name=tls_cert_hash,json=tlsCertHash,proto3" json:"tls_cert_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnEstablish) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[374], 1); *m = ConnEstablish{} }
func (m *ConnEstablish) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[375], 1); return proto.CompactTextString(m) }
func (*ConnEstablish) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[376], 1);}
func (*ConnEstablish) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[377], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{8}
}
func (m *ConnEstablish) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[378], 1);
	return xxx_messageInfo_ConnEstablish.Unmarshal(m, b)
}
func (m *ConnEstablish) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[379], 1);
	return xxx_messageInfo_ConnEstablish.Marshal(b, m, deterministic)
}
func (dst *ConnEstablish) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[380], 1);
	xxx_messageInfo_ConnEstablish.Merge(dst, src)
}
func (m *ConnEstablish) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[381], 1);
	return xxx_messageInfo_ConnEstablish.Size(m)
}
func (m *ConnEstablish) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[382], 1);
	xxx_messageInfo_ConnEstablish.DiscardUnknown(m)
}

var xxx_messageInfo_ConnEstablish proto.InternalMessageInfo

func (m *ConnEstablish) GetPkiId() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[383], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[385], 1);
		return m.PkiId
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[384], 1);return nil
}

func (m *ConnEstablish) GetIdentity() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[386], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[388], 1);
		return m.Identity
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[387], 1);return nil
}

func (m *ConnEstablish) GetTlsCertHash() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[389], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[391], 1);
		return m.TlsCertHash
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[390], 1);return nil
}

// PeerIdentity defines the identity of the peer
// Used to make other peers learn of the identity
// of a certain peer
type PeerIdentity struct {
	PkiId                []byte   `protobuf:"bytes,1,opt,name=pki_id,json=pkiId,proto3" json:"pki_id,omitempty"`
	Cert                 []byte   `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	Metadata             []byte   `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerIdentity) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[392], 1); *m = PeerIdentity{} }
func (m *PeerIdentity) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[393], 1); return proto.CompactTextString(m) }
func (*PeerIdentity) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[394], 1);}
func (*PeerIdentity) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[395], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{9}
}
func (m *PeerIdentity) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[396], 1);
	return xxx_messageInfo_PeerIdentity.Unmarshal(m, b)
}
func (m *PeerIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[397], 1);
	return xxx_messageInfo_PeerIdentity.Marshal(b, m, deterministic)
}
func (dst *PeerIdentity) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[398], 1);
	xxx_messageInfo_PeerIdentity.Merge(dst, src)
}
func (m *PeerIdentity) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[399], 1);
	return xxx_messageInfo_PeerIdentity.Size(m)
}
func (m *PeerIdentity) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[400], 1);
	xxx_messageInfo_PeerIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_PeerIdentity proto.InternalMessageInfo

func (m *PeerIdentity) GetPkiId() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[401], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[403], 1);
		return m.PkiId
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[402], 1);return nil
}

func (m *PeerIdentity) GetCert() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[404], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[406], 1);
		return m.Cert
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[405], 1);return nil
}

func (m *PeerIdentity) GetMetadata() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[407], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[409], 1);
		return m.Metadata
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[408], 1);return nil
}

// DataRequest is a message used for a peer to request
// certain data blocks from a remote peer
type DataRequest struct {
	Nonce                uint64      `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Digests              [][]byte    `protobuf:"bytes,2,rep,name=digests,proto3" json:"digests,omitempty"`
	MsgType              PullMsgType `protobuf:"varint,3,opt,name=msg_type,json=msgType,proto3,enum=gossip.PullMsgType" json:"msg_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DataRequest) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[410], 1); *m = DataRequest{} }
func (m *DataRequest) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[411], 1); return proto.CompactTextString(m) }
func (*DataRequest) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[412], 1);}
func (*DataRequest) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[413], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{10}
}
func (m *DataRequest) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[414], 1);
	return xxx_messageInfo_DataRequest.Unmarshal(m, b)
}
func (m *DataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[415], 1);
	return xxx_messageInfo_DataRequest.Marshal(b, m, deterministic)
}
func (dst *DataRequest) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[416], 1);
	xxx_messageInfo_DataRequest.Merge(dst, src)
}
func (m *DataRequest) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[417], 1);
	return xxx_messageInfo_DataRequest.Size(m)
}
func (m *DataRequest) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[418], 1);
	xxx_messageInfo_DataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DataRequest proto.InternalMessageInfo

func (m *DataRequest) GetNonce() uint64 {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[419], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[421], 1);
		return m.Nonce
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[420], 1);return 0
}

func (m *DataRequest) GetDigests() [][]byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[422], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[424], 1);
		return m.Digests
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[423], 1);return nil
}

func (m *DataRequest) GetMsgType() PullMsgType {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[425], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[427], 1);
		return m.MsgType
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[426], 1);return PullMsgType_UNDEFINED
}

// GossipHello is the message that is used for the peer to initiate
// a pull round with another peer
type GossipHello struct {
	Nonce                uint64      `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Metadata             []byte      `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	MsgType              PullMsgType `protobuf:"varint,3,opt,name=msg_type,json=msgType,proto3,enum=gossip.PullMsgType" json:"msg_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GossipHello) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[428], 1); *m = GossipHello{} }
func (m *GossipHello) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[429], 1); return proto.CompactTextString(m) }
func (*GossipHello) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[430], 1);}
func (*GossipHello) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[431], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{11}
}
func (m *GossipHello) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[432], 1);
	return xxx_messageInfo_GossipHello.Unmarshal(m, b)
}
func (m *GossipHello) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[433], 1);
	return xxx_messageInfo_GossipHello.Marshal(b, m, deterministic)
}
func (dst *GossipHello) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[434], 1);
	xxx_messageInfo_GossipHello.Merge(dst, src)
}
func (m *GossipHello) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[435], 1);
	return xxx_messageInfo_GossipHello.Size(m)
}
func (m *GossipHello) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[436], 1);
	xxx_messageInfo_GossipHello.DiscardUnknown(m)
}

var xxx_messageInfo_GossipHello proto.InternalMessageInfo

func (m *GossipHello) GetNonce() uint64 {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[437], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[439], 1);
		return m.Nonce
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[438], 1);return 0
}

func (m *GossipHello) GetMetadata() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[440], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[442], 1);
		return m.Metadata
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[441], 1);return nil
}

func (m *GossipHello) GetMsgType() PullMsgType {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[443], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[445], 1);
		return m.MsgType
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[444], 1);return PullMsgType_UNDEFINED
}

// DataUpdate is the final message in the pull phase
// sent from the receiver to the initiator
type DataUpdate struct {
	Nonce                uint64      `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Data                 []*Envelope `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	MsgType              PullMsgType `protobuf:"varint,3,opt,name=msg_type,json=msgType,proto3,enum=gossip.PullMsgType" json:"msg_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DataUpdate) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[446], 1); *m = DataUpdate{} }
func (m *DataUpdate) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[447], 1); return proto.CompactTextString(m) }
func (*DataUpdate) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[448], 1);}
func (*DataUpdate) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[449], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{12}
}
func (m *DataUpdate) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[450], 1);
	return xxx_messageInfo_DataUpdate.Unmarshal(m, b)
}
func (m *DataUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[451], 1);
	return xxx_messageInfo_DataUpdate.Marshal(b, m, deterministic)
}
func (dst *DataUpdate) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[452], 1);
	xxx_messageInfo_DataUpdate.Merge(dst, src)
}
func (m *DataUpdate) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[453], 1);
	return xxx_messageInfo_DataUpdate.Size(m)
}
func (m *DataUpdate) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[454], 1);
	xxx_messageInfo_DataUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_DataUpdate proto.InternalMessageInfo

func (m *DataUpdate) GetNonce() uint64 {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[455], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[457], 1);
		return m.Nonce
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[456], 1);return 0
}

func (m *DataUpdate) GetData() []*Envelope {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[458], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[460], 1);
		return m.Data
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[459], 1);return nil
}

func (m *DataUpdate) GetMsgType() PullMsgType {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[461], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[463], 1);
		return m.MsgType
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[462], 1);return PullMsgType_UNDEFINED
}

// DataDigest is the message sent from the receiver peer
// to the initator peer and contains the data items it has
type DataDigest struct {
	Nonce                uint64      `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Digests              [][]byte    `protobuf:"bytes,2,rep,name=digests,proto3" json:"digests,omitempty"`
	MsgType              PullMsgType `protobuf:"varint,3,opt,name=msg_type,json=msgType,proto3,enum=gossip.PullMsgType" json:"msg_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DataDigest) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[464], 1); *m = DataDigest{} }
func (m *DataDigest) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[465], 1); return proto.CompactTextString(m) }
func (*DataDigest) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[466], 1);}
func (*DataDigest) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[467], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{13}
}
func (m *DataDigest) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[468], 1);
	return xxx_messageInfo_DataDigest.Unmarshal(m, b)
}
func (m *DataDigest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[469], 1);
	return xxx_messageInfo_DataDigest.Marshal(b, m, deterministic)
}
func (dst *DataDigest) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[470], 1);
	xxx_messageInfo_DataDigest.Merge(dst, src)
}
func (m *DataDigest) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[471], 1);
	return xxx_messageInfo_DataDigest.Size(m)
}
func (m *DataDigest) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[472], 1);
	xxx_messageInfo_DataDigest.DiscardUnknown(m)
}

var xxx_messageInfo_DataDigest proto.InternalMessageInfo

func (m *DataDigest) GetNonce() uint64 {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[473], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[475], 1);
		return m.Nonce
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[474], 1);return 0
}

func (m *DataDigest) GetDigests() [][]byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[476], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[478], 1);
		return m.Digests
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[477], 1);return nil
}

func (m *DataDigest) GetMsgType() PullMsgType {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[479], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[481], 1);
		return m.MsgType
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[480], 1);return PullMsgType_UNDEFINED
}

// DataMessage is the message that contains a block
type DataMessage struct {
	Payload              *Payload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataMessage) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[482], 1); *m = DataMessage{} }
func (m *DataMessage) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[483], 1); return proto.CompactTextString(m) }
func (*DataMessage) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[484], 1);}
func (*DataMessage) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[485], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{14}
}
func (m *DataMessage) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[486], 1);
	return xxx_messageInfo_DataMessage.Unmarshal(m, b)
}
func (m *DataMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[487], 1);
	return xxx_messageInfo_DataMessage.Marshal(b, m, deterministic)
}
func (dst *DataMessage) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[488], 1);
	xxx_messageInfo_DataMessage.Merge(dst, src)
}
func (m *DataMessage) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[489], 1);
	return xxx_messageInfo_DataMessage.Size(m)
}
func (m *DataMessage) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[490], 1);
	xxx_messageInfo_DataMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DataMessage proto.InternalMessageInfo

func (m *DataMessage) GetPayload() *Payload {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[491], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[493], 1);
		return m.Payload
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[492], 1);return nil
}

// PrivateDataMessage message which includes private
// data information to distributed once transaction
// has been endorsed
type PrivateDataMessage struct {
	Payload              *PrivatePayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PrivateDataMessage) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[494], 1); *m = PrivateDataMessage{} }
func (m *PrivateDataMessage) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[495], 1); return proto.CompactTextString(m) }
func (*PrivateDataMessage) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[496], 1);}
func (*PrivateDataMessage) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[497], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{15}
}
func (m *PrivateDataMessage) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[498], 1);
	return xxx_messageInfo_PrivateDataMessage.Unmarshal(m, b)
}
func (m *PrivateDataMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[499], 1);
	return xxx_messageInfo_PrivateDataMessage.Marshal(b, m, deterministic)
}
func (dst *PrivateDataMessage) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[500], 1);
	xxx_messageInfo_PrivateDataMessage.Merge(dst, src)
}
func (m *PrivateDataMessage) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[501], 1);
	return xxx_messageInfo_PrivateDataMessage.Size(m)
}
func (m *PrivateDataMessage) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[502], 1);
	xxx_messageInfo_PrivateDataMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateDataMessage proto.InternalMessageInfo

func (m *PrivateDataMessage) GetPayload() *PrivatePayload {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[503], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[505], 1);
		return m.Payload
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[504], 1);return nil
}

// Payload contains a block
type Payload struct {
	SeqNum               uint64   `protobuf:"varint,1,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	PrivateData          [][]byte `protobuf:"bytes,3,rep,name=private_data,json=privateData,proto3" json:"private_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Payload) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[506], 1); *m = Payload{} }
func (m *Payload) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[507], 1); return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[508], 1);}
func (*Payload) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[509], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{16}
}
func (m *Payload) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[510], 1);
	return xxx_messageInfo_Payload.Unmarshal(m, b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[511], 1);
	return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
}
func (dst *Payload) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[512], 1);
	xxx_messageInfo_Payload.Merge(dst, src)
}
func (m *Payload) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[513], 1);
	return xxx_messageInfo_Payload.Size(m)
}
func (m *Payload) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[514], 1);
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetSeqNum() uint64 {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[515], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[517], 1);
		return m.SeqNum
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[516], 1);return 0
}

func (m *Payload) GetData() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[518], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[520], 1);
		return m.Data
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[519], 1);return nil
}

func (m *Payload) GetPrivateData() [][]byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[521], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[523], 1);
		return m.PrivateData
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[522], 1);return nil
}

// PrivatePayload payload to encapsulate private
// data with collection name to enable routing
// based on collection partitioning
type PrivatePayload struct {
	CollectionName       string                          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Namespace            string                          `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	TxId                 string                          `protobuf:"bytes,3,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	PrivateRwset         []byte                          `protobuf:"bytes,4,opt,name=private_rwset,json=privateRwset,proto3" json:"private_rwset,omitempty"`
	PrivateSimHeight     uint64                          `protobuf:"varint,5,opt,name=private_sim_height,json=privateSimHeight,proto3" json:"private_sim_height,omitempty"`
	CollectionConfigs    *common.CollectionConfigPackage `protobuf:"bytes,6,opt,name=collection_configs,json=collectionConfigs,proto3" json:"collection_configs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *PrivatePayload) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[524], 1); *m = PrivatePayload{} }
func (m *PrivatePayload) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[525], 1); return proto.CompactTextString(m) }
func (*PrivatePayload) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[526], 1);}
func (*PrivatePayload) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[527], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{17}
}
func (m *PrivatePayload) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[528], 1);
	return xxx_messageInfo_PrivatePayload.Unmarshal(m, b)
}
func (m *PrivatePayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[529], 1);
	return xxx_messageInfo_PrivatePayload.Marshal(b, m, deterministic)
}
func (dst *PrivatePayload) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[530], 1);
	xxx_messageInfo_PrivatePayload.Merge(dst, src)
}
func (m *PrivatePayload) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[531], 1);
	return xxx_messageInfo_PrivatePayload.Size(m)
}
func (m *PrivatePayload) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[532], 1);
	xxx_messageInfo_PrivatePayload.DiscardUnknown(m)
}

var xxx_messageInfo_PrivatePayload proto.InternalMessageInfo

func (m *PrivatePayload) GetCollectionName() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[533], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[535], 1);
		return m.CollectionName
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[534], 1);return ""
}

func (m *PrivatePayload) GetNamespace() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[536], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[538], 1);
		return m.Namespace
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[537], 1);return ""
}

func (m *PrivatePayload) GetTxId() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[539], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[541], 1);
		return m.TxId
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[540], 1);return ""
}

func (m *PrivatePayload) GetPrivateRwset() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[542], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[544], 1);
		return m.PrivateRwset
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[543], 1);return nil
}

func (m *PrivatePayload) GetPrivateSimHeight() uint64 {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[545], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[547], 1);
		return m.PrivateSimHeight
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[546], 1);return 0
}

func (m *PrivatePayload) GetCollectionConfigs() *common.CollectionConfigPackage {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[548], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[550], 1);
		return m.CollectionConfigs
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[549], 1);return nil
}

// AliveMessage is sent to inform remote peers
// of a peer's existence and activity
type AliveMessage struct {
	Membership           *Member   `protobuf:"bytes,1,opt,name=membership,proto3" json:"membership,omitempty"`
	Timestamp            *PeerTime `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Identity             []byte    `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AliveMessage) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[551], 1); *m = AliveMessage{} }
func (m *AliveMessage) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[552], 1); return proto.CompactTextString(m) }
func (*AliveMessage) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[553], 1);}
func (*AliveMessage) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[554], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{18}
}
func (m *AliveMessage) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[555], 1);
	return xxx_messageInfo_AliveMessage.Unmarshal(m, b)
}
func (m *AliveMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[556], 1);
	return xxx_messageInfo_AliveMessage.Marshal(b, m, deterministic)
}
func (dst *AliveMessage) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[557], 1);
	xxx_messageInfo_AliveMessage.Merge(dst, src)
}
func (m *AliveMessage) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[558], 1);
	return xxx_messageInfo_AliveMessage.Size(m)
}
func (m *AliveMessage) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[559], 1);
	xxx_messageInfo_AliveMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AliveMessage proto.InternalMessageInfo

func (m *AliveMessage) GetMembership() *Member {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[560], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[562], 1);
		return m.Membership
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[561], 1);return nil
}

func (m *AliveMessage) GetTimestamp() *PeerTime {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[563], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[565], 1);
		return m.Timestamp
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[564], 1);return nil
}

func (m *AliveMessage) GetIdentity() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[566], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[568], 1);
		return m.Identity
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[567], 1);return nil
}

// Leadership Message is sent during leader election to inform
// remote peers about intent of peer to proclaim itself as leader
type LeadershipMessage struct {
	PkiId                []byte    `protobuf:"bytes,1,opt,name=pki_id,json=pkiId,proto3" json:"pki_id,omitempty"`
	Timestamp            *PeerTime `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	IsDeclaration        bool      `protobuf:"varint,3,opt,name=is_declaration,json=isDeclaration,proto3" json:"is_declaration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *LeadershipMessage) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[569], 1); *m = LeadershipMessage{} }
func (m *LeadershipMessage) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[570], 1); return proto.CompactTextString(m) }
func (*LeadershipMessage) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[571], 1);}
func (*LeadershipMessage) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[572], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{19}
}
func (m *LeadershipMessage) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[573], 1);
	return xxx_messageInfo_LeadershipMessage.Unmarshal(m, b)
}
func (m *LeadershipMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[574], 1);
	return xxx_messageInfo_LeadershipMessage.Marshal(b, m, deterministic)
}
func (dst *LeadershipMessage) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[575], 1);
	xxx_messageInfo_LeadershipMessage.Merge(dst, src)
}
func (m *LeadershipMessage) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[576], 1);
	return xxx_messageInfo_LeadershipMessage.Size(m)
}
func (m *LeadershipMessage) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[577], 1);
	xxx_messageInfo_LeadershipMessage.DiscardUnknown(m)
}

var xxx_messageInfo_LeadershipMessage proto.InternalMessageInfo

func (m *LeadershipMessage) GetPkiId() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[578], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[580], 1);
		return m.PkiId
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[579], 1);return nil
}

func (m *LeadershipMessage) GetTimestamp() *PeerTime {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[581], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[583], 1);
		return m.Timestamp
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[582], 1);return nil
}

func (m *LeadershipMessage) GetIsDeclaration() bool {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[584], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[586], 1);
		return m.IsDeclaration
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[585], 1);return false
}

// PeerTime defines the logical time of a peer's life
type PeerTime struct {
	IncNum               uint64   `protobuf:"varint,1,opt,name=inc_num,json=incNum,proto3" json:"inc_num,omitempty"`
	SeqNum               uint64   `protobuf:"varint,2,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerTime) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[587], 1); *m = PeerTime{} }
func (m *PeerTime) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[588], 1); return proto.CompactTextString(m) }
func (*PeerTime) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[589], 1);}
func (*PeerTime) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[590], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{20}
}
func (m *PeerTime) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[591], 1);
	return xxx_messageInfo_PeerTime.Unmarshal(m, b)
}
func (m *PeerTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[592], 1);
	return xxx_messageInfo_PeerTime.Marshal(b, m, deterministic)
}
func (dst *PeerTime) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[593], 1);
	xxx_messageInfo_PeerTime.Merge(dst, src)
}
func (m *PeerTime) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[594], 1);
	return xxx_messageInfo_PeerTime.Size(m)
}
func (m *PeerTime) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[595], 1);
	xxx_messageInfo_PeerTime.DiscardUnknown(m)
}

var xxx_messageInfo_PeerTime proto.InternalMessageInfo

func (m *PeerTime) GetIncNum() uint64 {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[596], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[598], 1);
		return m.IncNum
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[597], 1);return 0
}

func (m *PeerTime) GetSeqNum() uint64 {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[599], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[601], 1);
		return m.SeqNum
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[600], 1);return 0
}

// MembershipRequest is used to ask membership information
// from a remote peer
type MembershipRequest struct {
	SelfInformation      *Envelope `protobuf:"bytes,1,opt,name=self_information,json=selfInformation,proto3" json:"self_information,omitempty"`
	Known                [][]byte  `protobuf:"bytes,2,rep,name=known,proto3" json:"known,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MembershipRequest) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[602], 1); *m = MembershipRequest{} }
func (m *MembershipRequest) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[603], 1); return proto.CompactTextString(m) }
func (*MembershipRequest) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[604], 1);}
func (*MembershipRequest) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[605], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{21}
}
func (m *MembershipRequest) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[606], 1);
	return xxx_messageInfo_MembershipRequest.Unmarshal(m, b)
}
func (m *MembershipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[607], 1);
	return xxx_messageInfo_MembershipRequest.Marshal(b, m, deterministic)
}
func (dst *MembershipRequest) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[608], 1);
	xxx_messageInfo_MembershipRequest.Merge(dst, src)
}
func (m *MembershipRequest) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[609], 1);
	return xxx_messageInfo_MembershipRequest.Size(m)
}
func (m *MembershipRequest) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[610], 1);
	xxx_messageInfo_MembershipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MembershipRequest proto.InternalMessageInfo

func (m *MembershipRequest) GetSelfInformation() *Envelope {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[611], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[613], 1);
		return m.SelfInformation
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[612], 1);return nil
}

func (m *MembershipRequest) GetKnown() [][]byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[614], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[616], 1);
		return m.Known
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[615], 1);return nil
}

// MembershipResponse is used for replying to MembershipRequests
type MembershipResponse struct {
	Alive                []*Envelope `protobuf:"bytes,1,rep,name=alive,proto3" json:"alive,omitempty"`
	Dead                 []*Envelope `protobuf:"bytes,2,rep,name=dead,proto3" json:"dead,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MembershipResponse) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[617], 1); *m = MembershipResponse{} }
func (m *MembershipResponse) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[618], 1); return proto.CompactTextString(m) }
func (*MembershipResponse) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[619], 1);}
func (*MembershipResponse) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[620], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{22}
}
func (m *MembershipResponse) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[621], 1);
	return xxx_messageInfo_MembershipResponse.Unmarshal(m, b)
}
func (m *MembershipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[622], 1);
	return xxx_messageInfo_MembershipResponse.Marshal(b, m, deterministic)
}
func (dst *MembershipResponse) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[623], 1);
	xxx_messageInfo_MembershipResponse.Merge(dst, src)
}
func (m *MembershipResponse) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[624], 1);
	return xxx_messageInfo_MembershipResponse.Size(m)
}
func (m *MembershipResponse) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[625], 1);
	xxx_messageInfo_MembershipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MembershipResponse proto.InternalMessageInfo

func (m *MembershipResponse) GetAlive() []*Envelope {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[626], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[628], 1);
		return m.Alive
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[627], 1);return nil
}

func (m *MembershipResponse) GetDead() []*Envelope {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[629], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[631], 1);
		return m.Dead
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[630], 1);return nil
}

// Member holds membership-related information
// about a peer
type Member struct {
	Endpoint             string   `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Metadata             []byte   `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	PkiId                []byte   `protobuf:"bytes,3,opt,name=pki_id,json=pkiId,proto3" json:"pki_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Member) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[632], 1); *m = Member{} }
func (m *Member) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[633], 1); return proto.CompactTextString(m) }
func (*Member) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[634], 1);}
func (*Member) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[635], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{23}
}
func (m *Member) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[636], 1);
	return xxx_messageInfo_Member.Unmarshal(m, b)
}
func (m *Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[637], 1);
	return xxx_messageInfo_Member.Marshal(b, m, deterministic)
}
func (dst *Member) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[638], 1);
	xxx_messageInfo_Member.Merge(dst, src)
}
func (m *Member) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[639], 1);
	return xxx_messageInfo_Member.Size(m)
}
func (m *Member) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[640], 1);
	xxx_messageInfo_Member.DiscardUnknown(m)
}

var xxx_messageInfo_Member proto.InternalMessageInfo

func (m *Member) GetEndpoint() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[641], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[643], 1);
		return m.Endpoint
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[642], 1);return ""
}

func (m *Member) GetMetadata() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[644], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[646], 1);
		return m.Metadata
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[645], 1);return nil
}

func (m *Member) GetPkiId() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[647], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[649], 1);
		return m.PkiId
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[648], 1);return nil
}

// Empty is used for pinging and in tests
type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[650], 1); *m = Empty{} }
func (m *Empty) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[651], 1); return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[652], 1);}
func (*Empty) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[653], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{24}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[654], 1);
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[655], 1);
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[656], 1);
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[657], 1);
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[658], 1);
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

// RemoteStateRequest is used to ask a set of blocks
// from a remote peer
type RemoteStateRequest struct {
	StartSeqNum          uint64   `protobuf:"varint,1,opt,name=start_seq_num,json=startSeqNum,proto3" json:"start_seq_num,omitempty"`
	EndSeqNum            uint64   `protobuf:"varint,2,opt,name=end_seq_num,json=endSeqNum,proto3" json:"end_seq_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoteStateRequest) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[659], 1); *m = RemoteStateRequest{} }
func (m *RemoteStateRequest) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[660], 1); return proto.CompactTextString(m) }
func (*RemoteStateRequest) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[661], 1);}
func (*RemoteStateRequest) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[662], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{25}
}
func (m *RemoteStateRequest) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[663], 1);
	return xxx_messageInfo_RemoteStateRequest.Unmarshal(m, b)
}
func (m *RemoteStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[664], 1);
	return xxx_messageInfo_RemoteStateRequest.Marshal(b, m, deterministic)
}
func (dst *RemoteStateRequest) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[665], 1);
	xxx_messageInfo_RemoteStateRequest.Merge(dst, src)
}
func (m *RemoteStateRequest) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[666], 1);
	return xxx_messageInfo_RemoteStateRequest.Size(m)
}
func (m *RemoteStateRequest) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[667], 1);
	xxx_messageInfo_RemoteStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteStateRequest proto.InternalMessageInfo

func (m *RemoteStateRequest) GetStartSeqNum() uint64 {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[668], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[670], 1);
		return m.StartSeqNum
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[669], 1);return 0
}

func (m *RemoteStateRequest) GetEndSeqNum() uint64 {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[671], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[673], 1);
		return m.EndSeqNum
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[672], 1);return 0
}

// RemoteStateResponse is used to send a set of blocks
// to a remote peer
type RemoteStateResponse struct {
	Payloads             []*Payload `protobuf:"bytes,1,rep,name=payloads,proto3" json:"payloads,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RemoteStateResponse) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[674], 1); *m = RemoteStateResponse{} }
func (m *RemoteStateResponse) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[675], 1); return proto.CompactTextString(m) }
func (*RemoteStateResponse) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[676], 1);}
func (*RemoteStateResponse) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[677], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{26}
}
func (m *RemoteStateResponse) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[678], 1);
	return xxx_messageInfo_RemoteStateResponse.Unmarshal(m, b)
}
func (m *RemoteStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[679], 1);
	return xxx_messageInfo_RemoteStateResponse.Marshal(b, m, deterministic)
}
func (dst *RemoteStateResponse) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[680], 1);
	xxx_messageInfo_RemoteStateResponse.Merge(dst, src)
}
func (m *RemoteStateResponse) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[681], 1);
	return xxx_messageInfo_RemoteStateResponse.Size(m)
}
func (m *RemoteStateResponse) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[682], 1);
	xxx_messageInfo_RemoteStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteStateResponse proto.InternalMessageInfo

func (m *RemoteStateResponse) GetPayloads() []*Payload {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[683], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[685], 1);
		return m.Payloads
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[684], 1);return nil
}

// RemotePrivateDataRequest message used to request
// missing private rwset
type RemotePvtDataRequest struct {
	Digests              []*PvtDataDigest `protobuf:"bytes,1,rep,name=digests,proto3" json:"digests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RemotePvtDataRequest) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[686], 1); *m = RemotePvtDataRequest{} }
func (m *RemotePvtDataRequest) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[687], 1); return proto.CompactTextString(m) }
func (*RemotePvtDataRequest) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[688], 1);}
func (*RemotePvtDataRequest) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[689], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{27}
}
func (m *RemotePvtDataRequest) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[690], 1);
	return xxx_messageInfo_RemotePvtDataRequest.Unmarshal(m, b)
}
func (m *RemotePvtDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[691], 1);
	return xxx_messageInfo_RemotePvtDataRequest.Marshal(b, m, deterministic)
}
func (dst *RemotePvtDataRequest) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[692], 1);
	xxx_messageInfo_RemotePvtDataRequest.Merge(dst, src)
}
func (m *RemotePvtDataRequest) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[693], 1);
	return xxx_messageInfo_RemotePvtDataRequest.Size(m)
}
func (m *RemotePvtDataRequest) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[694], 1);
	xxx_messageInfo_RemotePvtDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemotePvtDataRequest proto.InternalMessageInfo

func (m *RemotePvtDataRequest) GetDigests() []*PvtDataDigest {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[695], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[697], 1);
		return m.Digests
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[696], 1);return nil
}

// PvtDataDigest defines a digest of private data
type PvtDataDigest struct {
	TxId                 string   `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Collection           string   `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	BlockSeq             uint64   `protobuf:"varint,4,opt,name=block_seq,json=blockSeq,proto3" json:"block_seq,omitempty"`
	SeqInBlock           uint64   `protobuf:"varint,5,opt,name=seq_in_block,json=seqInBlock,proto3" json:"seq_in_block,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PvtDataDigest) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[698], 1); *m = PvtDataDigest{} }
func (m *PvtDataDigest) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[699], 1); return proto.CompactTextString(m) }
func (*PvtDataDigest) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[700], 1);}
func (*PvtDataDigest) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[701], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{28}
}
func (m *PvtDataDigest) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[702], 1);
	return xxx_messageInfo_PvtDataDigest.Unmarshal(m, b)
}
func (m *PvtDataDigest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[703], 1);
	return xxx_messageInfo_PvtDataDigest.Marshal(b, m, deterministic)
}
func (dst *PvtDataDigest) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[704], 1);
	xxx_messageInfo_PvtDataDigest.Merge(dst, src)
}
func (m *PvtDataDigest) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[705], 1);
	return xxx_messageInfo_PvtDataDigest.Size(m)
}
func (m *PvtDataDigest) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[706], 1);
	xxx_messageInfo_PvtDataDigest.DiscardUnknown(m)
}

var xxx_messageInfo_PvtDataDigest proto.InternalMessageInfo

func (m *PvtDataDigest) GetTxId() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[707], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[709], 1);
		return m.TxId
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[708], 1);return ""
}

func (m *PvtDataDigest) GetNamespace() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[710], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[712], 1);
		return m.Namespace
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[711], 1);return ""
}

func (m *PvtDataDigest) GetCollection() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[713], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[715], 1);
		return m.Collection
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[714], 1);return ""
}

func (m *PvtDataDigest) GetBlockSeq() uint64 {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[716], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[718], 1);
		return m.BlockSeq
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[717], 1);return 0
}

func (m *PvtDataDigest) GetSeqInBlock() uint64 {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[719], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[721], 1);
		return m.SeqInBlock
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[720], 1);return 0
}

// RemotePrivateData message to response on private
// data replication request
type RemotePvtDataResponse struct {
	Elements             []*PvtDataElement `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RemotePvtDataResponse) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[722], 1); *m = RemotePvtDataResponse{} }
func (m *RemotePvtDataResponse) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[723], 1); return proto.CompactTextString(m) }
func (*RemotePvtDataResponse) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[724], 1);}
func (*RemotePvtDataResponse) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[725], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{29}
}
func (m *RemotePvtDataResponse) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[726], 1);
	return xxx_messageInfo_RemotePvtDataResponse.Unmarshal(m, b)
}
func (m *RemotePvtDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[727], 1);
	return xxx_messageInfo_RemotePvtDataResponse.Marshal(b, m, deterministic)
}
func (dst *RemotePvtDataResponse) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[728], 1);
	xxx_messageInfo_RemotePvtDataResponse.Merge(dst, src)
}
func (m *RemotePvtDataResponse) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[729], 1);
	return xxx_messageInfo_RemotePvtDataResponse.Size(m)
}
func (m *RemotePvtDataResponse) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[730], 1);
	xxx_messageInfo_RemotePvtDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemotePvtDataResponse proto.InternalMessageInfo

func (m *RemotePvtDataResponse) GetElements() []*PvtDataElement {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[731], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[733], 1);
		return m.Elements
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[732], 1);return nil
}

type PvtDataElement struct {
	Digest *PvtDataDigest `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	// the payload is a marshaled kvrwset.KVRWSet
	Payload              [][]byte `protobuf:"bytes,2,rep,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PvtDataElement) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[734], 1); *m = PvtDataElement{} }
func (m *PvtDataElement) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[735], 1); return proto.CompactTextString(m) }
func (*PvtDataElement) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[736], 1);}
func (*PvtDataElement) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[737], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{30}
}
func (m *PvtDataElement) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[738], 1);
	return xxx_messageInfo_PvtDataElement.Unmarshal(m, b)
}
func (m *PvtDataElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[739], 1);
	return xxx_messageInfo_PvtDataElement.Marshal(b, m, deterministic)
}
func (dst *PvtDataElement) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[740], 1);
	xxx_messageInfo_PvtDataElement.Merge(dst, src)
}
func (m *PvtDataElement) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[741], 1);
	return xxx_messageInfo_PvtDataElement.Size(m)
}
func (m *PvtDataElement) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[742], 1);
	xxx_messageInfo_PvtDataElement.DiscardUnknown(m)
}

var xxx_messageInfo_PvtDataElement proto.InternalMessageInfo

func (m *PvtDataElement) GetDigest() *PvtDataDigest {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[743], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[745], 1);
		return m.Digest
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[744], 1);return nil
}

func (m *PvtDataElement) GetPayload() [][]byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[746], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[748], 1);
		return m.Payload
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[747], 1);return nil
}

// PvtPayload augments private rwset data and tx index
// inside the block
type PvtDataPayload struct {
	TxSeqInBlock uint64 `protobuf:"varint,1,opt,name=tx_seq_in_block,json=txSeqInBlock,proto3" json:"tx_seq_in_block,omitempty"`
	// Encodes marhslaed bytes of rwset.TxPvtReadWriteSet
	// defined in rwset.proto
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PvtDataPayload) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[749], 1); *m = PvtDataPayload{} }
func (m *PvtDataPayload) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[750], 1); return proto.CompactTextString(m) }
func (*PvtDataPayload) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[751], 1);}
func (*PvtDataPayload) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[752], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{31}
}
func (m *PvtDataPayload) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[753], 1);
	return xxx_messageInfo_PvtDataPayload.Unmarshal(m, b)
}
func (m *PvtDataPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[754], 1);
	return xxx_messageInfo_PvtDataPayload.Marshal(b, m, deterministic)
}
func (dst *PvtDataPayload) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[755], 1);
	xxx_messageInfo_PvtDataPayload.Merge(dst, src)
}
func (m *PvtDataPayload) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[756], 1);
	return xxx_messageInfo_PvtDataPayload.Size(m)
}
func (m *PvtDataPayload) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[757], 1);
	xxx_messageInfo_PvtDataPayload.DiscardUnknown(m)
}

var xxx_messageInfo_PvtDataPayload proto.InternalMessageInfo

func (m *PvtDataPayload) GetTxSeqInBlock() uint64 {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[758], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[760], 1);
		return m.TxSeqInBlock
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[759], 1);return 0
}

func (m *PvtDataPayload) GetPayload() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[761], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[763], 1);
		return m.Payload
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[762], 1);return nil
}

type Acknowledgement struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Acknowledgement) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[764], 1); *m = Acknowledgement{} }
func (m *Acknowledgement) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[765], 1); return proto.CompactTextString(m) }
func (*Acknowledgement) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[766], 1);}
func (*Acknowledgement) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[767], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{32}
}
func (m *Acknowledgement) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[768], 1);
	return xxx_messageInfo_Acknowledgement.Unmarshal(m, b)
}
func (m *Acknowledgement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[769], 1);
	return xxx_messageInfo_Acknowledgement.Marshal(b, m, deterministic)
}
func (dst *Acknowledgement) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[770], 1);
	xxx_messageInfo_Acknowledgement.Merge(dst, src)
}
func (m *Acknowledgement) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[771], 1);
	return xxx_messageInfo_Acknowledgement.Size(m)
}
func (m *Acknowledgement) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[772], 1);
	xxx_messageInfo_Acknowledgement.DiscardUnknown(m)
}

var xxx_messageInfo_Acknowledgement proto.InternalMessageInfo

func (m *Acknowledgement) GetError() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[773], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[775], 1);
		return m.Error
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[774], 1);return ""
}

// Chaincode represents a Chaincode that is installed
// on a peer
type Chaincode struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Metadata             []byte   `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chaincode) Reset()         {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[776], 1); *m = Chaincode{} }
func (m *Chaincode) String() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[777], 1); return proto.CompactTextString(m) }
func (*Chaincode) ProtoMessage()    {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[778], 1);}
func (*Chaincode) Descriptor() ([]byte, []int) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[779], 1);
	return fileDescriptor_message_7c42328ef5ef9997, []int{33}
}
func (m *Chaincode) XXX_Unmarshal(b []byte) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[780], 1);
	return xxx_messageInfo_Chaincode.Unmarshal(m, b)
}
func (m *Chaincode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[781], 1);
	return xxx_messageInfo_Chaincode.Marshal(b, m, deterministic)
}
func (dst *Chaincode) XXX_Merge(src proto.Message) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[782], 1);
	xxx_messageInfo_Chaincode.Merge(dst, src)
}
func (m *Chaincode) XXX_Size() int {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[783], 1);
	return xxx_messageInfo_Chaincode.Size(m)
}
func (m *Chaincode) XXX_DiscardUnknown() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[784], 1);
	xxx_messageInfo_Chaincode.DiscardUnknown(m)
}

var xxx_messageInfo_Chaincode proto.InternalMessageInfo

func (m *Chaincode) GetName() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[785], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[787], 1);
		return m.Name
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[786], 1);return ""
}

func (m *Chaincode) GetVersion() string {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[788], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[790], 1);
		return m.Version
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[789], 1);return ""
}

func (m *Chaincode) GetMetadata() []byte {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[791], 1);
	if m != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[793], 1);
		return m.Metadata
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[792], 1);return nil
}

func init() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[794], 1);
	proto.RegisterType((*Envelope)(nil), "gossip.Envelope")
	proto.RegisterType((*SecretEnvelope)(nil), "gossip.SecretEnvelope")
	proto.RegisterType((*Secret)(nil), "gossip.Secret")
	proto.RegisterType((*GossipMessage)(nil), "gossip.GossipMessage")
	proto.RegisterType((*StateInfo)(nil), "gossip.StateInfo")
	proto.RegisterType((*Properties)(nil), "gossip.Properties")
	proto.RegisterType((*StateInfoSnapshot)(nil), "gossip.StateInfoSnapshot")
	proto.RegisterType((*StateInfoPullRequest)(nil), "gossip.StateInfoPullRequest")
	proto.RegisterType((*ConnEstablish)(nil), "gossip.ConnEstablish")
	proto.RegisterType((*PeerIdentity)(nil), "gossip.PeerIdentity")
	proto.RegisterType((*DataRequest)(nil), "gossip.DataRequest")
	proto.RegisterType((*GossipHello)(nil), "gossip.GossipHello")
	proto.RegisterType((*DataUpdate)(nil), "gossip.DataUpdate")
	proto.RegisterType((*DataDigest)(nil), "gossip.DataDigest")
	proto.RegisterType((*DataMessage)(nil), "gossip.DataMessage")
	proto.RegisterType((*PrivateDataMessage)(nil), "gossip.PrivateDataMessage")
	proto.RegisterType((*Payload)(nil), "gossip.Payload")
	proto.RegisterType((*PrivatePayload)(nil), "gossip.PrivatePayload")
	proto.RegisterType((*AliveMessage)(nil), "gossip.AliveMessage")
	proto.RegisterType((*LeadershipMessage)(nil), "gossip.LeadershipMessage")
	proto.RegisterType((*PeerTime)(nil), "gossip.PeerTime")
	proto.RegisterType((*MembershipRequest)(nil), "gossip.MembershipRequest")
	proto.RegisterType((*MembershipResponse)(nil), "gossip.MembershipResponse")
	proto.RegisterType((*Member)(nil), "gossip.Member")
	proto.RegisterType((*Empty)(nil), "gossip.Empty")
	proto.RegisterType((*RemoteStateRequest)(nil), "gossip.RemoteStateRequest")
	proto.RegisterType((*RemoteStateResponse)(nil), "gossip.RemoteStateResponse")
	proto.RegisterType((*RemotePvtDataRequest)(nil), "gossip.RemotePvtDataRequest")
	proto.RegisterType((*PvtDataDigest)(nil), "gossip.PvtDataDigest")
	proto.RegisterType((*RemotePvtDataResponse)(nil), "gossip.RemotePvtDataResponse")
	proto.RegisterType((*PvtDataElement)(nil), "gossip.PvtDataElement")
	proto.RegisterType((*PvtDataPayload)(nil), "gossip.PvtDataPayload")
	proto.RegisterType((*Acknowledgement)(nil), "gossip.Acknowledgement")
	proto.RegisterType((*Chaincode)(nil), "gossip.Chaincode")
	proto.RegisterEnum("gossip.PullMsgType", PullMsgType_name, PullMsgType_value)
	proto.RegisterEnum("gossip.GossipMessage_Tag", GossipMessage_Tag_name, GossipMessage_Tag_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GossipClient is the client API for Gossip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GossipClient interface {
	// GossipStream is the gRPC stream used for sending and receiving messages
	GossipStream(ctx context.Context, opts ...grpc.CallOption) (Gossip_GossipStreamClient, error)
	// Ping is used to probe a remote peer's aliveness
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type gossipClient struct {
	cc *grpc.ClientConn
}

func NewGossipClient(cc *grpc.ClientConn) GossipClient {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[795], 1);
	return &gossipClient{cc}
}

func (c *gossipClient) GossipStream(ctx context.Context, opts ...grpc.CallOption) (Gossip_GossipStreamClient, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[796], 1);
	stream, err := c.cc.NewStream(ctx, &_Gossip_serviceDesc.Streams[0], "/gossip.Gossip/GossipStream", opts...)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[798], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[797], 1);x := &gossipGossipStreamClient{stream}
	return x, nil
}

type Gossip_GossipStreamClient interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ClientStream
}

type gossipGossipStreamClient struct {
	grpc.ClientStream
}

func (x *gossipGossipStreamClient) Send(m *Envelope) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[799], 1);
	return x.ClientStream.SendMsg(m)
}

func (x *gossipGossipStreamClient) Recv() (*Envelope, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[800], 1);
	m := new(Envelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[802], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[801], 1);return m, nil
}

func (c *gossipClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[803], 1);
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gossip.Gossip/Ping", in, out, opts...)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[805], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[804], 1);return out, nil
}

// GossipServer is the server API for Gossip service.
type GossipServer interface {
	// GossipStream is the gRPC stream used for sending and receiving messages
	GossipStream(Gossip_GossipStreamServer) error
	// Ping is used to probe a remote peer's aliveness
	Ping(context.Context, *Empty) (*Empty, error)
}

func RegisterGossipServer(s *grpc.Server, srv GossipServer) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[806], 1);
	s.RegisterService(&_Gossip_serviceDesc, srv)
}

func _Gossip_GossipStream_Handler(srv interface{}, stream grpc.ServerStream) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[807], 1);
	return srv.(GossipServer).GossipStream(&gossipGossipStreamServer{stream})
}

type Gossip_GossipStreamServer interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ServerStream
}

type gossipGossipStreamServer struct {
	grpc.ServerStream
}

func (x *gossipGossipStreamServer) Send(m *Envelope) error {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[808], 1);
	return x.ServerStream.SendMsg(m)
}

func (x *gossipGossipStreamServer) Recv() (*Envelope, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[809], 1);
	m := new(Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[811], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[810], 1);return m, nil
}

func _Gossip_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[812], 1);
	in := new(Empty)
	if err := dec(in); err != nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[816], 1);
		return nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[813], 1);if interceptor == nil {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[817], 1);
		return srv.(GossipServer).Ping(ctx, in)
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[814], 1);info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gossip.Gossip/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[818], 1);
		return srv.(GossipServer).Ping(ctx, req.(*Empty))
	}
	_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[815], 1);return interceptor(ctx, in, info, handler)
}

var _Gossip_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gossip.Gossip",
	HandlerType: (*GossipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Gossip_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GossipStream",
			Handler:       _Gossip_GossipStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gossip/message.proto",
}

func init() {_cover_atomic_.AddUint32(&GoCover_1_643036306334653135363963.Count[819], 1); proto.RegisterFile("gossip/message.proto", fileDescriptor_message_7c42328ef5ef9997) }

var fileDescriptor_message_7c42328ef5ef9997 = []byte{
	// 1874 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x5b, 0x6f, 0xe3, 0xc6,
	0x15, 0x16, 0x6d, 0x5d, 0x8f, 0x2e, 0x96, 0xc7, 0xde, 0x5d, 0xc6, 0x49, 0x13, 0x87, 0xed, 0x26,
	0xdb, 0x7a, 0x23, 0x6f, 0x9d, 0x16, 0x0d, 0x90, 0xb6, 0x0b, 0x5b, 0x52, 0x2c, 0x21, 0x2b, 0xad,
	0x4b, 0x7b, 0xd1, 0xba, 0x2f, 0xc4, 0x98, 0x1c, 0x53, 0xac, 0xc9, 0x21, 0xcd, 0x19, 0x3b, 0xf6,
	0x63, 0xd1, 0x87, 0x00, 0x7d, 0xe9, 0x6f, 0xe8, 0x53, 0xff, 0x66, 0x31, 0x33, 0xbc, 0x4a, 0xf6,
	0x02, 0x1b, 0x20, 0x6f, 0x3c, 0xf7, 0x99, 0x33, 0x67, 0xbe, 0x73, 0x86, 0xb0, 0xed, 0x86, 0x8c,
	0x79, 0xd1, 0x7e, 0x40, 0x18, 0xc3, 0x2e, 0x19, 0x44, 0x71, 0xc8, 0x43, 0x54, 0x57, 0xdc, 0x9d,
	0x67, 0x76, 0x18, 0x04, 0x21, 0xdd, 0xb7, 0x43, 0xdf, 0x27, 0x36, 0xf7, 0x42, 0xaa, 0x14, 0x8c,
	0x7f, 0x69, 0xd0, 0x1c, 0xd3, 0x5b, 0xe2, 0x87, 0x11, 0x41, 0x3a, 0x34, 0x22, 0x7c, 0xef, 0x87,
	0xd8, 0xd1, 0xb5, 0x5d, 0xed, 0x45, 0xc7, 0x4c, 0x49, 0xf4, 0x09, 0xb4, 0x98, 0xe7, 0x52, 0xcc,
	0x6f, 0x62, 0xa2, 0xaf, 0x49, 0x59, 0xce, 0x40, 0xaf, 0x61, 0x83, 0x11, 0x3b, 0x26, 0xdc, 0x22,
	0x89, 0x2b, 0x7d, 0x7d, 0x57, 0x7b, 0xd1, 0x3e, 0x78, 0x3a, 0x50, 0xf1, 0x07, 0xa7, 0x52, 0x9c,
	0x06, 0x32, 0x7b, 0xac, 0x44, 0x1b, 0x13, 0xe8, 0x95, 0x35, 0x7e, 0xea, 0x52, 0x8c, 0x43, 0xa8,
	0x2b, 0x4f, 0xe8, 0x25, 0xf4, 0x3d, 0xca, 0x49, 0x4c, 0xb1, 0x3f, 0xa6, 0x4e, 0x14, 0x7a, 0x94,
	0x4b, 0x57, 0xad, 0x49, 0xc5, 0x5c, 0x91, 0x1c, 0xb5, 0xa0, 0x61, 0x87, 0x94, 0x13, 0xca, 0x8d,
	0x1f, 0xdb, 0xd0, 0x3d, 0x96, 0xcb, 0x9e, 0xa9, 0x5c, 0xa2, 0x6d, 0xa8, 0xd1, 0x90, 0xda, 0x44,
	0xda, 0x57, 0x4d, 0x45, 0x88, 0x25, 0xda, 0x0b, 0x4c, 0x29, 0xf1, 0x93, 0x65, 0xa4, 0x24, 0xda,
	0x83, 0x75, 0x8e, 0x5d, 0x99, 0x83, 0xde, 0xc1, 0x47, 0x69, 0x0e, 0x4a, 0x3e, 0x07, 0x67, 0xd8,
	0x35, 0x85, 0x16, 0xfa, 0x1a, 0x5a, 0xd8, 0xf7, 0x6e, 0x89, 0x15, 0x30, 0x57, 0xaf, 0xc9, 0xb4,
	0x6d, 0xa7, 0x26, 0x87, 0x42, 0x90, 0x58, 0x4c, 0x2a, 0x66, 0x53, 0x2a, 0xce, 0x98, 0x8b, 0x7e,
	0x07, 0x8d, 0x80, 0x04, 0x56, 0x4c, 0xae, 0xf5, 0xba, 0x34, 0xc9, 0xa2, 0xcc, 0x48, 0x70, 0x41,
	0x62, 0xb6, 0xf0, 0x22, 0x93, 0x5c, 0xdf, 0x10, 0xc6, 0x27, 0x15, 0xb3, 0x1e, 0x90, 0xc0, 0x24,
	0xd7, 0xe8, 0xf7, 0xa9, 0x15, 0xd3, 0x1b, 0xd2, 0x6a, 0xe7, 0x21, 0x2b, 0x16, 0x85, 0x94, 0x91,
	0xcc, 0x8c, 0xa1, 0x57, 0xd0, 0x74, 0x30, 0xc7, 0x72, 0x81, 0x4d, 0x69, 0xb7, 0x95, 0xda, 0x8d,
	0x30, 0xc7, 0xf9, 0xfa, 0x1a, 0x42, 0x4d, 0x2c, 0x6f, 0x0f, 0x6a, 0x0b, 0xe2, 0xfb, 0xa1, 0xde,
	0x2a, 0xab, 0xab, 0x14, 0x4c, 0x84, 0x68, 0x52, 0x31, 0x95, 0x0e, 0xda, 0x4f, 0xdc, 0x3b, 0x9e,
	0xab, 0x83, 0xd4, 0x47, 0x45, 0xf7, 0x23, 0xcf, 0x55, 0xbb, 0x90, 0xde, 0x47, 0x9e, 0x9b, 0xad,
	0x47, 0xec, 0xbe, 0xbd, 0xba, 0x9e, 0x7c, 0xdf, 0xd2, 0x42, 0x6d, 0xbc, 0x2d, 0x2d, 0x6e, 0x22,
	0x07, 0x73, 0xa2, 0x77, 0x56, 0xa3, 0xbc, 0x93, 0x92, 0x49, 0xc5, 0x04, 0x27, 0xa3, 0xd0, 0x73,
	0xa8, 0x91, 0x20, 0xe2, 0xf7, 0x7a, 0x57, 0x1a, 0x74, 0x53, 0x83, 0xb1, 0x60, 0x8a, 0x0d, 0x48,
	0x29, 0xda, 0x83, 0xaa, 0x1d, 0x52, 0xaa, 0xf7, 0xa4, 0xd6, 0x93, 0x54, 0x6b, 0x18, 0x52, 0x3a,
	0x66, 0x1c, 0x5f, 0xf8, 0x1e, 0x5b, 0x4c, 0x2a, 0xa6, 0x54, 0x42, 0x07, 0x00, 0x8c, 0x63, 0x4e,
	0x2c, 0x8f, 0x5e, 0x86, 0xfa, 0x86, 0x34, 0xd9, 0xcc, 0xae, 0x89, 0x90, 0x4c, 0xe9, 0xa5, 0xc8,
	0x4e, 0x8b, 0xa5, 0x04, 0x3a, 0x82, 0x9e, 0xb2, 0x61, 0x14, 0x47, 0x6c, 0x11, 0x72, 0xbd, 0x5f,
	0x3e, 0xf4, 0xcc, 0xee, 0x34, 0x51, 0x98, 0x54, 0xcc, 0xae, 0x34, 0x49, 0x19, 0x68, 0x06, 0x5b,
	0x79, 0x5c, 0x2b, 0xba, 0xf1, 0x7d, 0x99, 0xbf, 0x4d, 0xe9, 0xe8, 0x93, 0x15, 0x47, 0x27, 0x37,
	0xbe, 0x9f, 0x27, 0xb2, 0xcf, 0x96, 0xf8, 0xe8, 0x10, 0x94, 0x7f, 0xe1, 0x44, 0x28, 0xe9, 0xa8,
	0x5c, 0x50, 0x26, 0x09, 0x42, 0x4e, 0xa4, 0xbb, 0xdc, 0x4d, 0x87, 0x15, 0x68, 0x34, 0x4a, 0x77,
	0x15, 0x27, 0x25, 0xa7, 0x6f, 0x49, 0x1f, 0x1f, 0x3f, 0xe8, 0x23, 0xab, 0xca, 0x2e, 0x2b, 0x32,
	0x44, 0x6e, 0x7c, 0x82, 0x1d, 0x55, 0xbc, 0xb2, 0x44, 0xb7, 0xcb, 0xb9, 0x79, 0x93, 0x49, 0xf3,
	0x42, 0xed, 0xe6, 0x26, 0xa2, 0x5c, 0xbf, 0x85, 0x6e, 0x44, 0x48, 0x6c, 0x79, 0x0e, 0xa1, 0xdc,
	0xe3, 0xf7, 0xfa, 0x93, 0xf2, 0x35, 0x3c, 0x21, 0x24, 0x9e, 0x26, 0x32, 0xb1, 0x8d, 0xa8, 0x40,
	0x8b, 0xcb, 0x8e, 0xed, 0x2b, 0xfd, 0xa9, 0x34, 0x79, 0x96, 0xdd, 0x5c, 0xfb, 0x8a, 0x86, 0x3f,
	0xf8, 0xc4, 0x71, 0x49, 0x40, 0xa8, 0xd8, 0xbc, 0xd0, 0x42, 0x7f, 0x06, 0x88, 0x62, 0xef, 0x56,
	0x65, 0x41, 0x7f, 0x56, 0x4e, 0xbe, 0xda, 0xef, 0xc9, 0x2d, 0x2f, 0x57, 0x71, 0xc1, 0x02, 0xbd,
	0x2e, 0xd8, 0x33, 0x5d, 0x97, 0xf6, 0xbf, 0x78, 0xc4, 0x3e, 0xcb, 0x58, 0xc1, 0x04, 0xbd, 0x86,
	0x4e, 0x42, 0x59, 0xa2, 0xd0, 0xf5, 0x8f, 0xca, 0xc7, 0x76, 0xa2, 0x64, 0xe5, 0x6b, 0xdd, 0x8e,
	0x72, 0xae, 0x61, 0xc1, 0xfa, 0x19, 0x76, 0x51, 0x17, 0x5a, 0xef, 0xe6, 0xa3, 0xf1, 0x77, 0xd3,
	0xf9, 0x78, 0xd4, 0xaf, 0xa0, 0x16, 0xd4, 0xc6, 0xb3, 0x93, 0xb3, 0xf3, 0xbe, 0x86, 0x3a, 0xd0,
	0x7c, 0x6b, 0x1e, 0x5b, 0x6f, 0xe7, 0x6f, 0xce, 0xfb, 0x6b, 0x42, 0x6f, 0x38, 0x39, 0x9c, 0x2b,
	0x72, 0x1d, 0xf5, 0xa1, 0x23, 0xc9, 0xc3, 0xf9, 0xc8, 0x7a, 0x6b, 0x1e, 0xf7, 0xab, 0x68, 0x03,
	0xda, 0x4a, 0xc1, 0x94, 0x8c, 0x5a, 0x11, 0x89, 0xff, 0xa7, 0x41, 0x2b, 0xab, 0x48, 0x34, 0x80,
	0x16, 0xf7, 0x02, 0xc2, 0x38, 0x0e, 0x22, 0x89, 0xb8, 0xed, 0x83, 0x7e, 0xf1, 0x84, 0xce, 0xbc,
	0x80, 0x98, 0xb9, 0x0a, 0x7a, 0x02, 0xf5, 0xe8, 0xca, 0xb3, 0x3c, 0x47, 0x02, 0x71, 0xc7, 0xac,
	0x45, 0x57, 0xde, 0xd4, 0x41, 0x9f, 0x41, 0x3b, 0xc1, 0x69, 0x6b, 0x76, 0x38, 0xd4, 0xab, 0x52,
	0x06, 0x09, 0x6b, 0x76, 0x38, 0x14, 0x37, 0x34, 0x8a, 0xc3, 0x88, 0xc4, 0xdc, 0x23, 0x2c, 0x41,
	0x64, 0x94, 0x27, 0x28, 0x95, 0x98, 0x05, 0x2d, 0xe3, 0x47, 0x0d, 0x20, 0x17, 0xa1, 0x5f, 0x42,
	0x57, 0x1e, 0x7d, 0x6c, 0x2d, 0x88, 0xe7, 0x2e, 0x78, 0xd2, 0x38, 0x3a, 0x8a, 0x39, 0x91, 0x3c,
	0xf4, 0x39, 0x74, 0x7c, 0x72, 0xc9, 0xad, 0x62, 0x13, 0x69, 0x9a, 0x6d, 0xc1, 0x1b, 0x26, 0x8d,
	0xe4, 0xb7, 0x20, 0x16, 0xe6, 0x51, 0x3b, 0x74, 0x08, 0xd3, 0xd7, 0x77, 0xd7, 0x8b, 0x60, 0x31,
	0x4c, 0x25, 0x66, 0x41, 0xc9, 0x38, 0x84, 0xcd, 0x15, 0x34, 0x40, 0x2f, 0xa1, 0x49, 0x7c, 0x59,
	0x88, 0x4c, 0xd7, 0xa4, 0x97, 0x2c, 0x73, 0x59, 0x4f, 0xce, 0x34, 0x8c, 0x3f, 0xc0, 0xf6, 0x43,
	0x38, 0xb0, 0x9c, 0x39, 0x6d, 0x39, 0x73, 0xc6, 0x25, 0x74, 0x4b, 0xa0, 0x57, 0x38, 0x02, 0xad,
	0x78, 0x04, 0x3b, 0xd0, 0xcc, 0xae, 0x9a, 0x6a, 0x9d, 0x19, 0x8d, 0x0c, 0xe8, 0x72, 0x9f, 0x59,
	0x36, 0x89, 0xb9, 0xb5, 0xc0, 0x6c, 0x91, 0x1c, 0x5e, 0x9b, 0xfb, 0x6c, 0x48, 0x62, 0x3e, 0xc1,
	0x6c, 0x61, 0xbc, 0x83, 0x4e, 0xf1, 0x4a, 0x3e, 0x16, 0x06, 0x41, 0x55, 0xb8, 0x49, 0x42, 0xc8,
	0x6f, 0x11, 0x3a, 0x20, 0x1c, 0xcb, 0xda, 0x57, 0x9e, 0x33, 0xda, 0x08, 0xa0, 0x5d, 0xb8, 0x79,
	0x8f, 0x77, 0x7d, 0x47, 0x76, 0x24, 0xa6, 0xaf, 0xed, 0xae, 0x8b, 0xae, 0x9f, 0x90, 0x68, 0x00,
	0xcd, 0x80, 0xb9, 0x16, 0xbf, 0x4f, 0xc6, 0x9f, 0x5e, 0xde, 0x96, 0x44, 0x16, 0x67, 0xcc, 0x3d,
	0xbb, 0x8f, 0x88, 0xd9, 0x08, 0xd4, 0x87, 0x11, 0x42, 0xbb, 0xd0, 0x0f, 0x1f, 0x09, 0x57, 0x5c,
	0xef, 0x5a, 0x79, 0xbd, 0x1f, 0x1c, 0xf0, 0x0e, 0x20, 0x6f, 0x75, 0x8f, 0xc4, 0xfb, 0x15, 0x54,
	0x93, 0x58, 0x0f, 0x57, 0x49, 0xf5, 0x27, 0x45, 0xf6, 0x55, 0x64, 0xd5, 0xca, 0x7f, 0xf6, 0xc4,
	0x7e, 0xa3, 0xce, 0x31, 0x9d, 0xde, 0x7e, 0x5d, 0x1e, 0x25, 0xdb, 0x07, 0x1b, 0x99, 0xb5, 0x62,
	0x67, 0xb3, 0xa5, 0xf1, 0x1d, 0xa0, 0x55, 0x04, 0x44, 0xaf, 0x96, 0x1d, 0x3c, 0x5d, 0x82, 0xcb,
	0x15, 0x3f, 0xe7, 0xd0, 0x48, 0x78, 0xe8, 0x19, 0x34, 0x18, 0xb9, 0xb6, 0xe8, 0x4d, 0x90, 0x6c,
	0xb7, 0xce, 0xc8, 0xf5, 0xfc, 0x26, 0x10, 0xd5, 0x59, 0x38, 0x55, 0x95, 0xd7, 0xcf, 0x97, 0xd0,
	0x79, 0x5d, 0x26, 0xa2, 0x84, 0xbf, 0xff, 0x59, 0x83, 0x5e, 0x39, 0x2c, 0xfa, 0x12, 0x36, 0xf2,
	0xb9, 0xde, 0xa2, 0x38, 0x50, 0x99, 0x6d, 0x99, 0xbd, 0x9c, 0x3d, 0xc7, 0x01, 0x11, 0xa3, 0xb3,
	0x90, 0xb2, 0x08, 0xdb, 0x6a, 0x74, 0x6e, 0x99, 0x39, 0x03, 0x6d, 0x41, 0x8d, 0xdf, 0xa5, 0x70,
	0xd9, 0x32, 0xab, 0xfc, 0x6e, 0xea, 0x08, 0x24, 0x4b, 0x57, 0x14, 0xff, 0xc0, 0x08, 0x4f, 0xf0,
	0x32, 0x5d, 0xa6, 0x29, 0x78, 0xe8, 0x25, 0xa0, 0x54, 0x89, 0x79, 0x41, 0x8a, 0x79, 0x35, 0xb9,
	0xdd, 0x7e, 0x22, 0x39, 0xf5, 0x82, 0x04, 0xf7, 0xe6, 0x80, 0x0a, 0xcb, 0xb5, 0x43, 0x7a, 0xe9,
	0xb9, 0x2c, 0x19, 0x63, 0x3f, 0x1b, 0xa8, 0x87, 0xca, 0x60, 0x98, 0x69, 0x0c, 0xa5, 0xc2, 0x09,
	0xb6, 0xaf, 0xb0, 0x4b, 0xcc, 0x4d, 0x7b, 0x49, 0xc0, 0x8c, 0x7f, 0x6b, 0xd0, 0x29, 0x0e, 0xca,
	0x68, 0x00, 0x10, 0x64, 0xf3, 0x6c, 0x72, 0x64, 0xbd, 0xf2, 0xa4, 0x6b, 0x16, 0x34, 0x3e, 0xb8,
	0xb1, 0x14, 0xe1, 0xab, 0x5a, 0x86, 0x2f, 0xe3, 0x9f, 0x1a, 0x6c, 0xae, 0x4c, 0x1c, 0x8f, 0x01,
	0xd4, 0x87, 0x06, 0x7e, 0x0e, 0x3d, 0x8f, 0x59, 0x0e, 0xb1, 0x7d, 0x1c, 0x63, 0x91, 0x02, 0x79,
	0x54, 0x4d, 0xb3, 0xeb, 0xb1, 0x51, 0xce, 0x34, 0xfe, 0x08, 0xcd, 0xd4, 0x5a, 0x94, 0x9f, 0x47,
	0xed, 0x62, 0xf9, 0x79, 0xd4, 0x16, 0xe5, 0x57, 0xa8, 0xcb, 0xb5, 0x62, 0x5d, 0x1a, 0x97, 0xb0,
	0xb9, 0xf2, 0x86, 0x40, 0xdf, 0x42, 0x9f, 0x11, 0xff, 0x52, 0x0e, 0x8f, 0x71, 0xa0, 0x62, 0x6b,
	0xe5, 0x05, 0x67, 0x10, 0xb1, 0x21, 0x34, 0xa7, 0xb9, 0xa2, 0xb8, 0xef, 0x62, 0x18, 0xa2, 0xc9,
	0xbd, 0x56, 0x84, 0x71, 0x01, 0x68, 0xf5, 0xd5, 0x81, 0xbe, 0x80, 0x9a, 0x7c, 0xe4, 0x3c, 0xda,
	0xa6, 0x94, 0x58, 0xe2, 0x14, 0xc1, 0xce, 0x7b, 0x70, 0x8a, 0x60, 0xc7, 0xf8, 0x2b, 0xd4, 0x55,
	0x0c, 0x71, 0x66, 0xa4, 0xf4, 0x0a, 0x34, 0x33, 0xfa, 0xbd, 0x18, 0xfb, 0xf0, 0x10, 0x61, 0x34,
	0xa0, 0x26, 0x1f, 0x01, 0xc6, 0xdf, 0x00, 0xad, 0x8e, 0xba, 0xa2, 0x89, 0x31, 0x8e, 0x63, 0x6e,
	0x95, 0xaf, 0x7e, 0x5b, 0x32, 0x4f, 0xd5, 0xfd, 0xff, 0x14, 0xda, 0x84, 0x3a, 0x56, 0xf9, 0x10,
	0x5a, 0x84, 0x3a, 0x4a, 0x6e, 0x1c, 0xc1, 0xd6, 0x03, 0x03, 0x30, 0xda, 0x83, 0x66, 0x82, 0x32,
	0x69, 0x2b, 0x5f, 0x81, 0xb3, 0x4c, 0xc1, 0x38, 0x86, 0xed, 0x87, 0x86, 0x4a, 0xb4, 0x9f, 0x63,
	0xad, 0xf2, 0x91, 0x3d, 0x5a, 0x12, 0x45, 0x85, 0xd4, 0x19, 0x04, 0x1b, 0xff, 0xd5, 0xa0, 0x5b,
	0x12, 0xe5, 0x68, 0xa1, 0x15, 0xd0, 0xe2, 0xfd, 0x00, 0xf3, 0x29, 0x40, 0x7e, 0x7b, 0x13, 0x94,
	0x29, 0x70, 0xd0, 0xc7, 0xd0, 0xba, 0xf0, 0x43, 0xfb, 0x4a, 0xe4, 0x44, 0x5e, 0xac, 0xaa, 0xd9,
	0x94, 0x8c, 0x53, 0x72, 0x8d, 0x76, 0xa1, 0x23, 0x52, 0xe5, 0x51, 0x4b, 0xb2, 0x12, 0x74, 0x01,
	0x46, 0xae, 0xa7, 0xf4, 0x48, 0x70, 0x8c, 0xef, 0xe1, 0xc9, 0x83, 0x13, 0x30, 0x3a, 0x58, 0x99,
	0x7e, 0x9e, 0x2e, 0x6d, 0x77, 0xac, 0xc4, 0x85, 0x19, 0xe8, 0x1c, 0x7a, 0x65, 0x19, 0xfa, 0x0a,
	0xea, 0x2a, 0x1b, 0x49, 0xe1, 0x3f, 0x92, 0xb2, 0x44, 0xa9, 0xf8, 0x03, 0x23, 0x69, 0x67, 0x69,
	0x73, 0xf8, 0x4b, 0xe6, 0x3a, 0x05, 0xf0, 0xe7, 0xb0, 0xc1, 0xef, 0xac, 0xd2, 0xf6, 0x92, 0x81,
	0x91, 0xdf, 0x9d, 0x66, 0x1b, 0x2c, 0xbb, 0x2c, 0xfe, 0x13, 0x31, 0xbe, 0x84, 0x8d, 0xa5, 0x07,
	0x87, 0xb8, 0x74, 0x24, 0x8e, 0xc3, 0x38, 0x39, 0x1f, 0x45, 0x18, 0xef, 0xa0, 0x95, 0x8d, 0x8d,
	0xa2, 0x03, 0x15, 0x9a, 0x85, 0xfc, 0x16, 0x31, 0x6e, 0x49, 0xcc, 0xc4, 0x01, 0xa9, 0xf3, 0x4b,
	0xc9, 0xf7, 0x4d, 0x4e, 0xbf, 0xf9, 0x13, 0xb4, 0x0b, 0x9d, 0x78, 0xf9, 0x71, 0xd0, 0x85, 0xd6,
	0xd1, 0x9b, 0xb7, 0xc3, 0xef, 0xad, 0xd9, 0xe9, 0x71, 0x5f, 0x13, 0x6f, 0x80, 0xe9, 0x68, 0x3c,
	0x3f, 0x9b, 0x9e, 0x9d, 0x4b, 0xce, 0xda, 0xc1, 0x3f, 0xa0, 0xae, 0x26, 0x21, 0xf4, 0x0d, 0x74,
	0xd4, 0xd7, 0x29, 0x8f, 0x09, 0x0e, 0xd0, 0xca, 0xc5, 0xde, 0x59, 0xe1, 0x18, 0x95, 0x17, 0xda,
	0x2b, 0x0d, 0x7d, 0x01, 0xd5, 0x13, 0x8f, 0xba, 0xa8, 0xfc, 0x48, 0xdf, 0x29, 0x93, 0x46, 0xe5,
	0xe8, 0xab, 0xbf, 0xef, 0xb9, 0x1e, 0x5f, 0xdc, 0x5c, 0x88, 0x4e, 0xb3, 0xbf, 0xb8, 0x8f, 0x48,
	0xac, 0xa6, 0xf2, 0xfd, 0x4b, 0x7c, 0x11, 0x7b, 0xf6, 0xbe, 0xfc, 0x2f, 0xc6, 0xf6, 0x95, 0xd9,
	0x45, 0x5d, 0x92, 0x5f, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x1d, 0xb3, 0x7e, 0x5f, 0x13,
	0x00, 0x00,
}

var GoCover_1_643036306334653135363963 = struct {
	Count     [820]uint32
	Pos       [3 * 820]uint32
	NumStmt   [820]uint16
} {
	Pos: [3 * 820]uint32{
		46, 48, 0x20026, // [0]
		49, 51, 0x20035, // [1]
		81, 83, 0x2002c, // [2]
		84, 86, 0x2003b, // [3]
		101, 101, 0x370024, // [4]
		102, 102, 0x490024, // [5]
		103, 103, 0x260025, // [6]
		104, 106, 0x2002f, // [7]
		107, 109, 0x20032, // [8]
		110, 112, 0x2004e, // [9]
		113, 115, 0x20033, // [10]
		116, 118, 0x20023, // [11]
		119, 121, 0x20029, // [12]
		125, 126, 0xe0028, // [13]
		129, 129, 0xc0002, // [14]
		126, 128, 0x3000e, // [15]
		132, 133, 0xe002a, // [16]
		136, 136, 0xc0002, // [17]
		133, 135, 0x3000e, // [18]
		139, 140, 0xe0038, // [19]
		143, 143, 0xc0002, // [20]
		140, 142, 0x3000e, // [21]
		159, 159, 0x43002a, // [22]
		160, 160, 0x4f002a, // [23]
		161, 161, 0x2c002b, // [24]
		162, 164, 0x20035, // [25]
		165, 167, 0x20038, // [26]
		168, 170, 0x20054, // [27]
		171, 173, 0x20039, // [28]
		174, 176, 0x20029, // [29]
		177, 179, 0x2002f, // [30]
		183, 184, 0xe002e, // [31]
		187, 187, 0xc0002, // [32]
		184, 186, 0x3000e, // [33]
		190, 191, 0xe0030, // [34]
		194, 194, 0xc0002, // [35]
		191, 193, 0x3000e, // [36]
		209, 209, 0x330022, // [37]
		210, 210, 0x470022, // [38]
		211, 211, 0x240023, // [39]
		212, 214, 0x2002d, // [40]
		215, 217, 0x20030, // [41]
		218, 220, 0x2004c, // [42]
		221, 223, 0x20031, // [43]
		224, 226, 0x20021, // [44]
		227, 229, 0x20027, // [45]
		241, 241, 0x360035, // [46]
		243, 244, 0xe0030, // [47]
		247, 247, 0xc0002, // [48]
		244, 246, 0x3000e, // [49]
		250, 251, 0x3c002f, // [50]
		254, 254, 0xb0002, // [51]
		251, 253, 0x3003c, // [52]
		258, 262, 0x200c9, // [53]
		264, 267, 0x1f0047, // [54]
		275, 275, 0xc0002, // [55]
		268, 270, 0x2a0020, // [56]
		271, 271, 0xb000b, // [57]
		272, 273, 0x40000a, // [58]
		278, 280, 0xd0060, // [59]
		281, 282, 0x1e0009, // [60]
		285, 287, 0x130003, // [61]
		288, 289, 0x14000a, // [62]
		282, 284, 0x4001e, // [63]
		293, 296, 0x1f0034, // [64]
		305, 305, 0xa0002, // [65]
		297, 300, 0x1f0020, // [66]
		301, 301, 0xb000b, // [67]
		302, 303, 0x3e000a, // [68]
		348, 348, 0x410029, // [69]
		349, 349, 0x4e0029, // [70]
		350, 350, 0x2b002a, // [71]
		351, 353, 0x20034, // [72]
		354, 356, 0x20037, // [73]
		357, 359, 0x20053, // [74]
		360, 362, 0x20038, // [75]
		363, 365, 0x20028, // [76]
		366, 368, 0x2002e, // [77]
		372, 373, 0xe002b, // [78]
		376, 376, 0xa0002, // [79]
		373, 375, 0x3000e, // [80]
		379, 380, 0xe002d, // [81]
		383, 383, 0xc0002, // [82]
		380, 382, 0x3000e, // [83]
		386, 387, 0xe0034, // [84]
		390, 390, 0x200002, // [85]
		387, 389, 0x3000e, // [86]
		481, 481, 0x3c003b, // [87]
		483, 483, 0x3a0039, // [88]
		485, 485, 0x3a0039, // [89]
		487, 487, 0x3b003a, // [90]
		489, 489, 0x390038, // [91]
		491, 491, 0x3b003a, // [92]
		493, 493, 0x3b003a, // [93]
		495, 495, 0x3e003d, // [94]
		497, 497, 0x390038, // [95]
		499, 499, 0x380037, // [96]
		501, 501, 0x3d003c, // [97]
		503, 503, 0x410040, // [98]
		505, 505, 0x440043, // [99]
		507, 507, 0x40003f, // [100]
		509, 509, 0x410040, // [101]
		511, 511, 0x410040, // [102]
		513, 513, 0x40003f, // [103]
		515, 515, 0x370036, // [104]
		517, 517, 0x3e003d, // [105]
		519, 519, 0x3e003d, // [106]
		521, 521, 0x3f003e, // [107]
		523, 524, 0xe003e, // [108]
		527, 527, 0xc0002, // [109]
		524, 526, 0x3000e, // [110]
		530, 531, 0x3b0035, // [111]
		534, 534, 0xc0002, // [112]
		531, 533, 0x3003b, // [113]
		537, 538, 0x390038, // [114]
		541, 541, 0xc0002, // [115]
		538, 540, 0x30039, // [116]
		544, 545, 0x390039, // [117]
		548, 548, 0xc0002, // [118]
		545, 547, 0x30039, // [119]
		551, 552, 0x3a0033, // [120]
		555, 555, 0xc0002, // [121]
		552, 554, 0x3003a, // [122]
		558, 559, 0x380031, // [123]
		562, 562, 0xc0002, // [124]
		559, 561, 0x30038, // [125]
		565, 566, 0x3a0032, // [126]
		569, 569, 0xc0002, // [127]
		566, 568, 0x3003a, // [128]
		572, 573, 0x3a0033, // [129]
		576, 576, 0xc0002, // [130]
		573, 575, 0x3003a, // [131]
		579, 580, 0x3d0035, // [132]
		583, 583, 0xc0002, // [133]
		580, 582, 0x3003d, // [134]
		586, 587, 0x38002b, // [135]
		590, 590, 0xc0002, // [136]
		587, 589, 0x30038, // [137]
		593, 594, 0x370032, // [138]
		597, 597, 0xc0002, // [139]
		594, 596, 0x30037, // [140]
		600, 601, 0x3c0033, // [141]
		604, 604, 0xc0002, // [142]
		601, 603, 0x3003c, // [143]
		607, 608, 0x40003f, // [144]
		611, 611, 0xc0002, // [145]
		608, 610, 0x30040, // [146]
		614, 615, 0x430045, // [147]
		618, 618, 0xc0002, // [148]
		615, 617, 0x30043, // [149]
		621, 622, 0x3f003f, // [150]
		625, 625, 0xc0002, // [151]
		622, 624, 0x3003f, // [152]
		628, 629, 0x400041, // [153]
		632, 632, 0xc0002, // [154]
		629, 631, 0x30040, // [155]
		635, 636, 0x40003f, // [156]
		639, 639, 0xc0002, // [157]
		636, 638, 0x30040, // [158]
		642, 643, 0x3f0039, // [159]
		646, 646, 0xc0002, // [160]
		643, 645, 0x3003f, // [161]
		649, 650, 0x360033, // [162]
		653, 653, 0xc0002, // [163]
		650, 652, 0x30036, // [164]
		656, 657, 0x3d003f, // [165]
		660, 660, 0xc0002, // [166]
		657, 659, 0x3003d, // [167]
		663, 664, 0x3d0040, // [168]
		667, 667, 0xc0002, // [169]
		664, 666, 0x3003d, // [170]
		670, 671, 0x3e003e, // [171]
		674, 674, 0xc0002, // [172]
		671, 673, 0x3003e, // [173]
		678, 702, 0x200d0, // [174]
		704, 707, 0x1f004e, // [175]
		817, 817, 0xc0002, // [176]
		708, 710, 0x35001f, // [177]
		713, 715, 0x33001d, // [178]
		718, 720, 0x33001d, // [179]
		723, 725, 0x34001e, // [180]
		728, 730, 0x32001c, // [181]
		733, 735, 0x34001e, // [182]
		738, 740, 0x34001e, // [183]
		743, 745, 0x370021, // [184]
		748, 750, 0x32001c, // [185]
		753, 755, 0x31001b, // [186]
		758, 760, 0x360020, // [187]
		763, 765, 0x3a0024, // [188]
		768, 770, 0x3d0027, // [189]
		773, 775, 0x390023, // [190]
		778, 780, 0x3a0024, // [191]
		783, 785, 0x3a0024, // [192]
		788, 790, 0x390023, // [193]
		793, 795, 0x30001a, // [194]
		798, 800, 0x370021, // [195]
		803, 805, 0x370021, // [196]
		808, 810, 0x380022, // [197]
		813, 813, 0xb000b, // [198]
		814, 815, 0x47000a, // [199]
		710, 712, 0x40035, // [200]
		715, 717, 0x40033, // [201]
		720, 722, 0x40033, // [202]
		725, 727, 0x40034, // [203]
		730, 732, 0x40032, // [204]
		735, 737, 0x40034, // [205]
		740, 742, 0x40034, // [206]
		745, 747, 0x40037, // [207]
		750, 752, 0x40032, // [208]
		755, 757, 0x40031, // [209]
		760, 762, 0x40036, // [210]
		765, 767, 0x4003a, // [211]
		770, 772, 0x4003d, // [212]
		775, 777, 0x40039, // [213]
		780, 782, 0x4003a, // [214]
		785, 787, 0x4003a, // [215]
		790, 792, 0x40039, // [216]
		795, 797, 0x40030, // [217]
		800, 802, 0x40037, // [218]
		805, 807, 0x40037, // [219]
		810, 812, 0x40038, // [220]
		820, 822, 0xd0067, // [221]
		823, 824, 0x1e0009, // [222]
		827, 830, 0x130003, // [223]
		831, 832, 0x1e0009, // [224]
		835, 838, 0x130003, // [225]
		839, 840, 0x1e0009, // [226]
		843, 846, 0x130003, // [227]
		847, 848, 0x1e0009, // [228]
		851, 854, 0x130003, // [229]
		855, 856, 0x1e0009, // [230]
		859, 862, 0x130003, // [231]
		863, 864, 0x1e000a, // [232]
		867, 870, 0x130003, // [233]
		871, 872, 0x1e000a, // [234]
		875, 878, 0x130003, // [235]
		879, 880, 0x1e000a, // [236]
		883, 886, 0x130003, // [237]
		887, 888, 0x1e000a, // [238]
		891, 894, 0x130003, // [239]
		895, 896, 0x1e000a, // [240]
		899, 902, 0x130003, // [241]
		903, 904, 0x1e000a, // [242]
		907, 910, 0x130003, // [243]
		911, 912, 0x1e000a, // [244]
		915, 918, 0x130003, // [245]
		919, 920, 0x1e000a, // [246]
		923, 926, 0x130003, // [247]
		927, 928, 0x1e000a, // [248]
		931, 934, 0x130003, // [249]
		935, 936, 0x1e000a, // [250]
		939, 942, 0x130003, // [251]
		943, 944, 0x1e000a, // [252]
		947, 950, 0x130003, // [253]
		951, 952, 0x1e000a, // [254]
		955, 958, 0x130003, // [255]
		959, 960, 0x1e000a, // [256]
		963, 966, 0x130003, // [257]
		967, 968, 0x1e000a, // [258]
		971, 974, 0x130003, // [259]
		975, 976, 0x1e000a, // [260]
		979, 982, 0x130003, // [261]
		983, 984, 0x1e000a, // [262]
		987, 990, 0x130003, // [263]
		991, 992, 0x14000a, // [264]
		824, 826, 0x4001e, // [265]
		832, 834, 0x4001e, // [266]
		840, 842, 0x4001e, // [267]
		848, 850, 0x4001e, // [268]
		856, 858, 0x4001e, // [269]
		864, 866, 0x4001e, // [270]
		872, 874, 0x4001e, // [271]
		880, 882, 0x4001e, // [272]
		888, 890, 0x4001e, // [273]
		896, 898, 0x4001e, // [274]
		904, 906, 0x4001e, // [275]
		912, 914, 0x4001e, // [276]
		920, 922, 0x4001e, // [277]
		928, 930, 0x4001e, // [278]
		936, 938, 0x4001e, // [279]
		944, 946, 0x4001e, // [280]
		952, 954, 0x4001e, // [281]
		960, 962, 0x4001e, // [282]
		968, 970, 0x4001e, // [283]
		976, 978, 0x4001e, // [284]
		984, 986, 0x4001e, // [285]
		996, 999, 0x1f003b, // [286]
		1109, 1109, 0xa0002, // [287]
		1000, 1004, 0x9001f, // [288]
		1005, 1009, 0x9001d, // [289]
		1010, 1014, 0x9001d, // [290]
		1015, 1019, 0x9001e, // [291]
		1020, 1024, 0x9001c, // [292]
		1025, 1029, 0x9001e, // [293]
		1030, 1034, 0x9001e, // [294]
		1035, 1039, 0x90021, // [295]
		1040, 1044, 0x9001c, // [296]
		1045, 1049, 0x9001b, // [297]
		1050, 1054, 0x90020, // [298]
		1055, 1059, 0x90024, // [299]
		1060, 1064, 0x90027, // [300]
		1065, 1069, 0x90023, // [301]
		1070, 1074, 0x90024, // [302]
		1075, 1079, 0x90024, // [303]
		1080, 1084, 0x90023, // [304]
		1085, 1089, 0x9001a, // [305]
		1090, 1094, 0x90021, // [306]
		1095, 1099, 0x90021, // [307]
		1100, 1104, 0x90022, // [308]
		1105, 1105, 0xb000b, // [309]
		1106, 1107, 0x3e000a, // [310]
		1127, 1127, 0x390025, // [311]
		1128, 1128, 0x4a0025, // [312]
		1129, 1129, 0x270026, // [313]
		1130, 1132, 0x20030, // [314]
		1133, 1135, 0x20033, // [315]
		1136, 1138, 0x2004f, // [316]
		1139, 1141, 0x20034, // [317]
		1142, 1144, 0x20024, // [318]
		1145, 1147, 0x2002a, // [319]
		1151, 1152, 0xe002e, // [320]
		1155, 1155, 0xc0002, // [321]
		1152, 1154, 0x3000e, // [322]
		1158, 1159, 0xe0027, // [323]
		1162, 1162, 0xc0002, // [324]
		1159, 1161, 0x3000e, // [325]
		1165, 1166, 0xe002d, // [326]
		1169, 1169, 0xc0002, // [327]
		1166, 1168, 0x3000e, // [328]
		1172, 1173, 0xe0031, // [329]
		1176, 1176, 0xc0002, // [330]
		1173, 1175, 0x3000e, // [331]
		1188, 1188, 0x3b0026, // [332]
		1189, 1189, 0x4b0026, // [333]
		1190, 1190, 0x280027, // [334]
		1191, 1193, 0x20031, // [335]
		1194, 1196, 0x20034, // [336]
		1197, 1199, 0x20050, // [337]
		1200, 1202, 0x20035, // [338]
		1203, 1205, 0x20025, // [339]
		1206, 1208, 0x2002b, // [340]
		1212, 1213, 0xe002f, // [341]
		1216, 1216, 0xa0002, // [342]
		1213, 1215, 0x3000e, // [343]
		1219, 1220, 0xe002c, // [344]
		1223, 1223, 0xe0002, // [345]
		1220, 1222, 0x3000e, // [346]
		1226, 1227, 0xe0033, // [347]
		1230, 1230, 0xc0002, // [348]
		1227, 1229, 0x3000e, // [349]
		1241, 1241, 0x49002d, // [350]
		1242, 1242, 0x52002d, // [351]
		1243, 1243, 0x2f002e, // [352]
		1244, 1246, 0x20038, // [353]
		1247, 1249, 0x2003b, // [354]
		1250, 1252, 0x20057, // [355]
		1253, 1255, 0x2003c, // [356]
		1256, 1258, 0x2002c, // [357]
		1259, 1261, 0x20032, // [358]
		1265, 1266, 0xe0037, // [359]
		1269, 1269, 0xc0002, // [360]
		1266, 1268, 0x3000e, // [361]
		1284, 1284, 0x4f0030, // [362]
		1285, 1285, 0x550030, // [363]
		1286, 1286, 0x320031, // [364]
		1287, 1289, 0x2003b, // [365]
		1290, 1292, 0x2003e, // [366]
		1293, 1295, 0x2005a, // [367]
		1296, 1298, 0x2003f, // [368]
		1299, 1301, 0x2002f, // [369]
		1302, 1304, 0x20035, // [370]
		1308, 1309, 0xe0038, // [371]
		1312, 1312, 0xc0002, // [372]
		1309, 1311, 0x3000e, // [373]
		1327, 1327, 0x410029, // [374]
		1328, 1328, 0x4e0029, // [375]
		1329, 1329, 0x2b002a, // [376]
		1330, 1332, 0x20034, // [377]
		1333, 1335, 0x20037, // [378]
		1336, 1338, 0x20053, // [379]
		1339, 1341, 0x20038, // [380]
		1342, 1344, 0x20028, // [381]
		1345, 1347, 0x2002e, // [382]
		1351, 1352, 0xe002b, // [383]
		1355, 1355, 0xc0002, // [384]
		1352, 1354, 0x3000e, // [385]
		1358, 1359, 0xe002e, // [386]
		1362, 1362, 0xc0002, // [387]
		1359, 1361, 0x3000e, // [388]
		1365, 1366, 0xe0031, // [389]
		1369, 1369, 0xc0002, // [390]
		1366, 1368, 0x3000e, // [391]
		1384, 1384, 0x3f0028, // [392]
		1385, 1385, 0x4d0028, // [393]
		1386, 1386, 0x2a0029, // [394]
		1387, 1389, 0x20033, // [395]
		1390, 1392, 0x20036, // [396]
		1393, 1395, 0x20052, // [397]
		1396, 1398, 0x20037, // [398]
		1399, 1401, 0x20027, // [399]
		1402, 1404, 0x2002d, // [400]
		1408, 1409, 0xe002a, // [401]
		1412, 1412, 0xc0002, // [402]
		1409, 1411, 0x3000e, // [403]
		1415, 1416, 0xe0029, // [404]
		1419, 1419, 0xc0002, // [405]
		1416, 1418, 0x3000e, // [406]
		1422, 1423, 0xe002d, // [407]
		1426, 1426, 0xc0002, // [408]
		1423, 1425, 0x3000e, // [409]
		1440, 1440, 0x3d0027, // [410]
		1441, 1441, 0x4c0027, // [411]
		1442, 1442, 0x290028, // [412]
		1443, 1445, 0x20032, // [413]
		1446, 1448, 0x20035, // [414]
		1449, 1451, 0x20051, // [415]
		1452, 1454, 0x20036, // [416]
		1455, 1457, 0x20026, // [417]
		1458, 1460, 0x2002c, // [418]
		1464, 1465, 0xe0029, // [419]
		1468, 1468, 0xa0002, // [420]
		1465, 1467, 0x3000e, // [421]
		1471, 1472, 0xe002d, // [422]
		1475, 1475, 0xc0002, // [423]
		1472, 1474, 0x3000e, // [424]
		1478, 1479, 0xe0030, // [425]
		1482, 1482, 0x1e0002, // [426]
		1479, 1481, 0x3000e, // [427]
		1496, 1496, 0x3d0027, // [428]
		1497, 1497, 0x4c0027, // [429]
		1498, 1498, 0x290028, // [430]
		1499, 1501, 0x20032, // [431]
		1502, 1504, 0x20035, // [432]
		1505, 1507, 0x20051, // [433]
		1508, 1510, 0x20036, // [434]
		1511, 1513, 0x20026, // [435]
		1514, 1516, 0x2002c, // [436]
		1520, 1521, 0xe0029, // [437]
		1524, 1524, 0xa0002, // [438]
		1521, 1523, 0x3000e, // [439]
		1527, 1528, 0xe002c, // [440]
		1531, 1531, 0xc0002, // [441]
		1528, 1530, 0x3000e, // [442]
		1534, 1535, 0xe0030, // [443]
		1538, 1538, 0x1e0002, // [444]
		1535, 1537, 0x3000e, // [445]
		1552, 1552, 0x3b0026, // [446]
		1553, 1553, 0x4b0026, // [447]
		1554, 1554, 0x280027, // [448]
		1555, 1557, 0x20031, // [449]
		1558, 1560, 0x20034, // [450]
		1561, 1563, 0x20050, // [451]
		1564, 1566, 0x20035, // [452]
		1567, 1569, 0x20025, // [453]
		1570, 1572, 0x2002b, // [454]
		1576, 1577, 0xe0028, // [455]
		1580, 1580, 0xa0002, // [456]
		1577, 1579, 0x3000e, // [457]
		1583, 1584, 0xe002c, // [458]
		1587, 1587, 0xc0002, // [459]
		1584, 1586, 0x3000e, // [460]
		1590, 1591, 0xe002f, // [461]
		1594, 1594, 0x1e0002, // [462]
		1591, 1593, 0x3000e, // [463]
		1608, 1608, 0x3b0026, // [464]
		1609, 1609, 0x4b0026, // [465]
		1610, 1610, 0x280027, // [466]
		1611, 1613, 0x20031, // [467]
		1614, 1616, 0x20034, // [468]
		1617, 1619, 0x20050, // [469]
		1620, 1622, 0x20035, // [470]
		1623, 1625, 0x20025, // [471]
		1626, 1628, 0x2002b, // [472]
		1632, 1633, 0xe0028, // [473]
		1636, 1636, 0xa0002, // [474]
		1633, 1635, 0x3000e, // [475]
		1639, 1640, 0xe002c, // [476]
		1643, 1643, 0xc0002, // [477]
		1640, 1642, 0x3000e, // [478]
		1646, 1647, 0xe002f, // [479]
		1650, 1650, 0x1e0002, // [480]
		1647, 1649, 0x3000e, // [481]
		1661, 1661, 0x3d0027, // [482]
		1662, 1662, 0x4c0027, // [483]
		1663, 1663, 0x290028, // [484]
		1664, 1666, 0x20032, // [485]
		1667, 1669, 0x20035, // [486]
		1670, 1672, 0x20051, // [487]
		1673, 1675, 0x20036, // [488]
		1676, 1678, 0x20026, // [489]
		1679, 1681, 0x2002c, // [490]
		1685, 1686, 0xe002d, // [491]
		1689, 1689, 0xc0002, // [492]
		1686, 1688, 0x3000e, // [493]
		1702, 1702, 0x4b002e, // [494]
		1703, 1703, 0x53002e, // [495]
		1704, 1704, 0x30002f, // [496]
		1705, 1707, 0x20039, // [497]
		1708, 1710, 0x2003c, // [498]
		1711, 1713, 0x20058, // [499]
		1714, 1716, 0x2003d, // [500]
		1717, 1719, 0x2002d, // [501]
		1720, 1722, 0x20033, // [502]
		1726, 1727, 0xe003b, // [503]
		1730, 1730, 0xc0002, // [504]
		1727, 1729, 0x3000e, // [505]
		1743, 1743, 0x350023, // [506]
		1744, 1744, 0x480023, // [507]
		1745, 1745, 0x250024, // [508]
		1746, 1748, 0x2002e, // [509]
		1749, 1751, 0x20031, // [510]
		1752, 1754, 0x2004d, // [511]
		1755, 1757, 0x20032, // [512]
		1758, 1760, 0x20022, // [513]
		1761, 1763, 0x20028, // [514]
		1767, 1768, 0xe0026, // [515]
		1771, 1771, 0xa0002, // [516]
		1768, 1770, 0x3000e, // [517]
		1774, 1775, 0xe0024, // [518]
		1778, 1778, 0xc0002, // [519]
		1775, 1777, 0x3000e, // [520]
		1781, 1782, 0xe002d, // [521]
		1785, 1785, 0xc0002, // [522]
		1782, 1784, 0x3000e, // [523]
		1803, 1803, 0x43002a, // [524]
		1804, 1804, 0x4f002a, // [525]
		1805, 1805, 0x2c002b, // [526]
		1806, 1808, 0x20035, // [527]
		1809, 1811, 0x20038, // [528]
		1812, 1814, 0x20054, // [529]
		1815, 1817, 0x20039, // [530]
		1818, 1820, 0x20029, // [531]
		1821, 1823, 0x2002f, // [532]
		1827, 1828, 0xe0035, // [533]
		1831, 1831, 0xb0002, // [534]
		1828, 1830, 0x3000e, // [535]
		1834, 1835, 0xe0030, // [536]
		1838, 1838, 0xb0002, // [537]
		1835, 1837, 0x3000e, // [538]
		1841, 1842, 0xe002b, // [539]
		1845, 1845, 0xb0002, // [540]
		1842, 1844, 0x3000e, // [541]
		1848, 1849, 0xe0033, // [542]
		1852, 1852, 0xc0002, // [543]
		1849, 1851, 0x3000e, // [544]
		1855, 1856, 0xe0037, // [545]
		1859, 1859, 0xa0002, // [546]
		1856, 1858, 0x3000e, // [547]
		1862, 1863, 0xe0051, // [548]
		1866, 1866, 0xc0002, // [549]
		1863, 1865, 0x3000e, // [550]
		1880, 1880, 0x3f0028, // [551]
		1881, 1881, 0x4d0028, // [552]
		1882, 1882, 0x2a0029, // [553]
		1883, 1885, 0x20033, // [554]
		1886, 1888, 0x20036, // [555]
		1889, 1891, 0x20052, // [556]
		1892, 1894, 0x20037, // [557]
		1895, 1897, 0x20027, // [558]
		1898, 1900, 0x2002d, // [559]
		1904, 1905, 0xe0030, // [560]
		1908, 1908, 0xc0002, // [561]
		1905, 1907, 0x3000e, // [562]
		1911, 1912, 0xe0031, // [563]
		1915, 1915, 0xc0002, // [564]
		1912, 1914, 0x3000e, // [565]
		1918, 1919, 0xe002d, // [566]
		1922, 1922, 0xc0002, // [567]
		1919, 1921, 0x3000e, // [568]
		1936, 1936, 0x49002d, // [569]
		1937, 1937, 0x52002d, // [570]
		1938, 1938, 0x2f002e, // [571]
		1939, 1941, 0x20038, // [572]
		1942, 1944, 0x2003b, // [573]
		1945, 1947, 0x20057, // [574]
		1948, 1950, 0x2003c, // [575]
		1951, 1953, 0x2002c, // [576]
		1954, 1956, 0x20032, // [577]
		1960, 1961, 0xe002f, // [578]
		1964, 1964, 0xc0002, // [579]
		1961, 1963, 0x3000e, // [580]
		1967, 1968, 0xe0036, // [581]
		1971, 1971, 0xc0002, // [582]
		1968, 1970, 0x3000e, // [583]
		1974, 1975, 0xe0035, // [584]
		1978, 1978, 0xe0002, // [585]
		1975, 1977, 0x3000e, // [586]
		1990, 1990, 0x370024, // [587]
		1991, 1991, 0x490024, // [588]
		1992, 1992, 0x260025, // [589]
		1993, 1995, 0x2002f, // [590]
		1996, 1998, 0x20032, // [591]
		1999, 2001, 0x2004e, // [592]
		2002, 2004, 0x20033, // [593]
		2005, 2007, 0x20023, // [594]
		2008, 2010, 0x20029, // [595]
		2014, 2015, 0xe0027, // [596]
		2018, 2018, 0xa0002, // [597]
		2015, 2017, 0x3000e, // [598]
		2021, 2022, 0xe0027, // [599]
		2025, 2025, 0xa0002, // [600]
		2022, 2024, 0x3000e, // [601]
		2038, 2038, 0x49002d, // [602]
		2039, 2039, 0x52002d, // [603]
		2040, 2040, 0x2f002e, // [604]
		2041, 2043, 0x20038, // [605]
		2044, 2046, 0x2003b, // [606]
		2047, 2049, 0x20057, // [607]
		2050, 2052, 0x2003c, // [608]
		2053, 2055, 0x2002c, // [609]
		2056, 2058, 0x20032, // [610]
		2062, 2063, 0xe003c, // [611]
		2066, 2066, 0xc0002, // [612]
		2063, 2065, 0x3000e, // [613]
		2069, 2070, 0xe0031, // [614]
		2073, 2073, 0xc0002, // [615]
		2070, 2072, 0x3000e, // [616]
		2085, 2085, 0x4b002e, // [617]
		2086, 2086, 0x53002e, // [618]
		2087, 2087, 0x30002f, // [619]
		2088, 2090, 0x20039, // [620]
		2091, 2093, 0x2003c, // [621]
		2094, 2096, 0x20058, // [622]
		2097, 2099, 0x2003d, // [623]
		2100, 2102, 0x2002d, // [624]
		2103, 2105, 0x20033, // [625]
		2109, 2110, 0xe0035, // [626]
		2113, 2113, 0xc0002, // [627]
		2110, 2112, 0x3000e, // [628]
		2116, 2117, 0xe0034, // [629]
		2120, 2120, 0xc0002, // [630]
		2117, 2119, 0x3000e, // [631]
		2134, 2134, 0x330022, // [632]
		2135, 2135, 0x470022, // [633]
		2136, 2136, 0x240023, // [634]
		2137, 2139, 0x2002d, // [635]
		2140, 2142, 0x20030, // [636]
		2143, 2145, 0x2004c, // [637]
		2146, 2148, 0x20031, // [638]
		2149, 2151, 0x20021, // [639]
		2152, 2154, 0x20027, // [640]
		2158, 2159, 0xe0027, // [641]
		2162, 2162, 0xb0002, // [642]
		2159, 2161, 0x3000e, // [643]
		2165, 2166, 0xe0027, // [644]
		2169, 2169, 0xc0002, // [645]
		2166, 2168, 0x3000e, // [646]
		2172, 2173, 0xe0024, // [647]
		2176, 2176, 0xc0002, // [648]
		2173, 2175, 0x3000e, // [649]
		2186, 2186, 0x310021, // [650]
		2187, 2187, 0x460021, // [651]
		2188, 2188, 0x230022, // [652]
		2189, 2191, 0x2002c, // [653]
		2192, 2194, 0x2002f, // [654]
		2195, 2197, 0x2004b, // [655]
		2198, 2200, 0x20030, // [656]
		2201, 2203, 0x20020, // [657]
		2204, 2206, 0x20026, // [658]
		2220, 2220, 0x4b002e, // [659]
		2221, 2221, 0x53002e, // [660]
		2222, 2222, 0x30002f, // [661]
		2223, 2225, 0x20039, // [662]
		2226, 2228, 0x2003c, // [663]
		2229, 2231, 0x20058, // [664]
		2232, 2234, 0x2003d, // [665]
		2235, 2237, 0x2002d, // [666]
		2238, 2240, 0x20033, // [667]
		2244, 2245, 0xe0036, // [668]
		2248, 2248, 0xa0002, // [669]
		2245, 2247, 0x3000e, // [670]
		2251, 2252, 0xe0034, // [671]
		2255, 2255, 0xa0002, // [672]
		2252, 2254, 0x3000e, // [673]
		2267, 2267, 0x4d002f, // [674]
		2268, 2268, 0x54002f, // [675]
		2269, 2269, 0x310030, // [676]
		2270, 2272, 0x2003a, // [677]
		2273, 2275, 0x2003d, // [678]
		2276, 2278, 0x20059, // [679]
		2279, 2281, 0x2003e, // [680]
		2282, 2284, 0x2002e, // [681]
		2285, 2287, 0x20034, // [682]
		2291, 2292, 0xe0038, // [683]
		2295, 2295, 0xc0002, // [684]
		2292, 2294, 0x3000e, // [685]
		2307, 2307, 0x4f0030, // [686]
		2308, 2308, 0x550030, // [687]
		2309, 2309, 0x320031, // [688]
		2310, 2312, 0x2003b, // [689]
		2313, 2315, 0x2003e, // [690]
		2316, 2318, 0x2005a, // [691]
		2319, 2321, 0x2003f, // [692]
		2322, 2324, 0x2002f, // [693]
		2325, 2327, 0x20035, // [694]
		2331, 2332, 0xe003e, // [695]
		2335, 2335, 0xc0002, // [696]
		2332, 2334, 0x3000e, // [697]
		2350, 2350, 0x410029, // [698]
		2351, 2351, 0x4e0029, // [699]
		2352, 2352, 0x2b002a, // [700]
		2353, 2355, 0x20034, // [701]
		2356, 2358, 0x20037, // [702]
		2359, 2361, 0x20053, // [703]
		2362, 2364, 0x20038, // [704]
		2365, 2367, 0x20028, // [705]
		2368, 2370, 0x2002e, // [706]
		2374, 2375, 0xe002a, // [707]
		2378, 2378, 0xb0002, // [708]
		2375, 2377, 0x3000e, // [709]
		2381, 2382, 0xe002f, // [710]
		2385, 2385, 0xb0002, // [711]
		2382, 2384, 0x3000e, // [712]
		2388, 2389, 0xe0030, // [713]
		2392, 2392, 0xb0002, // [714]
		2389, 2391, 0x3000e, // [715]
		2395, 2396, 0xe002e, // [716]
		2399, 2399, 0xa0002, // [717]
		2396, 2398, 0x3000e, // [718]
		2402, 2403, 0xe0030, // [719]
		2406, 2406, 0xa0002, // [720]
		2403, 2405, 0x3000e, // [721]
		2418, 2418, 0x510031, // [722]
		2419, 2419, 0x560031, // [723]
		2420, 2420, 0x330032, // [724]
		2421, 2423, 0x2003c, // [725]
		2424, 2426, 0x2003f, // [726]
		2427, 2429, 0x2005b, // [727]
		2430, 2432, 0x20040, // [728]
		2433, 2435, 0x20030, // [729]
		2436, 2438, 0x20036, // [730]
		2442, 2443, 0xe0041, // [731]
		2446, 2446, 0xc0002, // [732]
		2443, 2445, 0x3000e, // [733]
		2458, 2458, 0x43002a, // [734]
		2459, 2459, 0x4f002a, // [735]
		2460, 2460, 0x2c002b, // [736]
		2461, 2463, 0x20035, // [737]
		2464, 2466, 0x20038, // [738]
		2467, 2469, 0x20054, // [739]
		2470, 2472, 0x20039, // [740]
		2473, 2475, 0x20029, // [741]
		2476, 2478, 0x2002f, // [742]
		2482, 2483, 0xe0035, // [743]
		2486, 2486, 0xc0002, // [744]
		2483, 2485, 0x3000e, // [745]
		2489, 2490, 0xe0030, // [746]
		2493, 2493, 0xc0002, // [747]
		2490, 2492, 0x3000e, // [748]
		2508, 2508, 0x43002a, // [749]
		2509, 2509, 0x4f002a, // [750]
		2510, 2510, 0x2c002b, // [751]
		2511, 2513, 0x20035, // [752]
		2514, 2516, 0x20038, // [753]
		2517, 2519, 0x20054, // [754]
		2520, 2522, 0x20039, // [755]
		2523, 2525, 0x20029, // [756]
		2526, 2528, 0x2002f, // [757]
		2532, 2533, 0xe0033, // [758]
		2536, 2536, 0xa0002, // [759]
		2533, 2535, 0x3000e, // [760]
		2539, 2540, 0xe002e, // [761]
		2543, 2543, 0xc0002, // [762]
		2540, 2542, 0x3000e, // [763]
		2553, 2553, 0x45002b, // [764]
		2554, 2554, 0x50002b, // [765]
		2555, 2555, 0x2d002c, // [766]
		2556, 2558, 0x20036, // [767]
		2559, 2561, 0x20039, // [768]
		2562, 2564, 0x20055, // [769]
		2565, 2567, 0x2003a, // [770]
		2568, 2570, 0x2002a, // [771]
		2571, 2573, 0x20030, // [772]
		2577, 2578, 0xe002d, // [773]
		2581, 2581, 0xb0002, // [774]
		2578, 2580, 0x3000e, // [775]
		2595, 2595, 0x390025, // [776]
		2596, 2596, 0x4a0025, // [777]
		2597, 2597, 0x270026, // [778]
		2598, 2600, 0x20030, // [779]
		2601, 2603, 0x20033, // [780]
		2604, 2606, 0x2004f, // [781]
		2607, 2609, 0x20034, // [782]
		2610, 2612, 0x20024, // [783]
		2613, 2615, 0x2002a, // [784]
		2619, 2620, 0xe0026, // [785]
		2623, 2623, 0xb0002, // [786]
		2620, 2622, 0x3000e, // [787]
		2626, 2627, 0xe0029, // [788]
		2630, 2630, 0xb0002, // [789]
		2627, 2629, 0x3000e, // [790]
		2633, 2634, 0xe002a, // [791]
		2637, 2637, 0xc0002, // [792]
		2634, 2636, 0x3000e, // [793]
		2640, 2677, 0x2000d, // [794]
		2701, 2703, 0x20038, // [795]
		2705, 2707, 0x100076, // [796]
		2710, 2711, 0xf0002, // [797]
		2707, 2709, 0x30010, // [798]
		2724, 2726, 0x2003c, // [799]
		2728, 2730, 0x32003e, // [800]
		2733, 2733, 0xf0002, // [801]
		2730, 2732, 0x30032, // [802]
		2736, 2739, 0x100066, // [803]
		2742, 2742, 0x110002, // [804]
		2739, 2741, 0x30010, // [805]
		2753, 2755, 0x2003d, // [806]
		2757, 2759, 0x20054, // [807]
		2771, 2773, 0x2003c, // [808]
		2775, 2777, 0x32003e, // [809]
		2780, 2780, 0xf0002, // [810]
		2777, 2779, 0x30032, // [811]
		2783, 2785, 0x20009c, // [812]
		2788, 2788, 0x180002, // [813]
		2791, 2795, 0x4d0002, // [814]
		2798, 2798, 0x2c0002, // [815]
		2785, 2787, 0x30020, // [816]
		2788, 2790, 0x30018, // [817]
		2795, 2797, 0x3004d, // [818]
		2821, 2821, 0x64000d, // [819]
	},
	NumStmt: [820]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
		0, // 6
		1, // 7
		1, // 8
		1, // 9
		1, // 10
		1, // 11
		1, // 12
		1, // 13
		1, // 14
		1, // 15
		1, // 16
		1, // 17
		1, // 18
		1, // 19
		1, // 20
		1, // 21
		1, // 22
		1, // 23
		0, // 24
		1, // 25
		1, // 26
		1, // 27
		1, // 28
		1, // 29
		1, // 30
		1, // 31
		1, // 32
		1, // 33
		1, // 34
		1, // 35
		1, // 36
		1, // 37
		1, // 38
		0, // 39
		1, // 40
		1, // 41
		1, // 42
		1, // 43
		1, // 44
		1, // 45
		0, // 46
		1, // 47
		1, // 48
		1, // 49
		1, // 50
		1, // 51
		1, // 52
		1, // 53
		2, // 54
		1, // 55
		2, // 56
		0, // 57
		1, // 58
		2, // 59
		1, // 60
		3, // 61
		1, // 62
		1, // 63
		2, // 64
		1, // 65
		3, // 66
		0, // 67
		1, // 68
		1, // 69
		1, // 70
		0, // 71
		1, // 72
		1, // 73
		1, // 74
		1, // 75
		1, // 76
		1, // 77
		1, // 78
		1, // 79
		1, // 80
		1, // 81
		1, // 82
		1, // 83
		1, // 84
		1, // 85
		1, // 86
		0, // 87
		0, // 88
		0, // 89
		0, // 90
		0, // 91
		0, // 92
		0, // 93
		0, // 94
		0, // 95
		0, // 96
		0, // 97
		0, // 98
		0, // 99
		0, // 100
		0, // 101
		0, // 102
		0, // 103
		0, // 104
		0, // 105
		0, // 106
		0, // 107
		1, // 108
		1, // 109
		1, // 110
		1, // 111
		1, // 112
		1, // 113
		1, // 114
		1, // 115
		1, // 116
		1, // 117
		1, // 118
		1, // 119
		1, // 120
		1, // 121
		1, // 122
		1, // 123
		1, // 124
		1, // 125
		1, // 126
		1, // 127
		1, // 128
		1, // 129
		1, // 130
		1, // 131
		1, // 132
		1, // 133
		1, // 134
		1, // 135
		1, // 136
		1, // 137
		1, // 138
		1, // 139
		1, // 140
		1, // 141
		1, // 142
		1, // 143
		1, // 144
		1, // 145
		1, // 146
		1, // 147
		1, // 148
		1, // 149
		1, // 150
		1, // 151
		1, // 152
		1, // 153
		1, // 154
		1, // 155
		1, // 156
		1, // 157
		1, // 158
		1, // 159
		1, // 160
		1, // 161
		1, // 162
		1, // 163
		1, // 164
		1, // 165
		1, // 166
		1, // 167
		1, // 168
		1, // 169
		1, // 170
		1, // 171
		1, // 172
		1, // 173
		1, // 174
		2, // 175
		1, // 176
		2, // 177
		2, // 178
		2, // 179
		2, // 180
		2, // 181
		2, // 182
		2, // 183
		2, // 184
		2, // 185
		2, // 186
		2, // 187
		2, // 188
		2, // 189
		2, // 190
		2, // 191
		2, // 192
		2, // 193
		2, // 194
		2, // 195
		2, // 196
		2, // 197
		0, // 198
		1, // 199
		1, // 200
		1, // 201
		1, // 202
		1, // 203
		1, // 204
		1, // 205
		1, // 206
		1, // 207
		1, // 208
		1, // 209
		1, // 210
		1, // 211
		1, // 212
		1, // 213
		1, // 214
		1, // 215
		1, // 216
		1, // 217
		1, // 218
		1, // 219
		1, // 220
		2, // 221
		1, // 222
		4, // 223
		1, // 224
		4, // 225
		1, // 226
		4, // 227
		1, // 228
		4, // 229
		1, // 230
		4, // 231
		1, // 232
		4, // 233
		1, // 234
		4, // 235
		1, // 236
		4, // 237
		1, // 238
		4, // 239
		1, // 240
		4, // 241
		1, // 242
		4, // 243
		1, // 244
		4, // 245
		1, // 246
		4, // 247
		1, // 248
		4, // 249
		1, // 250
		4, // 251
		1, // 252
		4, // 253
		1, // 254
		4, // 255
		1, // 256
		4, // 257
		1, // 258
		4, // 259
		1, // 260
		4, // 261
		1, // 262
		4, // 263
		1, // 264
		1, // 265
		1, // 266
		1, // 267
		1, // 268
		1, // 269
		1, // 270
		1, // 271
		1, // 272
		1, // 273
		1, // 274
		1, // 275
		1, // 276
		1, // 277
		1, // 278
		1, // 279
		1, // 280
		1, // 281
		1, // 282
		1, // 283
		1, // 284
		1, // 285
		2, // 286
		1, // 287
		4, // 288
		4, // 289
		4, // 290
		4, // 291
		4, // 292
		4, // 293
		4, // 294
		4, // 295
		4, // 296
		4, // 297
		4, // 298
		4, // 299
		4, // 300
		4, // 301
		4, // 302
		4, // 303
		4, // 304
		4, // 305
		4, // 306
		4, // 307
		4, // 308
		0, // 309
		1, // 310
		1, // 311
		1, // 312
		0, // 313
		1, // 314
		1, // 315
		1, // 316
		1, // 317
		1, // 318
		1, // 319
		1, // 320
		1, // 321
		1, // 322
		1, // 323
		1, // 324
		1, // 325
		1, // 326
		1, // 327
		1, // 328
		1, // 329
		1, // 330
		1, // 331
		1, // 332
		1, // 333
		0, // 334
		1, // 335
		1, // 336
		1, // 337
		1, // 338
		1, // 339
		1, // 340
		1, // 341
		1, // 342
		1, // 343
		1, // 344
		1, // 345
		1, // 346
		1, // 347
		1, // 348
		1, // 349
		1, // 350
		1, // 351
		0, // 352
		1, // 353
		1, // 354
		1, // 355
		1, // 356
		1, // 357
		1, // 358
		1, // 359
		1, // 360
		1, // 361
		1, // 362
		1, // 363
		0, // 364
		1, // 365
		1, // 366
		1, // 367
		1, // 368
		1, // 369
		1, // 370
		1, // 371
		1, // 372
		1, // 373
		1, // 374
		1, // 375
		0, // 376
		1, // 377
		1, // 378
		1, // 379
		1, // 380
		1, // 381
		1, // 382
		1, // 383
		1, // 384
		1, // 385
		1, // 386
		1, // 387
		1, // 388
		1, // 389
		1, // 390
		1, // 391
		1, // 392
		1, // 393
		0, // 394
		1, // 395
		1, // 396
		1, // 397
		1, // 398
		1, // 399
		1, // 400
		1, // 401
		1, // 402
		1, // 403
		1, // 404
		1, // 405
		1, // 406
		1, // 407
		1, // 408
		1, // 409
		1, // 410
		1, // 411
		0, // 412
		1, // 413
		1, // 414
		1, // 415
		1, // 416
		1, // 417
		1, // 418
		1, // 419
		1, // 420
		1, // 421
		1, // 422
		1, // 423
		1, // 424
		1, // 425
		1, // 426
		1, // 427
		1, // 428
		1, // 429
		0, // 430
		1, // 431
		1, // 432
		1, // 433
		1, // 434
		1, // 435
		1, // 436
		1, // 437
		1, // 438
		1, // 439
		1, // 440
		1, // 441
		1, // 442
		1, // 443
		1, // 444
		1, // 445
		1, // 446
		1, // 447
		0, // 448
		1, // 449
		1, // 450
		1, // 451
		1, // 452
		1, // 453
		1, // 454
		1, // 455
		1, // 456
		1, // 457
		1, // 458
		1, // 459
		1, // 460
		1, // 461
		1, // 462
		1, // 463
		1, // 464
		1, // 465
		0, // 466
		1, // 467
		1, // 468
		1, // 469
		1, // 470
		1, // 471
		1, // 472
		1, // 473
		1, // 474
		1, // 475
		1, // 476
		1, // 477
		1, // 478
		1, // 479
		1, // 480
		1, // 481
		1, // 482
		1, // 483
		0, // 484
		1, // 485
		1, // 486
		1, // 487
		1, // 488
		1, // 489
		1, // 490
		1, // 491
		1, // 492
		1, // 493
		1, // 494
		1, // 495
		0, // 496
		1, // 497
		1, // 498
		1, // 499
		1, // 500
		1, // 501
		1, // 502
		1, // 503
		1, // 504
		1, // 505
		1, // 506
		1, // 507
		0, // 508
		1, // 509
		1, // 510
		1, // 511
		1, // 512
		1, // 513
		1, // 514
		1, // 515
		1, // 516
		1, // 517
		1, // 518
		1, // 519
		1, // 520
		1, // 521
		1, // 522
		1, // 523
		1, // 524
		1, // 525
		0, // 526
		1, // 527
		1, // 528
		1, // 529
		1, // 530
		1, // 531
		1, // 532
		1, // 533
		1, // 534
		1, // 535
		1, // 536
		1, // 537
		1, // 538
		1, // 539
		1, // 540
		1, // 541
		1, // 542
		1, // 543
		1, // 544
		1, // 545
		1, // 546
		1, // 547
		1, // 548
		1, // 549
		1, // 550
		1, // 551
		1, // 552
		0, // 553
		1, // 554
		1, // 555
		1, // 556
		1, // 557
		1, // 558
		1, // 559
		1, // 560
		1, // 561
		1, // 562
		1, // 563
		1, // 564
		1, // 565
		1, // 566
		1, // 567
		1, // 568
		1, // 569
		1, // 570
		0, // 571
		1, // 572
		1, // 573
		1, // 574
		1, // 575
		1, // 576
		1, // 577
		1, // 578
		1, // 579
		1, // 580
		1, // 581
		1, // 582
		1, // 583
		1, // 584
		1, // 585
		1, // 586
		1, // 587
		1, // 588
		0, // 589
		1, // 590
		1, // 591
		1, // 592
		1, // 593
		1, // 594
		1, // 595
		1, // 596
		1, // 597
		1, // 598
		1, // 599
		1, // 600
		1, // 601
		1, // 602
		1, // 603
		0, // 604
		1, // 605
		1, // 606
		1, // 607
		1, // 608
		1, // 609
		1, // 610
		1, // 611
		1, // 612
		1, // 613
		1, // 614
		1, // 615
		1, // 616
		1, // 617
		1, // 618
		0, // 619
		1, // 620
		1, // 621
		1, // 622
		1, // 623
		1, // 624
		1, // 625
		1, // 626
		1, // 627
		1, // 628
		1, // 629
		1, // 630
		1, // 631
		1, // 632
		1, // 633
		0, // 634
		1, // 635
		1, // 636
		1, // 637
		1, // 638
		1, // 639
		1, // 640
		1, // 641
		1, // 642
		1, // 643
		1, // 644
		1, // 645
		1, // 646
		1, // 647
		1, // 648
		1, // 649
		1, // 650
		1, // 651
		0, // 652
		1, // 653
		1, // 654
		1, // 655
		1, // 656
		1, // 657
		1, // 658
		1, // 659
		1, // 660
		0, // 661
		1, // 662
		1, // 663
		1, // 664
		1, // 665
		1, // 666
		1, // 667
		1, // 668
		1, // 669
		1, // 670
		1, // 671
		1, // 672
		1, // 673
		1, // 674
		1, // 675
		0, // 676
		1, // 677
		1, // 678
		1, // 679
		1, // 680
		1, // 681
		1, // 682
		1, // 683
		1, // 684
		1, // 685
		1, // 686
		1, // 687
		0, // 688
		1, // 689
		1, // 690
		1, // 691
		1, // 692
		1, // 693
		1, // 694
		1, // 695
		1, // 696
		1, // 697
		1, // 698
		1, // 699
		0, // 700
		1, // 701
		1, // 702
		1, // 703
		1, // 704
		1, // 705
		1, // 706
		1, // 707
		1, // 708
		1, // 709
		1, // 710
		1, // 711
		1, // 712
		1, // 713
		1, // 714
		1, // 715
		1, // 716
		1, // 717
		1, // 718
		1, // 719
		1, // 720
		1, // 721
		1, // 722
		1, // 723
		0, // 724
		1, // 725
		1, // 726
		1, // 727
		1, // 728
		1, // 729
		1, // 730
		1, // 731
		1, // 732
		1, // 733
		1, // 734
		1, // 735
		0, // 736
		1, // 737
		1, // 738
		1, // 739
		1, // 740
		1, // 741
		1, // 742
		1, // 743
		1, // 744
		1, // 745
		1, // 746
		1, // 747
		1, // 748
		1, // 749
		1, // 750
		0, // 751
		1, // 752
		1, // 753
		1, // 754
		1, // 755
		1, // 756
		1, // 757
		1, // 758
		1, // 759
		1, // 760
		1, // 761
		1, // 762
		1, // 763
		1, // 764
		1, // 765
		0, // 766
		1, // 767
		1, // 768
		1, // 769
		1, // 770
		1, // 771
		1, // 772
		1, // 773
		1, // 774
		1, // 775
		1, // 776
		1, // 777
		0, // 778
		1, // 779
		1, // 780
		1, // 781
		1, // 782
		1, // 783
		1, // 784
		1, // 785
		1, // 786
		1, // 787
		1, // 788
		1, // 789
		1, // 790
		1, // 791
		1, // 792
		1, // 793
		36, // 794
		1, // 795
		2, // 796
		2, // 797
		1, // 798
		1, // 799
		2, // 800
		1, // 801
		1, // 802
		3, // 803
		1, // 804
		1, // 805
		1, // 806
		1, // 807
		1, // 808
		2, // 809
		1, // 810
		1, // 811
		2, // 812
		1, // 813
		2, // 814
		1, // 815
		1, // 816
		1, // 817
		1, // 818
		1, // 819
	},
}
var _ = _cover_atomic_.LoadUint32
