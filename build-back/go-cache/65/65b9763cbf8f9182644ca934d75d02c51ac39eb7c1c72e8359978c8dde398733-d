//line /home/cooper/go/src/github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/validator/valimpl/default_impl.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package valimpl; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric/common/flogging"
	"github.com/hyperledger/fabric/core/ledger"
	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/privacyenabledstate"
	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/txmgr"
	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/validator"
	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/validator/internal"
	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/validator/statebasedval"
	"github.com/hyperledger/fabric/core/ledger/util"
	"github.com/hyperledger/fabric/protos/common"
)

var logger = flogging.MustGetLogger("valimpl")

// DefaultImpl implements the interface validator.Validator
// This performs the common tasks that are independent of a particular scheme of validation
// and for actual validation of the public rwset, it encloses an internal validator (that implements interface
// internal.InternalValidator) such as statebased validator
type DefaultImpl struct {
	txmgr             txmgr.TxMgr
	db                privacyenabledstate.DB
	internalValidator internal.Validator
}

// NewStatebasedValidator constructs a validator that internally manages statebased validator and in addition
// handles the tasks that are agnostic to a particular validation scheme such as parsing the block and handling the pvt data
func NewStatebasedValidator(txmgr txmgr.TxMgr, db privacyenabledstate.DB) validator.Validator {_cover_atomic_.AddUint32(&GoCover_0_376364336236376665646463.Count[0], 1);
	return &DefaultImpl{txmgr, db, statebasedval.NewValidator(db)}
}

// ValidateAndPrepareBatch implements the function in interface validator.Validator
func (impl *DefaultImpl) ValidateAndPrepareBatch(blockAndPvtdata *ledger.BlockAndPvtData,
	doMVCCValidation bool) (*privacyenabledstate.UpdateBatch, []*txmgr.TxStatInfo, error) {_cover_atomic_.AddUint32(&GoCover_0_376364336236376665646463.Count[1], 1);
	block := blockAndPvtdata.Block
	logger.Debugf("ValidateAndPrepareBatch() for block number = [%d]", block.Header.Number)
	var internalBlock *internal.Block
	var txsStatInfo []*txmgr.TxStatInfo
	var pubAndHashUpdates *internal.PubAndHashUpdates
	var pvtUpdates *privacyenabledstate.PvtUpdateBatch
	var err error

	logger.Debug("preprocessing ProtoBlock...")
	if internalBlock, txsStatInfo, err = preprocessProtoBlock(impl.txmgr, impl.db.ValidateKeyValue, block, doMVCCValidation); err != nil {_cover_atomic_.AddUint32(&GoCover_0_376364336236376665646463.Count[6], 1);
		return nil, nil, err
	}

	_cover_atomic_.AddUint32(&GoCover_0_376364336236376665646463.Count[2], 1);if pubAndHashUpdates, err = impl.internalValidator.ValidateAndPrepareBatch(internalBlock, doMVCCValidation); err != nil {_cover_atomic_.AddUint32(&GoCover_0_376364336236376665646463.Count[7], 1);
		return nil, nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_376364336236376665646463.Count[3], 1);logger.Debug("validating rwset...")
	if pvtUpdates, err = validateAndPreparePvtBatch(internalBlock, impl.db, pubAndHashUpdates, blockAndPvtdata.PvtData); err != nil {_cover_atomic_.AddUint32(&GoCover_0_376364336236376665646463.Count[8], 1);
		return nil, nil, err
	}
	_cover_atomic_.AddUint32(&GoCover_0_376364336236376665646463.Count[4], 1);logger.Debug("postprocessing ProtoBlock...")
	postprocessProtoBlock(block, internalBlock)
	logger.Debug("ValidateAndPrepareBatch() complete")

	txsFilter := util.TxValidationFlags(block.Metadata.Metadata[common.BlockMetadataIndex_TRANSACTIONS_FILTER])
	for i := range txsFilter {_cover_atomic_.AddUint32(&GoCover_0_376364336236376665646463.Count[9], 1);
		txsStatInfo[i].ValidationCode = txsFilter.Flag(i)
	}
	_cover_atomic_.AddUint32(&GoCover_0_376364336236376665646463.Count[5], 1);return &privacyenabledstate.UpdateBatch{
		PubUpdates:  pubAndHashUpdates.PubUpdates,
		HashUpdates: pubAndHashUpdates.HashUpdates,
		PvtUpdates:  pvtUpdates,
	}, txsStatInfo, nil
}

var GoCover_0_376364336236376665646463 = struct {
	Count     [10]uint32
	Pos       [3 * 10]uint32
	NumStmt   [10]uint16
} {
	Pos: [3 * 10]uint32{
		35, 37, 0x2005f, // [0]
		41, 51, 0x870058, // [1]
		55, 55, 0x7a0002, // [2]
		58, 59, 0x820002, // [3]
		62, 67, 0x1b0002, // [4]
		70, 74, 0x150002, // [5]
		51, 53, 0x30087, // [6]
		55, 57, 0x3007a, // [7]
		59, 61, 0x30082, // [8]
		67, 69, 0x3001b, // [9]
	},
	NumStmt: [10]uint16{
		1, // 0
		9, // 1
		1, // 2
		2, // 3
		5, // 4
		1, // 5
		1, // 6
		1, // 7
		1, // 8
		1, // 9
	},
}
var _ = _cover_atomic_.LoadUint32
