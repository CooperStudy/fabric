//line /home/cooper/go/src/github.com/hyperledger/fabric/core/common/privdata/membershipinfo.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package privdata; import _cover_atomic_ "sync/atomic"

import (
	"github.com/hyperledger/fabric/msp"
	"github.com/hyperledger/fabric/protos/common"
)

// MembershipProvider can be used to check whether a peer is eligible to a collection or not
type MembershipProvider struct {
	selfSignedData              common.SignedData
	IdentityDeserializerFactory func(chainID string) msp.IdentityDeserializer
}

// NewMembershipInfoProvider returns MembershipProvider
func NewMembershipInfoProvider(selfSignedData common.SignedData, identityDeserializerFunc func(chainID string) msp.IdentityDeserializer) *MembershipProvider {_cover_atomic_.AddUint32(&GoCover_1_666632313434393663303335.Count[0], 1);
	return &MembershipProvider{selfSignedData: selfSignedData, IdentityDeserializerFactory: identityDeserializerFunc}
}

// AmMemberOf checks whether the current peer is a member of the given collection config
func (m *MembershipProvider) AmMemberOf(channelName string, collectionPolicyConfig *common.CollectionPolicyConfig) (bool, error) {_cover_atomic_.AddUint32(&GoCover_1_666632313434393663303335.Count[1], 1);
	deserializer := m.IdentityDeserializerFactory(channelName)
	accessPolicy, err := getPolicy(collectionPolicyConfig, deserializer)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_1_666632313434393663303335.Count[4], 1);
		return false, err
	}
	_cover_atomic_.AddUint32(&GoCover_1_666632313434393663303335.Count[2], 1);if err := accessPolicy.Evaluate([]*common.SignedData{&m.selfSignedData}); err != nil {_cover_atomic_.AddUint32(&GoCover_1_666632313434393663303335.Count[5], 1);
		return false, nil
	}
	_cover_atomic_.AddUint32(&GoCover_1_666632313434393663303335.Count[3], 1);return true, nil
}

var GoCover_1_666632313434393663303335 = struct {
	Count     [6]uint32
	Pos       [3 * 6]uint32
	NumStmt   [6]uint16
} {
	Pos: [3 * 6]uint32{
		21, 23, 0x2009e, // [0]
		26, 29, 0x100082, // [1]
		32, 32, 0x570002, // [2]
		35, 35, 0x120002, // [3]
		29, 31, 0x30010, // [4]
		32, 34, 0x30057, // [5]
	},
	NumStmt: [6]uint16{
		1, // 0
		3, // 1
		1, // 2
		1, // 3
		1, // 4
		1, // 5
	},
}
var _ = _cover_atomic_.LoadUint32
