//line /home/cooper/go/src/github.com/hyperledger/fabric/discovery/cmd/peers.go:1
/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package discovery; import _cover_atomic_ "sync/atomic"

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/cmd/common"
	"github.com/hyperledger/fabric/discovery/client"
	"github.com/hyperledger/fabric/protos/msp"
	"github.com/pkg/errors"
)

// NewPeerCmd creates a new PeerCmd with the given Stub and ResponseParser
func NewPeerCmd(stub Stub, parser ResponseParser) *PeerCmd {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[0], 1);
	return &PeerCmd{
		stub:   stub,
		parser: parser,
	}
}

// PeerCmd executes channelPeer listing command
type PeerCmd struct {
	stub    Stub
	server  *string
	channel *string
	parser  ResponseParser
}

// SetServer sets the server of the PeerCmd
func (pc *PeerCmd) SetServer(server *string) {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[1], 1);
	pc.server = server
}

// SetChannel sets the channel of the PeerCmd
func (pc *PeerCmd) SetChannel(channel *string) {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[2], 1);
	pc.channel = channel
}

// Execute executes the command
func (pc *PeerCmd) Execute(conf common.Config) error {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[3], 1);
	channel := ""

	if pc.channel != nil {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[8], 1);
		channel = *pc.channel
	}

	_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[4], 1);if pc.server == nil || *pc.server == "" {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[9], 1);
		return errors.New("no server specified")
	}

	_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[5], 1);server := *pc.server

	req := discovery.NewRequest()
	if channel != "" {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[10], 1);
		req = req.OfChannel(channel)
		req = req.AddPeersQuery()
	} else{ _cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[11], 1);{
		req = req.AddLocalPeersQuery()
	}}
	_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[6], 1);res, err := pc.stub.Send(server, conf, req)
	if err != nil {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[12], 1);
		return err
	}
	_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[7], 1);return pc.parser.ParseResponse(channel, res)
}

// PeerResponseParser parses a channelPeer response
type PeerResponseParser struct {
	io.Writer
}

// ParseResponse parses the given response about the given channel
func (parser *PeerResponseParser) ParseResponse(channel string, res ServiceResponse) error {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[13], 1);
	var listPeers peerLister
	if channel == "" {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[16], 1);
		listPeers = res.ForLocal()
	} else{ _cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[17], 1);{
		listPeers = &simpleChannelResponse{res.ForChannel(channel)}
	}}
	_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[14], 1);peers, err := listPeers.Peers()
	if err != nil {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[18], 1);
		return err
	}

	_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[15], 1);channelState := channel != ""
	b, _ := json.MarshalIndent(assemblePeers(peers, channelState), "", "\t")
	fmt.Fprintln(parser.Writer, string(b))
	return nil
}

func assemblePeers(peers []*discovery.Peer, withChannelState bool) interface{} {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[19], 1);
	if withChannelState {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[22], 1);
		var peerSlices []channelPeer
		for _, p := range peers {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[24], 1);
			peerSlices = append(peerSlices, rawPeerToChannelPeer(p))
		}
		_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[23], 1);return peerSlices
	}
	_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[20], 1);var peerSlices []localPeer
	for _, p := range peers {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[25], 1);
		peerSlices = append(peerSlices, rawPeerToLocalPeer(p))
	}
	_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[21], 1);return peerSlices
}

type channelPeer struct {
	MSPID        string
	LedgerHeight uint64
	Endpoint     string
	Identity     string
	Chaincodes   []string
}

type localPeer struct {
	MSPID    string
	Endpoint string
	Identity string
}

type peerLister interface {
	Peers() ([]*discovery.Peer, error)
}

type simpleChannelResponse struct {
	discovery.ChannelResponse
}

func (scr *simpleChannelResponse) Peers() ([]*discovery.Peer, error) {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[26], 1);
	return scr.ChannelResponse.Peers()
}

func rawPeerToChannelPeer(p *discovery.Peer) channelPeer {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[27], 1);
	var ledgerHeight uint64
	var ccs []string
	if p.StateInfoMessage != nil && p.StateInfoMessage.GetStateInfo() != nil && p.StateInfoMessage.GetStateInfo().Properties != nil {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[30], 1);
		properties := p.StateInfoMessage.GetStateInfo().Properties
		ledgerHeight = properties.LedgerHeight
		for _, cc := range properties.Chaincodes {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[31], 1);
			if cc == nil {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[33], 1);
				continue
			}
			_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[32], 1);ccs = append(ccs, cc.Name)
		}
	}
	_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[28], 1);var endpoint string
	if p.AliveMessage != nil && p.AliveMessage.GetAliveMsg() != nil && p.AliveMessage.GetAliveMsg().Membership != nil {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[34], 1);
		endpoint = p.AliveMessage.GetAliveMsg().Membership.Endpoint
	}
	_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[29], 1);sID := &msp.SerializedIdentity{}
	proto.Unmarshal(p.Identity, sID)
	return channelPeer{
		MSPID:        p.MSPID,
		Endpoint:     endpoint,
		LedgerHeight: ledgerHeight,
		Identity:     string(sID.IdBytes),
		Chaincodes:   ccs,
	}
}

func rawPeerToLocalPeer(p *discovery.Peer) localPeer {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[35], 1);
	var endpoint string
	if p.AliveMessage != nil && p.AliveMessage.GetAliveMsg() != nil && p.AliveMessage.GetAliveMsg().Membership != nil {_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[37], 1);
		endpoint = p.AliveMessage.GetAliveMsg().Membership.Endpoint
	}
	_cover_atomic_.AddUint32(&GoCover_3_646636343763343830343930.Count[36], 1);sID := &msp.SerializedIdentity{}
	proto.Unmarshal(p.Identity, sID)
	return localPeer{
		MSPID:    p.MSPID,
		Endpoint: endpoint,
		Identity: string(sID.IdBytes),
	}
}

var GoCover_3_646636343763343830343930 = struct {
	Count     [38]uint32
	Pos       [3 * 38]uint32
	NumStmt   [38]uint16
} {
	Pos: [3 * 38]uint32{
		22, 27, 0x2003c, // [0]
		38, 40, 0x2002e, // [1]
		43, 45, 0x20030, // [2]
		48, 51, 0x170036, // [3]
		55, 55, 0x2a0002, // [4]
		59, 62, 0x130002, // [5]
		68, 69, 0x100002, // [6]
		72, 72, 0x2e0002, // [7]
		51, 53, 0x30017, // [8]
		55, 57, 0x3002a, // [9]
		62, 65, 0x30013, // [10]
		65, 67, 0x30008, // [11]
		69, 71, 0x30010, // [12]
		81, 83, 0x13005c, // [13]
		88, 89, 0x100002, // [14]
		93, 96, 0xc0002, // [15]
		83, 85, 0x30013, // [16]
		85, 87, 0x30008, // [17]
		89, 91, 0x30010, // [18]
		99, 100, 0x160050, // [19]
		107, 108, 0x1a0002, // [20]
		111, 111, 0x130002, // [21]
		100, 102, 0x1b0016, // [22]
		105, 105, 0x140003, // [23]
		102, 104, 0x4001b, // [24]
		108, 110, 0x3001a, // [25]
		136, 138, 0x20046, // [26]
		140, 143, 0x82003a, // [27]
		153, 154, 0x740002, // [28]
		157, 165, 0x30002, // [29]
		143, 146, 0x2c0082, // [30]
		146, 147, 0x11002c, // [31]
		150, 150, 0x1e0004, // [32]
		147, 148, 0xd0011, // [33]
		154, 156, 0x30074, // [34]
		168, 170, 0x740036, // [35]
		173, 179, 0x30002, // [36]
		170, 172, 0x30074, // [37]
	},
	NumStmt: [38]uint16{
		1, // 0
		1, // 1
		1, // 2
		2, // 3
		1, // 4
		3, // 5
		2, // 6
		1, // 7
		1, // 8
		1, // 9
		2, // 10
		1, // 11
		1, // 12
		2, // 13
		2, // 14
		4, // 15
		1, // 16
		1, // 17
		1, // 18
		1, // 19
		2, // 20
		1, // 21
		2, // 22
		1, // 23
		1, // 24
		1, // 25
		1, // 26
		3, // 27
		2, // 28
		3, // 29
		3, // 30
		1, // 31
		1, // 32
		1, // 33
		1, // 34
		2, // 35
		3, // 36
		1, // 37
	},
}
var _ = _cover_atomic_.LoadUint32
